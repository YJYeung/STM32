ARM GAS  /tmp/ccGnuz6d.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"ethernetif.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.low_level_input,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv5-d16
  23              	low_level_input:
  24              	.LFB162:
  25              		.file 1 "LWIP/Target/ethernetif.c"
   1:LWIP/Target/ethernetif.c **** /**
   2:LWIP/Target/ethernetif.c ****   ******************************************************************************
   3:LWIP/Target/ethernetif.c ****   * File Name          : ethernetif.c
   4:LWIP/Target/ethernetif.c ****   * Description        : This file provides code for the configuration
   5:LWIP/Target/ethernetif.c ****   *                      of the Target/ethernetif.c MiddleWare.
   6:LWIP/Target/ethernetif.c ****   ******************************************************************************
   7:LWIP/Target/ethernetif.c ****   * @attention
   8:LWIP/Target/ethernetif.c ****   *
   9:LWIP/Target/ethernetif.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:LWIP/Target/ethernetif.c ****   * All rights reserved.</center></h2>
  11:LWIP/Target/ethernetif.c ****   *
  12:LWIP/Target/ethernetif.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:LWIP/Target/ethernetif.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:LWIP/Target/ethernetif.c ****   * the License. You may obtain a copy of the License at:
  15:LWIP/Target/ethernetif.c ****   *                             www.st.com/SLA0044
  16:LWIP/Target/ethernetif.c ****   *
  17:LWIP/Target/ethernetif.c ****   ******************************************************************************
  18:LWIP/Target/ethernetif.c ****   */
  19:LWIP/Target/ethernetif.c **** 
  20:LWIP/Target/ethernetif.c **** /* Includes ------------------------------------------------------------------*/
  21:LWIP/Target/ethernetif.c **** #include "main.h"
  22:LWIP/Target/ethernetif.c **** #include "lwip/opt.h"
  23:LWIP/Target/ethernetif.c **** #include "lwip/mem.h"
  24:LWIP/Target/ethernetif.c **** #include "lwip/memp.h"
  25:LWIP/Target/ethernetif.c **** #include "lwip/timeouts.h"
  26:LWIP/Target/ethernetif.c **** #include "netif/ethernet.h"
  27:LWIP/Target/ethernetif.c **** #include "netif/etharp.h"
  28:LWIP/Target/ethernetif.c **** #include "lwip/ethip6.h"
  29:LWIP/Target/ethernetif.c **** #include "ethernetif.h"
  30:LWIP/Target/ethernetif.c **** #include <string.h>
  31:LWIP/Target/ethernetif.c **** 
  32:LWIP/Target/ethernetif.c **** /* Within 'USER CODE' section, code will be kept by default at each generation */
  33:LWIP/Target/ethernetif.c **** /* USER CODE BEGIN 0 */
ARM GAS  /tmp/ccGnuz6d.s 			page 2


  34:LWIP/Target/ethernetif.c **** 
  35:LWIP/Target/ethernetif.c **** /* USER CODE END 0 */
  36:LWIP/Target/ethernetif.c **** 
  37:LWIP/Target/ethernetif.c **** /* Private define ------------------------------------------------------------*/
  38:LWIP/Target/ethernetif.c **** 
  39:LWIP/Target/ethernetif.c **** /* Network interface name */
  40:LWIP/Target/ethernetif.c **** #define IFNAME0 's'
  41:LWIP/Target/ethernetif.c **** #define IFNAME1 't'
  42:LWIP/Target/ethernetif.c **** 
  43:LWIP/Target/ethernetif.c **** /* USER CODE BEGIN 1 */
  44:LWIP/Target/ethernetif.c **** 
  45:LWIP/Target/ethernetif.c **** /* USER CODE END 1 */
  46:LWIP/Target/ethernetif.c **** 
  47:LWIP/Target/ethernetif.c **** /* Private variables ---------------------------------------------------------*/
  48:LWIP/Target/ethernetif.c **** #if defined ( __ICCARM__ ) /*!< IAR Compiler */
  49:LWIP/Target/ethernetif.c ****   #pragma data_alignment=4
  50:LWIP/Target/ethernetif.c **** #endif
  51:LWIP/Target/ethernetif.c **** __ALIGN_BEGIN ETH_DMADescTypeDef  DMARxDscrTab[ETH_RXBUFNB] __ALIGN_END;/* Ethernet Rx MA Descripto
  52:LWIP/Target/ethernetif.c **** 
  53:LWIP/Target/ethernetif.c **** #if defined ( __ICCARM__ ) /*!< IAR Compiler */
  54:LWIP/Target/ethernetif.c ****   #pragma data_alignment=4
  55:LWIP/Target/ethernetif.c **** #endif
  56:LWIP/Target/ethernetif.c **** __ALIGN_BEGIN ETH_DMADescTypeDef  DMATxDscrTab[ETH_TXBUFNB] __ALIGN_END;/* Ethernet Tx DMA Descript
  57:LWIP/Target/ethernetif.c **** 
  58:LWIP/Target/ethernetif.c **** #if defined ( __ICCARM__ ) /*!< IAR Compiler */
  59:LWIP/Target/ethernetif.c ****   #pragma data_alignment=4
  60:LWIP/Target/ethernetif.c **** #endif
  61:LWIP/Target/ethernetif.c **** __ALIGN_BEGIN uint8_t Rx_Buff[ETH_RXBUFNB][ETH_RX_BUF_SIZE] __ALIGN_END; /* Ethernet Receive Buffer
  62:LWIP/Target/ethernetif.c **** 
  63:LWIP/Target/ethernetif.c **** #if defined ( __ICCARM__ ) /*!< IAR Compiler */
  64:LWIP/Target/ethernetif.c ****   #pragma data_alignment=4
  65:LWIP/Target/ethernetif.c **** #endif
  66:LWIP/Target/ethernetif.c **** __ALIGN_BEGIN uint8_t Tx_Buff[ETH_TXBUFNB][ETH_TX_BUF_SIZE] __ALIGN_END; /* Ethernet Transmit Buffe
  67:LWIP/Target/ethernetif.c **** 
  68:LWIP/Target/ethernetif.c **** /* USER CODE BEGIN 2 */
  69:LWIP/Target/ethernetif.c **** 
  70:LWIP/Target/ethernetif.c **** /* USER CODE END 2 */
  71:LWIP/Target/ethernetif.c **** 
  72:LWIP/Target/ethernetif.c **** /* Global Ethernet handle */
  73:LWIP/Target/ethernetif.c **** ETH_HandleTypeDef heth;
  74:LWIP/Target/ethernetif.c **** 
  75:LWIP/Target/ethernetif.c **** /* USER CODE BEGIN 3 */
  76:LWIP/Target/ethernetif.c **** 
  77:LWIP/Target/ethernetif.c **** /* USER CODE END 3 */
  78:LWIP/Target/ethernetif.c **** 
  79:LWIP/Target/ethernetif.c **** /* Private functions ---------------------------------------------------------*/
  80:LWIP/Target/ethernetif.c **** 
  81:LWIP/Target/ethernetif.c **** void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
  82:LWIP/Target/ethernetif.c **** {
  83:LWIP/Target/ethernetif.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  84:LWIP/Target/ethernetif.c ****   if(ethHandle->Instance==ETH)
  85:LWIP/Target/ethernetif.c ****   {
  86:LWIP/Target/ethernetif.c ****   /* USER CODE BEGIN ETH_MspInit 0 */
  87:LWIP/Target/ethernetif.c **** 
  88:LWIP/Target/ethernetif.c ****   /* USER CODE END ETH_MspInit 0 */
  89:LWIP/Target/ethernetif.c ****     /* Enable Peripheral clock */
  90:LWIP/Target/ethernetif.c ****     __HAL_RCC_ETH_CLK_ENABLE();
ARM GAS  /tmp/ccGnuz6d.s 			page 3


  91:LWIP/Target/ethernetif.c **** 
  92:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOC_CLK_ENABLE();
  93:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOA_CLK_ENABLE();
  94:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOB_CLK_ENABLE();
  95:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOG_CLK_ENABLE();
  96:LWIP/Target/ethernetif.c ****     /**ETH GPIO Configuration
  97:LWIP/Target/ethernetif.c ****     PC1     ------> ETH_MDC
  98:LWIP/Target/ethernetif.c ****     PA1     ------> ETH_REF_CLK
  99:LWIP/Target/ethernetif.c ****     PA2     ------> ETH_MDIO
 100:LWIP/Target/ethernetif.c ****     PA7     ------> ETH_CRS_DV
 101:LWIP/Target/ethernetif.c ****     PC4     ------> ETH_RXD0
 102:LWIP/Target/ethernetif.c ****     PC5     ------> ETH_RXD1
 103:LWIP/Target/ethernetif.c ****     PB13     ------> ETH_TXD1
 104:LWIP/Target/ethernetif.c ****     PG11     ------> ETH_TX_EN
 105:LWIP/Target/ethernetif.c ****     PG13     ------> ETH_TXD0
 106:LWIP/Target/ethernetif.c ****     */
 107:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 108:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 109:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 110:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 111:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 112:LWIP/Target/ethernetif.c ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 113:LWIP/Target/ethernetif.c **** 
 114:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 115:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 116:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 117:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 118:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 119:LWIP/Target/ethernetif.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 120:LWIP/Target/ethernetif.c **** 
 121:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 122:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 123:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 124:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 125:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 126:LWIP/Target/ethernetif.c ****     HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 127:LWIP/Target/ethernetif.c **** 
 128:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 129:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 130:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 131:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 132:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 133:LWIP/Target/ethernetif.c ****     HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 134:LWIP/Target/ethernetif.c **** 
 135:LWIP/Target/ethernetif.c ****   /* USER CODE BEGIN ETH_MspInit 1 */
 136:LWIP/Target/ethernetif.c **** 
 137:LWIP/Target/ethernetif.c ****   /* USER CODE END ETH_MspInit 1 */
 138:LWIP/Target/ethernetif.c ****   }
 139:LWIP/Target/ethernetif.c **** }
 140:LWIP/Target/ethernetif.c **** 
 141:LWIP/Target/ethernetif.c **** void HAL_ETH_MspDeInit(ETH_HandleTypeDef* ethHandle)
 142:LWIP/Target/ethernetif.c **** {
 143:LWIP/Target/ethernetif.c ****   if(ethHandle->Instance==ETH)
 144:LWIP/Target/ethernetif.c ****   {
 145:LWIP/Target/ethernetif.c ****   /* USER CODE BEGIN ETH_MspDeInit 0 */
 146:LWIP/Target/ethernetif.c **** 
 147:LWIP/Target/ethernetif.c ****   /* USER CODE END ETH_MspDeInit 0 */
ARM GAS  /tmp/ccGnuz6d.s 			page 4


 148:LWIP/Target/ethernetif.c ****     /* Peripheral clock disable */
 149:LWIP/Target/ethernetif.c ****     __HAL_RCC_ETH_CLK_DISABLE();
 150:LWIP/Target/ethernetif.c **** 
 151:LWIP/Target/ethernetif.c ****     /**ETH GPIO Configuration
 152:LWIP/Target/ethernetif.c ****     PC1     ------> ETH_MDC
 153:LWIP/Target/ethernetif.c ****     PA1     ------> ETH_REF_CLK
 154:LWIP/Target/ethernetif.c ****     PA2     ------> ETH_MDIO
 155:LWIP/Target/ethernetif.c ****     PA7     ------> ETH_CRS_DV
 156:LWIP/Target/ethernetif.c ****     PC4     ------> ETH_RXD0
 157:LWIP/Target/ethernetif.c ****     PC5     ------> ETH_RXD1
 158:LWIP/Target/ethernetif.c ****     PB13     ------> ETH_TXD1
 159:LWIP/Target/ethernetif.c ****     PG11     ------> ETH_TX_EN
 160:LWIP/Target/ethernetif.c ****     PG13     ------> ETH_TXD0
 161:LWIP/Target/ethernetif.c ****     */
 162:LWIP/Target/ethernetif.c ****     HAL_GPIO_DeInit(GPIOC, RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin);
 163:LWIP/Target/ethernetif.c **** 
 164:LWIP/Target/ethernetif.c ****     HAL_GPIO_DeInit(GPIOA, RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin);
 165:LWIP/Target/ethernetif.c **** 
 166:LWIP/Target/ethernetif.c ****     HAL_GPIO_DeInit(RMII_TXD1_GPIO_Port, RMII_TXD1_Pin);
 167:LWIP/Target/ethernetif.c **** 
 168:LWIP/Target/ethernetif.c ****     HAL_GPIO_DeInit(GPIOG, RMII_TX_EN_Pin|RMII_TXD0_Pin);
 169:LWIP/Target/ethernetif.c **** 
 170:LWIP/Target/ethernetif.c ****   /* USER CODE BEGIN ETH_MspDeInit 1 */
 171:LWIP/Target/ethernetif.c **** 
 172:LWIP/Target/ethernetif.c ****   /* USER CODE END ETH_MspDeInit 1 */
 173:LWIP/Target/ethernetif.c ****   }
 174:LWIP/Target/ethernetif.c **** }
 175:LWIP/Target/ethernetif.c **** 
 176:LWIP/Target/ethernetif.c **** /* USER CODE BEGIN 4 */
 177:LWIP/Target/ethernetif.c **** 
 178:LWIP/Target/ethernetif.c **** /* USER CODE END 4 */
 179:LWIP/Target/ethernetif.c **** 
 180:LWIP/Target/ethernetif.c **** /*******************************************************************************
 181:LWIP/Target/ethernetif.c ****                        LL Driver Interface ( LwIP stack --> ETH)
 182:LWIP/Target/ethernetif.c **** *******************************************************************************/
 183:LWIP/Target/ethernetif.c **** /**
 184:LWIP/Target/ethernetif.c ****  * In this function, the hardware should be initialized.
 185:LWIP/Target/ethernetif.c ****  * Called from ethernetif_init().
 186:LWIP/Target/ethernetif.c ****  *
 187:LWIP/Target/ethernetif.c ****  * @param netif the already initialized lwip network interface structure
 188:LWIP/Target/ethernetif.c ****  *        for this ethernetif
 189:LWIP/Target/ethernetif.c ****  */
 190:LWIP/Target/ethernetif.c **** static void low_level_init(struct netif *netif)
 191:LWIP/Target/ethernetif.c **** {
 192:LWIP/Target/ethernetif.c ****   uint32_t regvalue = 0;
 193:LWIP/Target/ethernetif.c ****   HAL_StatusTypeDef hal_eth_init_status;
 194:LWIP/Target/ethernetif.c **** 
 195:LWIP/Target/ethernetif.c **** /* Init ETH */
 196:LWIP/Target/ethernetif.c **** 
 197:LWIP/Target/ethernetif.c ****    uint8_t MACAddr[6] ;
 198:LWIP/Target/ethernetif.c ****   heth.Instance = ETH;
 199:LWIP/Target/ethernetif.c ****   heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 200:LWIP/Target/ethernetif.c ****   heth.Init.Speed = ETH_SPEED_100M;
 201:LWIP/Target/ethernetif.c ****   heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 202:LWIP/Target/ethernetif.c ****   heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 203:LWIP/Target/ethernetif.c ****   MACAddr[0] = 0x00;
 204:LWIP/Target/ethernetif.c ****   MACAddr[1] = 0x80;
ARM GAS  /tmp/ccGnuz6d.s 			page 5


 205:LWIP/Target/ethernetif.c ****   MACAddr[2] = 0xE1;
 206:LWIP/Target/ethernetif.c ****   MACAddr[3] = 0x00;
 207:LWIP/Target/ethernetif.c ****   MACAddr[4] = 0x00;
 208:LWIP/Target/ethernetif.c ****   MACAddr[5] = 0x00;
 209:LWIP/Target/ethernetif.c ****   heth.Init.MACAddr = &MACAddr[0];
 210:LWIP/Target/ethernetif.c ****   heth.Init.RxMode = ETH_RXPOLLING_MODE;
 211:LWIP/Target/ethernetif.c ****   heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 212:LWIP/Target/ethernetif.c ****   heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 213:LWIP/Target/ethernetif.c **** 
 214:LWIP/Target/ethernetif.c ****   /* USER CODE BEGIN MACADDRESS */
 215:LWIP/Target/ethernetif.c **** 
 216:LWIP/Target/ethernetif.c ****   /* USER CODE END MACADDRESS */
 217:LWIP/Target/ethernetif.c **** 
 218:LWIP/Target/ethernetif.c ****   hal_eth_init_status = HAL_ETH_Init(&heth);
 219:LWIP/Target/ethernetif.c **** 
 220:LWIP/Target/ethernetif.c ****   if (hal_eth_init_status == HAL_OK)
 221:LWIP/Target/ethernetif.c ****   {
 222:LWIP/Target/ethernetif.c ****     /* Set netif link flag */
 223:LWIP/Target/ethernetif.c ****     netif->flags |= NETIF_FLAG_LINK_UP;
 224:LWIP/Target/ethernetif.c ****   }
 225:LWIP/Target/ethernetif.c ****   /* Initialize Tx Descriptors list: Chain Mode */
 226:LWIP/Target/ethernetif.c ****   HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 227:LWIP/Target/ethernetif.c **** 
 228:LWIP/Target/ethernetif.c ****   /* Initialize Rx Descriptors list: Chain Mode  */
 229:LWIP/Target/ethernetif.c ****   HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 230:LWIP/Target/ethernetif.c **** 
 231:LWIP/Target/ethernetif.c **** #if LWIP_ARP || LWIP_ETHERNET
 232:LWIP/Target/ethernetif.c **** 
 233:LWIP/Target/ethernetif.c ****   /* set MAC hardware address length */
 234:LWIP/Target/ethernetif.c ****   netif->hwaddr_len = ETH_HWADDR_LEN;
 235:LWIP/Target/ethernetif.c **** 
 236:LWIP/Target/ethernetif.c ****   /* set MAC hardware address */
 237:LWIP/Target/ethernetif.c ****   netif->hwaddr[0] =  heth.Init.MACAddr[0];
 238:LWIP/Target/ethernetif.c ****   netif->hwaddr[1] =  heth.Init.MACAddr[1];
 239:LWIP/Target/ethernetif.c ****   netif->hwaddr[2] =  heth.Init.MACAddr[2];
 240:LWIP/Target/ethernetif.c ****   netif->hwaddr[3] =  heth.Init.MACAddr[3];
 241:LWIP/Target/ethernetif.c ****   netif->hwaddr[4] =  heth.Init.MACAddr[4];
 242:LWIP/Target/ethernetif.c ****   netif->hwaddr[5] =  heth.Init.MACAddr[5];
 243:LWIP/Target/ethernetif.c **** 
 244:LWIP/Target/ethernetif.c ****   /* maximum transfer unit */
 245:LWIP/Target/ethernetif.c ****   netif->mtu = 1500;
 246:LWIP/Target/ethernetif.c **** 
 247:LWIP/Target/ethernetif.c ****   /* Accept broadcast address and ARP traffic */
 248:LWIP/Target/ethernetif.c ****   /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
 249:LWIP/Target/ethernetif.c ****   #if LWIP_ARP
 250:LWIP/Target/ethernetif.c ****     netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 251:LWIP/Target/ethernetif.c ****   #else
 252:LWIP/Target/ethernetif.c ****     netif->flags |= NETIF_FLAG_BROADCAST;
 253:LWIP/Target/ethernetif.c ****   #endif /* LWIP_ARP */
 254:LWIP/Target/ethernetif.c **** 
 255:LWIP/Target/ethernetif.c ****   /* Enable MAC and DMA transmission and reception */
 256:LWIP/Target/ethernetif.c ****   HAL_ETH_Start(&heth);
 257:LWIP/Target/ethernetif.c **** 
 258:LWIP/Target/ethernetif.c **** /* USER CODE BEGIN PHY_PRE_CONFIG */
 259:LWIP/Target/ethernetif.c **** 
 260:LWIP/Target/ethernetif.c **** /* USER CODE END PHY_PRE_CONFIG */
 261:LWIP/Target/ethernetif.c **** 
ARM GAS  /tmp/ccGnuz6d.s 			page 6


 262:LWIP/Target/ethernetif.c ****   /* Read Register Configuration */
 263:LWIP/Target/ethernetif.c ****   HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 264:LWIP/Target/ethernetif.c ****   regvalue |= (PHY_ISFR_INT4);
 265:LWIP/Target/ethernetif.c **** 
 266:LWIP/Target/ethernetif.c ****   /* Enable Interrupt on change of link status */
 267:LWIP/Target/ethernetif.c ****   HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 268:LWIP/Target/ethernetif.c **** 
 269:LWIP/Target/ethernetif.c ****   /* Read Register Configuration */
 270:LWIP/Target/ethernetif.c ****   HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 271:LWIP/Target/ethernetif.c **** 
 272:LWIP/Target/ethernetif.c **** /* USER CODE BEGIN PHY_POST_CONFIG */
 273:LWIP/Target/ethernetif.c **** 
 274:LWIP/Target/ethernetif.c **** /* USER CODE END PHY_POST_CONFIG */
 275:LWIP/Target/ethernetif.c **** 
 276:LWIP/Target/ethernetif.c **** #endif /* LWIP_ARP || LWIP_ETHERNET */
 277:LWIP/Target/ethernetif.c **** 
 278:LWIP/Target/ethernetif.c **** /* USER CODE BEGIN LOW_LEVEL_INIT */
 279:LWIP/Target/ethernetif.c **** 
 280:LWIP/Target/ethernetif.c **** /* USER CODE END LOW_LEVEL_INIT */
 281:LWIP/Target/ethernetif.c **** }
 282:LWIP/Target/ethernetif.c **** 
 283:LWIP/Target/ethernetif.c **** /**
 284:LWIP/Target/ethernetif.c ****  * This function should do the actual transmission of the packet. The packet is
 285:LWIP/Target/ethernetif.c ****  * contained in the pbuf that is passed to the function. This pbuf
 286:LWIP/Target/ethernetif.c ****  * might be chained.
 287:LWIP/Target/ethernetif.c ****  *
 288:LWIP/Target/ethernetif.c ****  * @param netif the lwip network interface structure for this ethernetif
 289:LWIP/Target/ethernetif.c ****  * @param p the MAC packet to send (e.g. IP packet including MAC addresses and type)
 290:LWIP/Target/ethernetif.c ****  * @return ERR_OK if the packet could be sent
 291:LWIP/Target/ethernetif.c ****  *         an err_t value if the packet couldn't be sent
 292:LWIP/Target/ethernetif.c ****  *
 293:LWIP/Target/ethernetif.c ****  * @note Returning ERR_MEM here if a DMA queue of your MAC is full can lead to
 294:LWIP/Target/ethernetif.c ****  *       strange results. You might consider waiting for space in the DMA queue
 295:LWIP/Target/ethernetif.c ****  *       to become available since the stack doesn't retry to send a packet
 296:LWIP/Target/ethernetif.c ****  *       dropped because of memory failure (except for the TCP timers).
 297:LWIP/Target/ethernetif.c ****  */
 298:LWIP/Target/ethernetif.c **** 
 299:LWIP/Target/ethernetif.c **** static err_t low_level_output(struct netif *netif, struct pbuf *p)
 300:LWIP/Target/ethernetif.c **** {
 301:LWIP/Target/ethernetif.c ****   err_t errval;
 302:LWIP/Target/ethernetif.c ****   struct pbuf *q;
 303:LWIP/Target/ethernetif.c ****   uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 304:LWIP/Target/ethernetif.c ****   __IO ETH_DMADescTypeDef *DmaTxDesc;
 305:LWIP/Target/ethernetif.c ****   uint32_t framelength = 0;
 306:LWIP/Target/ethernetif.c ****   uint32_t bufferoffset = 0;
 307:LWIP/Target/ethernetif.c ****   uint32_t byteslefttocopy = 0;
 308:LWIP/Target/ethernetif.c ****   uint32_t payloadoffset = 0;
 309:LWIP/Target/ethernetif.c ****   DmaTxDesc = heth.TxDesc;
 310:LWIP/Target/ethernetif.c ****   bufferoffset = 0;
 311:LWIP/Target/ethernetif.c **** 
 312:LWIP/Target/ethernetif.c ****   /* copy frame from pbufs to driver buffers */
 313:LWIP/Target/ethernetif.c ****   for(q = p; q != NULL; q = q->next)
 314:LWIP/Target/ethernetif.c ****     {
 315:LWIP/Target/ethernetif.c ****       /* Is this buffer available? If not, goto error */
 316:LWIP/Target/ethernetif.c ****       if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 317:LWIP/Target/ethernetif.c ****       {
 318:LWIP/Target/ethernetif.c ****         errval = ERR_USE;
ARM GAS  /tmp/ccGnuz6d.s 			page 7


 319:LWIP/Target/ethernetif.c ****         goto error;
 320:LWIP/Target/ethernetif.c ****       }
 321:LWIP/Target/ethernetif.c **** 
 322:LWIP/Target/ethernetif.c ****       /* Get bytes in current lwIP buffer */
 323:LWIP/Target/ethernetif.c ****       byteslefttocopy = q->len;
 324:LWIP/Target/ethernetif.c ****       payloadoffset = 0;
 325:LWIP/Target/ethernetif.c **** 
 326:LWIP/Target/ethernetif.c ****       /* Check if the length of data to copy is bigger than Tx buffer size*/
 327:LWIP/Target/ethernetif.c ****       while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 328:LWIP/Target/ethernetif.c ****       {
 329:LWIP/Target/ethernetif.c ****         /* Copy data to Tx buffer*/
 330:LWIP/Target/ethernetif.c ****         memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payl
 331:LWIP/Target/ethernetif.c **** 
 332:LWIP/Target/ethernetif.c ****         /* Point to next descriptor */
 333:LWIP/Target/ethernetif.c ****         DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 334:LWIP/Target/ethernetif.c **** 
 335:LWIP/Target/ethernetif.c ****         /* Check if the buffer is available */
 336:LWIP/Target/ethernetif.c ****         if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 337:LWIP/Target/ethernetif.c ****         {
 338:LWIP/Target/ethernetif.c ****           errval = ERR_USE;
 339:LWIP/Target/ethernetif.c ****           goto error;
 340:LWIP/Target/ethernetif.c ****         }
 341:LWIP/Target/ethernetif.c **** 
 342:LWIP/Target/ethernetif.c ****         buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 343:LWIP/Target/ethernetif.c **** 
 344:LWIP/Target/ethernetif.c ****         byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 345:LWIP/Target/ethernetif.c ****         payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 346:LWIP/Target/ethernetif.c ****         framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 347:LWIP/Target/ethernetif.c ****         bufferoffset = 0;
 348:LWIP/Target/ethernetif.c ****       }
 349:LWIP/Target/ethernetif.c **** 
 350:LWIP/Target/ethernetif.c ****       /* Copy the remaining bytes */
 351:LWIP/Target/ethernetif.c ****       memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloa
 352:LWIP/Target/ethernetif.c ****       bufferoffset = bufferoffset + byteslefttocopy;
 353:LWIP/Target/ethernetif.c ****       framelength = framelength + byteslefttocopy;
 354:LWIP/Target/ethernetif.c ****     }
 355:LWIP/Target/ethernetif.c **** 
 356:LWIP/Target/ethernetif.c ****   /* Prepare transmit descriptors to give to DMA */
 357:LWIP/Target/ethernetif.c ****   HAL_ETH_TransmitFrame(&heth, framelength);
 358:LWIP/Target/ethernetif.c **** 
 359:LWIP/Target/ethernetif.c ****   errval = ERR_OK;
 360:LWIP/Target/ethernetif.c **** 
 361:LWIP/Target/ethernetif.c **** error:
 362:LWIP/Target/ethernetif.c **** 
 363:LWIP/Target/ethernetif.c ****   /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume trans
 364:LWIP/Target/ethernetif.c ****   if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 365:LWIP/Target/ethernetif.c ****   {
 366:LWIP/Target/ethernetif.c ****     /* Clear TUS ETHERNET DMA flag */
 367:LWIP/Target/ethernetif.c ****     heth.Instance->DMASR = ETH_DMASR_TUS;
 368:LWIP/Target/ethernetif.c **** 
 369:LWIP/Target/ethernetif.c ****     /* Resume DMA transmission*/
 370:LWIP/Target/ethernetif.c ****     heth.Instance->DMATPDR = 0;
 371:LWIP/Target/ethernetif.c ****   }
 372:LWIP/Target/ethernetif.c ****   return errval;
 373:LWIP/Target/ethernetif.c **** }
 374:LWIP/Target/ethernetif.c **** 
 375:LWIP/Target/ethernetif.c **** /**
ARM GAS  /tmp/ccGnuz6d.s 			page 8


 376:LWIP/Target/ethernetif.c ****  * Should allocate a pbuf and transfer the bytes of the incoming
 377:LWIP/Target/ethernetif.c ****  * packet from the interface into the pbuf.
 378:LWIP/Target/ethernetif.c ****  *
 379:LWIP/Target/ethernetif.c ****  * @param netif the lwip network interface structure for this ethernetif
 380:LWIP/Target/ethernetif.c ****  * @return a pbuf filled with the received packet (including MAC header)
 381:LWIP/Target/ethernetif.c ****  *         NULL on memory error
 382:LWIP/Target/ethernetif.c ****    */
 383:LWIP/Target/ethernetif.c **** static struct pbuf * low_level_input(struct netif *netif)
 384:LWIP/Target/ethernetif.c **** {
  26              		.loc 1 384 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 32
  34              		.cfi_offset 4, -32
  35              		.cfi_offset 5, -28
  36              		.cfi_offset 6, -24
  37              		.cfi_offset 7, -20
  38              		.cfi_offset 8, -16
  39              		.cfi_offset 9, -12
  40              		.cfi_offset 10, -8
  41              		.cfi_offset 14, -4
  42              	.LVL1:
 385:LWIP/Target/ethernetif.c ****   struct pbuf *p = NULL;
 386:LWIP/Target/ethernetif.c ****   struct pbuf *q = NULL;
 387:LWIP/Target/ethernetif.c ****   uint16_t len = 0;
 388:LWIP/Target/ethernetif.c ****   uint8_t *buffer;
 389:LWIP/Target/ethernetif.c ****   __IO ETH_DMADescTypeDef *dmarxdesc;
 390:LWIP/Target/ethernetif.c ****   uint32_t bufferoffset = 0;
 391:LWIP/Target/ethernetif.c ****   uint32_t payloadoffset = 0;
 392:LWIP/Target/ethernetif.c ****   uint32_t byteslefttocopy = 0;
 393:LWIP/Target/ethernetif.c ****   uint32_t i=0;
 394:LWIP/Target/ethernetif.c **** 
 395:LWIP/Target/ethernetif.c ****   /* get received frame */
 396:LWIP/Target/ethernetif.c ****   if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
  43              		.loc 1 396 0
  44 0004 3448     		ldr	r0, .L15
  45              	.LVL2:
  46 0006 FFF7FEFF 		bl	HAL_ETH_GetReceivedFrame
  47              	.LVL3:
  48 000a 0028     		cmp	r0, #0
  49 000c 60D1     		bne	.L11
 397:LWIP/Target/ethernetif.c **** 
 398:LWIP/Target/ethernetif.c ****     return NULL;
 399:LWIP/Target/ethernetif.c **** 
 400:LWIP/Target/ethernetif.c ****   /* Obtain the size of the packet and put it into the "len" variable. */
 401:LWIP/Target/ethernetif.c ****   len = heth.RxFrameInfos.length;
  50              		.loc 1 401 0
  51 000e 324B     		ldr	r3, .L15
  52 0010 998F     		ldrh	r1, [r3, #60]
  53              	.LVL4:
 402:LWIP/Target/ethernetif.c ****   buffer = (uint8_t *)heth.RxFrameInfos.buffer;
  54              		.loc 1 402 0
  55 0012 D3F84080 		ldr	r8, [r3, #64]
ARM GAS  /tmp/ccGnuz6d.s 			page 9


  56              	.LVL5:
 403:LWIP/Target/ethernetif.c **** 
 404:LWIP/Target/ethernetif.c ****   if (len > 0)
  57              		.loc 1 404 0
  58 0016 49B9     		cbnz	r1, .L14
 385:LWIP/Target/ethernetif.c ****   struct pbuf *q = NULL;
  59              		.loc 1 385 0
  60 0018 4FF0000A 		mov	r10, #0
  61              	.LVL6:
  62              	.L3:
 405:LWIP/Target/ethernetif.c ****   {
 406:LWIP/Target/ethernetif.c ****     /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
 407:LWIP/Target/ethernetif.c ****     p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 408:LWIP/Target/ethernetif.c ****   }
 409:LWIP/Target/ethernetif.c **** 
 410:LWIP/Target/ethernetif.c ****   if (p != NULL)
  63              		.loc 1 410 0
  64 001c BAF1000F 		cmp	r10, #0
  65 0020 33D0     		beq	.L4
 411:LWIP/Target/ethernetif.c ****   {
 412:LWIP/Target/ethernetif.c ****     dmarxdesc = heth.RxFrameInfos.FSRxDesc;
  66              		.loc 1 412 0
  67 0022 2D4B     		ldr	r3, .L15
  68 0024 1F6B     		ldr	r7, [r3, #48]
  69              	.LVL7:
 413:LWIP/Target/ethernetif.c ****     bufferoffset = 0;
 414:LWIP/Target/ethernetif.c ****     for(q = p; q != NULL; q = q->next)
  70              		.loc 1 414 0
  71 0026 D146     		mov	r9, r10
 413:LWIP/Target/ethernetif.c ****     bufferoffset = 0;
  72              		.loc 1 413 0
  73 0028 0024     		movs	r4, #0
  74              		.loc 1 414 0
  75 002a 27E0     		b	.L5
  76              	.LVL8:
  77              	.L14:
 407:LWIP/Target/ethernetif.c ****   }
  78              		.loc 1 407 0
  79 002c 4FF4C172 		mov	r2, #386
  80 0030 FFF7FEFF 		bl	pbuf_alloc
  81              	.LVL9:
  82 0034 8246     		mov	r10, r0
  83              	.LVL10:
  84 0036 F1E7     		b	.L3
  85              	.LVL11:
  86              	.L7:
 415:LWIP/Target/ethernetif.c ****     {
 416:LWIP/Target/ethernetif.c ****       byteslefttocopy = q->len;
 417:LWIP/Target/ethernetif.c ****       payloadoffset = 0;
 418:LWIP/Target/ethernetif.c **** 
 419:LWIP/Target/ethernetif.c ****       /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
 420:LWIP/Target/ethernetif.c ****       while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 421:LWIP/Target/ethernetif.c ****       {
 422:LWIP/Target/ethernetif.c ****         /* Copy data to pbuf */
 423:LWIP/Target/ethernetif.c ****         memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + buf
  87              		.loc 1 423 0
  88 0038 D9F80400 		ldr	r0, [r9, #4]
ARM GAS  /tmp/ccGnuz6d.s 			page 10


  89 003c 40F2F452 		movw	r2, #1524
  90              	.LVL12:
  91 0040 121B     		subs	r2, r2, r4
  92 0042 08EB0401 		add	r1, r8, r4
  93 0046 3044     		add	r0, r0, r6
  94 0048 FFF7FEFF 		bl	memcpy
  95              	.LVL13:
 424:LWIP/Target/ethernetif.c **** 
 425:LWIP/Target/ethernetif.c ****         /* Point to next descriptor */
 426:LWIP/Target/ethernetif.c ****         dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
  96              		.loc 1 426 0
  97 004c FF68     		ldr	r7, [r7, #12]
  98              	.LVL14:
 427:LWIP/Target/ethernetif.c ****         buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
  99              		.loc 1 427 0
 100 004e D7F80880 		ldr	r8, [r7, #8]
 101              	.LVL15:
 428:LWIP/Target/ethernetif.c **** 
 429:LWIP/Target/ethernetif.c ****         byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 102              		.loc 1 429 0
 103 0052 A5F2F452 		subw	r2, r5, #1524
 104              	.LVL16:
 430:LWIP/Target/ethernetif.c ****         payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 105              		.loc 1 430 0
 106 0056 361B     		subs	r6, r6, r4
 107              	.LVL17:
 108 0058 06F2F456 		addw	r6, r6, #1524
 109              	.LVL18:
 431:LWIP/Target/ethernetif.c ****         bufferoffset = 0;
 110              		.loc 1 431 0
 111 005c 0024     		movs	r4, #0
 112              	.LVL19:
 113              	.L6:
 420:LWIP/Target/ethernetif.c ****       {
 114              		.loc 1 420 0
 115 005e A518     		adds	r5, r4, r2
 116 0060 40F2F453 		movw	r3, #1524
 117 0064 9D42     		cmp	r5, r3
 118 0066 E7D8     		bhi	.L7
 432:LWIP/Target/ethernetif.c ****       }
 433:LWIP/Target/ethernetif.c ****       /* Copy remaining data in pbuf */
 434:LWIP/Target/ethernetif.c ****       memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + buffe
 119              		.loc 1 434 0 discriminator 2
 120 0068 D9F80400 		ldr	r0, [r9, #4]
 121 006c 08EB0401 		add	r1, r8, r4
 122 0070 3044     		add	r0, r0, r6
 123 0072 FFF7FEFF 		bl	memcpy
 124              	.LVL20:
 414:LWIP/Target/ethernetif.c ****     {
 125              		.loc 1 414 0 discriminator 2
 126 0076 D9F80090 		ldr	r9, [r9]
 127              	.LVL21:
 435:LWIP/Target/ethernetif.c ****       bufferoffset = bufferoffset + byteslefttocopy;
 128              		.loc 1 435 0 discriminator 2
 129 007a 2C46     		mov	r4, r5
 130              	.LVL22:
 131              	.L5:
ARM GAS  /tmp/ccGnuz6d.s 			page 11


 414:LWIP/Target/ethernetif.c ****     {
 132              		.loc 1 414 0 discriminator 1
 133 007c B9F1000F 		cmp	r9, #0
 134 0080 03D0     		beq	.L4
 416:LWIP/Target/ethernetif.c ****       payloadoffset = 0;
 135              		.loc 1 416 0
 136 0082 B9F80A20 		ldrh	r2, [r9, #10]
 137              	.LVL23:
 417:LWIP/Target/ethernetif.c **** 
 138              		.loc 1 417 0
 139 0086 0026     		movs	r6, #0
 420:LWIP/Target/ethernetif.c ****       {
 140              		.loc 1 420 0
 141 0088 E9E7     		b	.L6
 142              	.LVL24:
 143              	.L4:
 436:LWIP/Target/ethernetif.c ****     }
 437:LWIP/Target/ethernetif.c ****   }
 438:LWIP/Target/ethernetif.c **** 
 439:LWIP/Target/ethernetif.c ****     /* Release descriptors to DMA */
 440:LWIP/Target/ethernetif.c ****     /* Point to first descriptor */
 441:LWIP/Target/ethernetif.c ****     dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 144              		.loc 1 441 0
 145 008a 134B     		ldr	r3, .L15
 146 008c 1B6B     		ldr	r3, [r3, #48]
 147              	.LVL25:
 442:LWIP/Target/ethernetif.c ****     /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
 443:LWIP/Target/ethernetif.c ****     for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 148              		.loc 1 443 0
 149 008e 0021     		movs	r1, #0
 150 0090 05E0     		b	.L9
 151              	.LVL26:
 152              	.L10:
 444:LWIP/Target/ethernetif.c ****     {
 445:LWIP/Target/ethernetif.c ****       dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 153              		.loc 1 445 0 discriminator 3
 154 0092 1A68     		ldr	r2, [r3]
 155 0094 42F00042 		orr	r2, r2, #-2147483648
 156 0098 1A60     		str	r2, [r3]
 446:LWIP/Target/ethernetif.c ****       dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 157              		.loc 1 446 0 discriminator 3
 158 009a DB68     		ldr	r3, [r3, #12]
 159              	.LVL27:
 443:LWIP/Target/ethernetif.c ****     {
 160              		.loc 1 443 0 discriminator 3
 161 009c 0131     		adds	r1, r1, #1
 162              	.LVL28:
 163              	.L9:
 443:LWIP/Target/ethernetif.c ****     {
 164              		.loc 1 443 0 is_stmt 0 discriminator 1
 165 009e 0E4A     		ldr	r2, .L15
 166 00a0 926B     		ldr	r2, [r2, #56]
 167 00a2 9142     		cmp	r1, r2
 168 00a4 F5D3     		bcc	.L10
 447:LWIP/Target/ethernetif.c ****     }
 448:LWIP/Target/ethernetif.c **** 
 449:LWIP/Target/ethernetif.c ****     /* Clear Segment_Count */
ARM GAS  /tmp/ccGnuz6d.s 			page 12


 450:LWIP/Target/ethernetif.c ****     heth.RxFrameInfos.SegCount =0;
 169              		.loc 1 450 0 is_stmt 1
 170 00a6 0C4B     		ldr	r3, .L15
 171              	.LVL29:
 172 00a8 0022     		movs	r2, #0
 173 00aa 9A63     		str	r2, [r3, #56]
 451:LWIP/Target/ethernetif.c **** 
 452:LWIP/Target/ethernetif.c ****   /* When Rx Buffer unavailable flag is set: clear it and resume reception */
 453:LWIP/Target/ethernetif.c ****   if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 174              		.loc 1 453 0
 175 00ac 1B68     		ldr	r3, [r3]
 176 00ae 41F21402 		movw	r2, #4116
 177 00b2 9A58     		ldr	r2, [r3, r2]
 178 00b4 12F0800F 		tst	r2, #128
 179 00b8 07D0     		beq	.L1
 454:LWIP/Target/ethernetif.c ****   {
 455:LWIP/Target/ethernetif.c ****     /* Clear RBUS ETHERNET DMA flag */
 456:LWIP/Target/ethernetif.c ****     heth.Instance->DMASR = ETH_DMASR_RBUS;
 180              		.loc 1 456 0
 181 00ba 8021     		movs	r1, #128
 182              	.LVL30:
 183 00bc 41F21402 		movw	r2, #4116
 184 00c0 9950     		str	r1, [r3, r2]
 457:LWIP/Target/ethernetif.c ****     /* Resume DMA reception */
 458:LWIP/Target/ethernetif.c ****     heth.Instance->DMARPDR = 0;
 185              		.loc 1 458 0
 186 00c2 0021     		movs	r1, #0
 187 00c4 41F20802 		movw	r2, #4104
 188 00c8 9950     		str	r1, [r3, r2]
 189              	.LVL31:
 190              	.L1:
 459:LWIP/Target/ethernetif.c ****   }
 460:LWIP/Target/ethernetif.c ****   return p;
 461:LWIP/Target/ethernetif.c **** }
 191              		.loc 1 461 0
 192 00ca 5046     		mov	r0, r10
 193 00cc BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 194              	.LVL32:
 195              	.L11:
 398:LWIP/Target/ethernetif.c **** 
 196              		.loc 1 398 0
 197 00d0 4FF0000A 		mov	r10, #0
 198 00d4 F9E7     		b	.L1
 199              	.L16:
 200 00d6 00BF     		.align	2
 201              	.L15:
 202 00d8 00000000 		.word	heth
 203              		.cfi_endproc
 204              	.LFE162:
 206              		.section	.text.low_level_output,"ax",%progbits
 207              		.align	1
 208              		.syntax unified
 209              		.thumb
 210              		.thumb_func
 211              		.fpu fpv5-d16
 213              	low_level_output:
 214              	.LFB161:
ARM GAS  /tmp/ccGnuz6d.s 			page 13


 300:LWIP/Target/ethernetif.c ****   err_t errval;
 215              		.loc 1 300 0
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 0
 218              		@ frame_needed = 0, uses_anonymous_args = 0
 219              	.LVL33:
 220 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 221              	.LCFI1:
 222              		.cfi_def_cfa_offset 40
 223              		.cfi_offset 3, -40
 224              		.cfi_offset 4, -36
 225              		.cfi_offset 5, -32
 226              		.cfi_offset 6, -28
 227              		.cfi_offset 7, -24
 228              		.cfi_offset 8, -20
 229              		.cfi_offset 9, -16
 230              		.cfi_offset 10, -12
 231              		.cfi_offset 11, -8
 232              		.cfi_offset 14, -4
 233 0004 8B46     		mov	fp, r1
 303:LWIP/Target/ethernetif.c ****   __IO ETH_DMADescTypeDef *DmaTxDesc;
 234              		.loc 1 303 0
 235 0006 2C4B     		ldr	r3, .L29
 236 0008 DE6A     		ldr	r6, [r3, #44]
 237 000a D6F808A0 		ldr	r10, [r6, #8]
 238              	.LVL34:
 310:LWIP/Target/ethernetif.c **** 
 239              		.loc 1 310 0
 240 000e 0024     		movs	r4, #0
 305:LWIP/Target/ethernetif.c ****   uint32_t bufferoffset = 0;
 241              		.loc 1 305 0
 242 0010 2746     		mov	r7, r4
 243              	.LVL35:
 244              	.L18:
 313:LWIP/Target/ethernetif.c ****     {
 245              		.loc 1 313 0 discriminator 1
 246 0012 BBF1000F 		cmp	fp, #0
 247 0016 32D0     		beq	.L27
 316:LWIP/Target/ethernetif.c ****       {
 248              		.loc 1 316 0
 249 0018 3368     		ldr	r3, [r6]
 250 001a 002B     		cmp	r3, #0
 251 001c 35DB     		blt	.L24
 323:LWIP/Target/ethernetif.c ****       payloadoffset = 0;
 252              		.loc 1 323 0
 253 001e BBF80A90 		ldrh	r9, [fp, #10]
 254              	.LVL36:
 324:LWIP/Target/ethernetif.c **** 
 255              		.loc 1 324 0
 256 0022 0025     		movs	r5, #0
 257              	.LVL37:
 258              	.L20:
 327:LWIP/Target/ethernetif.c ****       {
 259              		.loc 1 327 0
 260 0024 04EB0908 		add	r8, r4, r9
 261 0028 40F2F453 		movw	r3, #1524
 262 002c 9845     		cmp	r8, r3
ARM GAS  /tmp/ccGnuz6d.s 			page 14


 263 002e 19D9     		bls	.L28
 330:LWIP/Target/ethernetif.c **** 
 264              		.loc 1 330 0
 265 0030 DBF80410 		ldr	r1, [fp, #4]
 266 0034 40F2F452 		movw	r2, #1524
 267 0038 121B     		subs	r2, r2, r4
 268 003a 2944     		add	r1, r1, r5
 269 003c 0AEB0400 		add	r0, r10, r4
 270 0040 FFF7FEFF 		bl	memcpy
 271              	.LVL38:
 333:LWIP/Target/ethernetif.c **** 
 272              		.loc 1 333 0
 273 0044 F668     		ldr	r6, [r6, #12]
 274              	.LVL39:
 336:LWIP/Target/ethernetif.c ****         {
 275              		.loc 1 336 0
 276 0046 3368     		ldr	r3, [r6]
 277 0048 002B     		cmp	r3, #0
 278 004a 21DB     		blt	.L25
 342:LWIP/Target/ethernetif.c **** 
 279              		.loc 1 342 0
 280 004c D6F808A0 		ldr	r10, [r6, #8]
 281              	.LVL40:
 344:LWIP/Target/ethernetif.c ****         payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 282              		.loc 1 344 0
 283 0050 A8F2F459 		subw	r9, r8, #1524
 284              	.LVL41:
 345:LWIP/Target/ethernetif.c ****         framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 285              		.loc 1 345 0
 286 0054 2D1B     		subs	r5, r5, r4
 287              	.LVL42:
 288 0056 05F2F455 		addw	r5, r5, #1524
 289              	.LVL43:
 346:LWIP/Target/ethernetif.c ****         bufferoffset = 0;
 290              		.loc 1 346 0
 291 005a 3F1B     		subs	r7, r7, r4
 292              	.LVL44:
 293 005c 07F2F457 		addw	r7, r7, #1524
 294              	.LVL45:
 347:LWIP/Target/ethernetif.c ****       }
 295              		.loc 1 347 0
 296 0060 0024     		movs	r4, #0
 297 0062 DFE7     		b	.L20
 298              	.LVL46:
 299              	.L28:
 351:LWIP/Target/ethernetif.c ****       bufferoffset = bufferoffset + byteslefttocopy;
 300              		.loc 1 351 0 discriminator 2
 301 0064 DBF80410 		ldr	r1, [fp, #4]
 302 0068 4A46     		mov	r2, r9
 303 006a 2944     		add	r1, r1, r5
 304 006c 0AEB0400 		add	r0, r10, r4
 305 0070 FFF7FEFF 		bl	memcpy
 306              	.LVL47:
 353:LWIP/Target/ethernetif.c ****     }
 307              		.loc 1 353 0 discriminator 2
 308 0074 4F44     		add	r7, r7, r9
 309              	.LVL48:
ARM GAS  /tmp/ccGnuz6d.s 			page 15


 313:LWIP/Target/ethernetif.c ****     {
 310              		.loc 1 313 0 discriminator 2
 311 0076 DBF800B0 		ldr	fp, [fp]
 312              	.LVL49:
 352:LWIP/Target/ethernetif.c ****       framelength = framelength + byteslefttocopy;
 313              		.loc 1 352 0 discriminator 2
 314 007a 4446     		mov	r4, r8
 315 007c C9E7     		b	.L18
 316              	.LVL50:
 317              	.L27:
 357:LWIP/Target/ethernetif.c **** 
 318              		.loc 1 357 0
 319 007e 3946     		mov	r1, r7
 320 0080 0D48     		ldr	r0, .L29
 321 0082 FFF7FEFF 		bl	HAL_ETH_TransmitFrame
 322              	.LVL51:
 359:LWIP/Target/ethernetif.c **** 
 323              		.loc 1 359 0
 324 0086 0020     		movs	r0, #0
 325 0088 04E0     		b	.L19
 326              	.LVL52:
 327              	.L24:
 318:LWIP/Target/ethernetif.c ****         goto error;
 328              		.loc 1 318 0
 329 008a 6FF00700 		mvn	r0, #7
 330 008e 01E0     		b	.L19
 331              	.LVL53:
 332              	.L25:
 338:LWIP/Target/ethernetif.c ****           goto error;
 333              		.loc 1 338 0
 334 0090 6FF00700 		mvn	r0, #7
 335              	.LVL54:
 336              	.L19:
 364:LWIP/Target/ethernetif.c ****   {
 337              		.loc 1 364 0
 338 0094 084B     		ldr	r3, .L29
 339 0096 1B68     		ldr	r3, [r3]
 340 0098 41F21402 		movw	r2, #4116
 341 009c 9A58     		ldr	r2, [r3, r2]
 342 009e 12F0200F 		tst	r2, #32
 343 00a2 07D0     		beq	.L23
 367:LWIP/Target/ethernetif.c **** 
 344              		.loc 1 367 0
 345 00a4 2021     		movs	r1, #32
 346 00a6 41F21402 		movw	r2, #4116
 347 00aa 9950     		str	r1, [r3, r2]
 370:LWIP/Target/ethernetif.c ****   }
 348              		.loc 1 370 0
 349 00ac 0021     		movs	r1, #0
 350 00ae 41F20402 		movw	r2, #4100
 351 00b2 9950     		str	r1, [r3, r2]
 352              	.L23:
 373:LWIP/Target/ethernetif.c **** 
 353              		.loc 1 373 0
 354 00b4 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 355              	.LVL55:
 356              	.L30:
ARM GAS  /tmp/ccGnuz6d.s 			page 16


 357              		.align	2
 358              	.L29:
 359 00b8 00000000 		.word	heth
 360              		.cfi_endproc
 361              	.LFE161:
 363              		.section	.text.low_level_init,"ax",%progbits
 364              		.align	1
 365              		.syntax unified
 366              		.thumb
 367              		.thumb_func
 368              		.fpu fpv5-d16
 370              	low_level_init:
 371              	.LFB160:
 191:LWIP/Target/ethernetif.c ****   uint32_t regvalue = 0;
 372              		.loc 1 191 0
 373              		.cfi_startproc
 374              		@ args = 0, pretend = 0, frame = 16
 375              		@ frame_needed = 0, uses_anonymous_args = 0
 376              	.LVL56:
 377 0000 30B5     		push	{r4, r5, lr}
 378              	.LCFI2:
 379              		.cfi_def_cfa_offset 12
 380              		.cfi_offset 4, -12
 381              		.cfi_offset 5, -8
 382              		.cfi_offset 14, -4
 383 0002 85B0     		sub	sp, sp, #20
 384              	.LCFI3:
 385              		.cfi_def_cfa_offset 32
 386 0004 0446     		mov	r4, r0
 192:LWIP/Target/ethernetif.c ****   HAL_StatusTypeDef hal_eth_init_status;
 387              		.loc 1 192 0
 388 0006 0023     		movs	r3, #0
 389 0008 0393     		str	r3, [sp, #12]
 198:LWIP/Target/ethernetif.c ****   heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 390              		.loc 1 198 0
 391 000a 3648     		ldr	r0, .L34
 392              	.LVL57:
 393 000c 364A     		ldr	r2, .L34+4
 394 000e 0260     		str	r2, [r0]
 199:LWIP/Target/ethernetif.c ****   heth.Init.Speed = ETH_SPEED_100M;
 395              		.loc 1 199 0
 396 0010 0122     		movs	r2, #1
 397 0012 4260     		str	r2, [r0, #4]
 200:LWIP/Target/ethernetif.c ****   heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 398              		.loc 1 200 0
 399 0014 4FF48042 		mov	r2, #16384
 400 0018 8260     		str	r2, [r0, #8]
 201:LWIP/Target/ethernetif.c ****   heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 401              		.loc 1 201 0
 402 001a 4FF40062 		mov	r2, #2048
 403 001e C260     		str	r2, [r0, #12]
 202:LWIP/Target/ethernetif.c ****   MACAddr[0] = 0x00;
 404              		.loc 1 202 0
 405 0020 0382     		strh	r3, [r0, #16]	@ movhi
 203:LWIP/Target/ethernetif.c ****   MACAddr[1] = 0x80;
 406              		.loc 1 203 0
 407 0022 8DF80430 		strb	r3, [sp, #4]
ARM GAS  /tmp/ccGnuz6d.s 			page 17


 204:LWIP/Target/ethernetif.c ****   MACAddr[2] = 0xE1;
 408              		.loc 1 204 0
 409 0026 8022     		movs	r2, #128
 410 0028 8DF80520 		strb	r2, [sp, #5]
 205:LWIP/Target/ethernetif.c ****   MACAddr[3] = 0x00;
 411              		.loc 1 205 0
 412 002c E122     		movs	r2, #225
 413 002e 8DF80620 		strb	r2, [sp, #6]
 206:LWIP/Target/ethernetif.c ****   MACAddr[4] = 0x00;
 414              		.loc 1 206 0
 415 0032 8DF80730 		strb	r3, [sp, #7]
 207:LWIP/Target/ethernetif.c ****   MACAddr[5] = 0x00;
 416              		.loc 1 207 0
 417 0036 8DF80830 		strb	r3, [sp, #8]
 208:LWIP/Target/ethernetif.c ****   heth.Init.MACAddr = &MACAddr[0];
 418              		.loc 1 208 0
 419 003a 8DF80930 		strb	r3, [sp, #9]
 209:LWIP/Target/ethernetif.c ****   heth.Init.RxMode = ETH_RXPOLLING_MODE;
 420              		.loc 1 209 0
 421 003e 01AA     		add	r2, sp, #4
 422 0040 4261     		str	r2, [r0, #20]
 210:LWIP/Target/ethernetif.c ****   heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 423              		.loc 1 210 0
 424 0042 8361     		str	r3, [r0, #24]
 211:LWIP/Target/ethernetif.c ****   heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 425              		.loc 1 211 0
 426 0044 C361     		str	r3, [r0, #28]
 212:LWIP/Target/ethernetif.c **** 
 427              		.loc 1 212 0
 428 0046 4FF40003 		mov	r3, #8388608
 429 004a 0362     		str	r3, [r0, #32]
 218:LWIP/Target/ethernetif.c **** 
 430              		.loc 1 218 0
 431 004c FFF7FEFF 		bl	HAL_ETH_Init
 432              	.LVL58:
 220:LWIP/Target/ethernetif.c ****   {
 433              		.loc 1 220 0
 434 0050 28B9     		cbnz	r0, .L32
 223:LWIP/Target/ethernetif.c ****   }
 435              		.loc 1 223 0
 436 0052 94F83130 		ldrb	r3, [r4, #49]	@ zero_extendqisi2
 437 0056 43F00403 		orr	r3, r3, #4
 438 005a 84F83130 		strb	r3, [r4, #49]
 439              	.L32:
 226:LWIP/Target/ethernetif.c **** 
 440              		.loc 1 226 0
 441 005e 214D     		ldr	r5, .L34
 442 0060 0423     		movs	r3, #4
 443 0062 224A     		ldr	r2, .L34+8
 444 0064 2249     		ldr	r1, .L34+12
 445 0066 2846     		mov	r0, r5
 446              	.LVL59:
 447 0068 FFF7FEFF 		bl	HAL_ETH_DMATxDescListInit
 448              	.LVL60:
 229:LWIP/Target/ethernetif.c **** 
 449              		.loc 1 229 0
 450 006c 0423     		movs	r3, #4
ARM GAS  /tmp/ccGnuz6d.s 			page 18


 451 006e 214A     		ldr	r2, .L34+16
 452 0070 2149     		ldr	r1, .L34+20
 453 0072 2846     		mov	r0, r5
 454 0074 FFF7FEFF 		bl	HAL_ETH_DMARxDescListInit
 455              	.LVL61:
 234:LWIP/Target/ethernetif.c **** 
 456              		.loc 1 234 0
 457 0078 0623     		movs	r3, #6
 458 007a 84F83030 		strb	r3, [r4, #48]
 237:LWIP/Target/ethernetif.c ****   netif->hwaddr[1] =  heth.Init.MACAddr[1];
 459              		.loc 1 237 0
 460 007e 6B69     		ldr	r3, [r5, #20]
 461 0080 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 462 0082 84F82A20 		strb	r2, [r4, #42]
 238:LWIP/Target/ethernetif.c ****   netif->hwaddr[2] =  heth.Init.MACAddr[2];
 463              		.loc 1 238 0
 464 0086 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 465 0088 84F82B20 		strb	r2, [r4, #43]
 239:LWIP/Target/ethernetif.c ****   netif->hwaddr[3] =  heth.Init.MACAddr[3];
 466              		.loc 1 239 0
 467 008c 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 468 008e 84F82C20 		strb	r2, [r4, #44]
 240:LWIP/Target/ethernetif.c ****   netif->hwaddr[4] =  heth.Init.MACAddr[4];
 469              		.loc 1 240 0
 470 0092 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 471 0094 84F82D20 		strb	r2, [r4, #45]
 241:LWIP/Target/ethernetif.c ****   netif->hwaddr[5] =  heth.Init.MACAddr[5];
 472              		.loc 1 241 0
 473 0098 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 474 009a 84F82E20 		strb	r2, [r4, #46]
 242:LWIP/Target/ethernetif.c **** 
 475              		.loc 1 242 0
 476 009e 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 477 00a0 84F82F30 		strb	r3, [r4, #47]
 245:LWIP/Target/ethernetif.c **** 
 478              		.loc 1 245 0
 479 00a4 40F2DC53 		movw	r3, #1500
 480 00a8 2385     		strh	r3, [r4, #40]	@ movhi
 250:LWIP/Target/ethernetif.c ****   #else
 481              		.loc 1 250 0
 482 00aa 94F83130 		ldrb	r3, [r4, #49]	@ zero_extendqisi2
 483 00ae 43F00A03 		orr	r3, r3, #10
 484 00b2 84F83130 		strb	r3, [r4, #49]
 256:LWIP/Target/ethernetif.c **** 
 485              		.loc 1 256 0
 486 00b6 2846     		mov	r0, r5
 487 00b8 FFF7FEFF 		bl	HAL_ETH_Start
 488              	.LVL62:
 263:LWIP/Target/ethernetif.c ****   regvalue |= (PHY_ISFR_INT4);
 489              		.loc 1 263 0
 490 00bc 03AA     		add	r2, sp, #12
 491 00be 1D21     		movs	r1, #29
 492 00c0 2846     		mov	r0, r5
 493 00c2 FFF7FEFF 		bl	HAL_ETH_ReadPHYRegister
 494              	.LVL63:
 264:LWIP/Target/ethernetif.c **** 
 495              		.loc 1 264 0
ARM GAS  /tmp/ccGnuz6d.s 			page 19


 496 00c6 039A     		ldr	r2, [sp, #12]
 497 00c8 42F00B02 		orr	r2, r2, #11
 498 00cc 0392     		str	r2, [sp, #12]
 267:LWIP/Target/ethernetif.c **** 
 499              		.loc 1 267 0
 500 00ce 1D21     		movs	r1, #29
 501 00d0 2846     		mov	r0, r5
 502 00d2 FFF7FEFF 		bl	HAL_ETH_WritePHYRegister
 503              	.LVL64:
 270:LWIP/Target/ethernetif.c **** 
 504              		.loc 1 270 0
 505 00d6 03AA     		add	r2, sp, #12
 506 00d8 1D21     		movs	r1, #29
 507 00da 2846     		mov	r0, r5
 508 00dc FFF7FEFF 		bl	HAL_ETH_ReadPHYRegister
 509              	.LVL65:
 281:LWIP/Target/ethernetif.c **** 
 510              		.loc 1 281 0
 511 00e0 05B0     		add	sp, sp, #20
 512              	.LCFI4:
 513              		.cfi_def_cfa_offset 12
 514              		@ sp needed
 515 00e2 30BD     		pop	{r4, r5, pc}
 516              	.LVL66:
 517              	.L35:
 518              		.align	2
 519              	.L34:
 520 00e4 00000000 		.word	heth
 521 00e8 00800240 		.word	1073905664
 522 00ec 00000000 		.word	Tx_Buff
 523 00f0 00000000 		.word	DMATxDscrTab
 524 00f4 00000000 		.word	Rx_Buff
 525 00f8 00000000 		.word	DMARxDscrTab
 526              		.cfi_endproc
 527              	.LFE160:
 529              		.section	.text.HAL_ETH_MspInit,"ax",%progbits
 530              		.align	1
 531              		.global	HAL_ETH_MspInit
 532              		.syntax unified
 533              		.thumb
 534              		.thumb_func
 535              		.fpu fpv5-d16
 537              	HAL_ETH_MspInit:
 538              	.LFB158:
  82:LWIP/Target/ethernetif.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 539              		.loc 1 82 0
 540              		.cfi_startproc
 541              		@ args = 0, pretend = 0, frame = 48
 542              		@ frame_needed = 0, uses_anonymous_args = 0
 543              	.LVL67:
 544 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 545              	.LCFI5:
 546              		.cfi_def_cfa_offset 20
 547              		.cfi_offset 4, -20
 548              		.cfi_offset 5, -16
 549              		.cfi_offset 6, -12
 550              		.cfi_offset 7, -8
ARM GAS  /tmp/ccGnuz6d.s 			page 20


 551              		.cfi_offset 14, -4
 552 0002 8DB0     		sub	sp, sp, #52
 553              	.LCFI6:
 554              		.cfi_def_cfa_offset 72
  83:LWIP/Target/ethernetif.c ****   if(ethHandle->Instance==ETH)
 555              		.loc 1 83 0
 556 0004 0023     		movs	r3, #0
 557 0006 0793     		str	r3, [sp, #28]
 558 0008 0893     		str	r3, [sp, #32]
 559 000a 0993     		str	r3, [sp, #36]
 560 000c 0A93     		str	r3, [sp, #40]
 561 000e 0B93     		str	r3, [sp, #44]
  84:LWIP/Target/ethernetif.c ****   {
 562              		.loc 1 84 0
 563 0010 0268     		ldr	r2, [r0]
 564 0012 3A4B     		ldr	r3, .L40
 565 0014 9A42     		cmp	r2, r3
 566 0016 01D0     		beq	.L39
 567              	.LVL68:
 568              	.L36:
 139:LWIP/Target/ethernetif.c **** 
 569              		.loc 1 139 0
 570 0018 0DB0     		add	sp, sp, #52
 571              	.LCFI7:
 572              		.cfi_remember_state
 573              		.cfi_def_cfa_offset 20
 574              		@ sp needed
 575 001a F0BD     		pop	{r4, r5, r6, r7, pc}
 576              	.LVL69:
 577              	.L39:
 578              	.LCFI8:
 579              		.cfi_restore_state
 580              	.LBB2:
  90:LWIP/Target/ethernetif.c **** 
 581              		.loc 1 90 0
 582 001c A3F59043 		sub	r3, r3, #18432
 583 0020 1A6B     		ldr	r2, [r3, #48]
 584 0022 42F00072 		orr	r2, r2, #33554432
 585 0026 1A63     		str	r2, [r3, #48]
 586 0028 1A6B     		ldr	r2, [r3, #48]
 587 002a 02F00072 		and	r2, r2, #33554432
 588 002e 0092     		str	r2, [sp]
 589 0030 009A     		ldr	r2, [sp]
 590              	.LBE2:
 591              	.LBB3:
 592 0032 1A6B     		ldr	r2, [r3, #48]
 593 0034 42F08062 		orr	r2, r2, #67108864
 594 0038 1A63     		str	r2, [r3, #48]
 595 003a 1A6B     		ldr	r2, [r3, #48]
 596 003c 02F08062 		and	r2, r2, #67108864
 597 0040 0192     		str	r2, [sp, #4]
 598 0042 019A     		ldr	r2, [sp, #4]
 599              	.LBE3:
 600              	.LBB4:
 601 0044 1A6B     		ldr	r2, [r3, #48]
 602 0046 42F00062 		orr	r2, r2, #134217728
 603 004a 1A63     		str	r2, [r3, #48]
ARM GAS  /tmp/ccGnuz6d.s 			page 21


 604 004c 1A6B     		ldr	r2, [r3, #48]
 605 004e 02F00062 		and	r2, r2, #134217728
 606 0052 0292     		str	r2, [sp, #8]
 607 0054 029A     		ldr	r2, [sp, #8]
 608              	.LBE4:
 609              	.LBB5:
  92:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOA_CLK_ENABLE();
 610              		.loc 1 92 0
 611 0056 1A6B     		ldr	r2, [r3, #48]
 612 0058 42F00402 		orr	r2, r2, #4
 613 005c 1A63     		str	r2, [r3, #48]
 614 005e 1A6B     		ldr	r2, [r3, #48]
 615 0060 02F00402 		and	r2, r2, #4
 616 0064 0392     		str	r2, [sp, #12]
 617 0066 039A     		ldr	r2, [sp, #12]
 618              	.LBE5:
 619              	.LBB6:
  93:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOB_CLK_ENABLE();
 620              		.loc 1 93 0
 621 0068 1A6B     		ldr	r2, [r3, #48]
 622 006a 42F00102 		orr	r2, r2, #1
 623 006e 1A63     		str	r2, [r3, #48]
 624 0070 1A6B     		ldr	r2, [r3, #48]
 625 0072 02F00102 		and	r2, r2, #1
 626 0076 0492     		str	r2, [sp, #16]
 627 0078 049A     		ldr	r2, [sp, #16]
 628              	.LBE6:
 629              	.LBB7:
  94:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOG_CLK_ENABLE();
 630              		.loc 1 94 0
 631 007a 1A6B     		ldr	r2, [r3, #48]
 632 007c 42F00202 		orr	r2, r2, #2
 633 0080 1A63     		str	r2, [r3, #48]
 634 0082 1A6B     		ldr	r2, [r3, #48]
 635 0084 02F00202 		and	r2, r2, #2
 636 0088 0592     		str	r2, [sp, #20]
 637 008a 059A     		ldr	r2, [sp, #20]
 638              	.LBE7:
 639              	.LBB8:
  95:LWIP/Target/ethernetif.c ****     /**ETH GPIO Configuration
 640              		.loc 1 95 0
 641 008c 1A6B     		ldr	r2, [r3, #48]
 642 008e 42F04002 		orr	r2, r2, #64
 643 0092 1A63     		str	r2, [r3, #48]
 644 0094 1B6B     		ldr	r3, [r3, #48]
 645 0096 03F04003 		and	r3, r3, #64
 646 009a 0693     		str	r3, [sp, #24]
 647 009c 069B     		ldr	r3, [sp, #24]
 648              	.LBE8:
 107:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 649              		.loc 1 107 0
 650 009e 3223     		movs	r3, #50
 651 00a0 0793     		str	r3, [sp, #28]
 108:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 652              		.loc 1 108 0
 653 00a2 0226     		movs	r6, #2
 654 00a4 0896     		str	r6, [sp, #32]
ARM GAS  /tmp/ccGnuz6d.s 			page 22


 110:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 655              		.loc 1 110 0
 656 00a6 0325     		movs	r5, #3
 657 00a8 0A95     		str	r5, [sp, #40]
 111:LWIP/Target/ethernetif.c ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 658              		.loc 1 111 0
 659 00aa 0B24     		movs	r4, #11
 660 00ac 0B94     		str	r4, [sp, #44]
 112:LWIP/Target/ethernetif.c **** 
 661              		.loc 1 112 0
 662 00ae 07A9     		add	r1, sp, #28
 663 00b0 1348     		ldr	r0, .L40+4
 664              	.LVL70:
 665 00b2 FFF7FEFF 		bl	HAL_GPIO_Init
 666              	.LVL71:
 114:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 667              		.loc 1 114 0
 668 00b6 8623     		movs	r3, #134
 669 00b8 0793     		str	r3, [sp, #28]
 115:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 670              		.loc 1 115 0
 671 00ba 0896     		str	r6, [sp, #32]
 116:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 672              		.loc 1 116 0
 673 00bc 0027     		movs	r7, #0
 674 00be 0997     		str	r7, [sp, #36]
 117:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 675              		.loc 1 117 0
 676 00c0 0A95     		str	r5, [sp, #40]
 118:LWIP/Target/ethernetif.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 677              		.loc 1 118 0
 678 00c2 0B94     		str	r4, [sp, #44]
 119:LWIP/Target/ethernetif.c **** 
 679              		.loc 1 119 0
 680 00c4 07A9     		add	r1, sp, #28
 681 00c6 0F48     		ldr	r0, .L40+8
 682 00c8 FFF7FEFF 		bl	HAL_GPIO_Init
 683              	.LVL72:
 121:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 684              		.loc 1 121 0
 685 00cc 4FF40053 		mov	r3, #8192
 686 00d0 0793     		str	r3, [sp, #28]
 122:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 687              		.loc 1 122 0
 688 00d2 0896     		str	r6, [sp, #32]
 123:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 689              		.loc 1 123 0
 690 00d4 0997     		str	r7, [sp, #36]
 124:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 691              		.loc 1 124 0
 692 00d6 0A95     		str	r5, [sp, #40]
 125:LWIP/Target/ethernetif.c ****     HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 693              		.loc 1 125 0
 694 00d8 0B94     		str	r4, [sp, #44]
 126:LWIP/Target/ethernetif.c **** 
 695              		.loc 1 126 0
 696 00da 07A9     		add	r1, sp, #28
ARM GAS  /tmp/ccGnuz6d.s 			page 23


 697 00dc 0A48     		ldr	r0, .L40+12
 698 00de FFF7FEFF 		bl	HAL_GPIO_Init
 699              	.LVL73:
 128:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 700              		.loc 1 128 0
 701 00e2 4FF42053 		mov	r3, #10240
 702 00e6 0793     		str	r3, [sp, #28]
 129:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 703              		.loc 1 129 0
 704 00e8 0896     		str	r6, [sp, #32]
 130:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 705              		.loc 1 130 0
 706 00ea 0997     		str	r7, [sp, #36]
 131:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 707              		.loc 1 131 0
 708 00ec 0A95     		str	r5, [sp, #40]
 132:LWIP/Target/ethernetif.c ****     HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 709              		.loc 1 132 0
 710 00ee 0B94     		str	r4, [sp, #44]
 133:LWIP/Target/ethernetif.c **** 
 711              		.loc 1 133 0
 712 00f0 07A9     		add	r1, sp, #28
 713 00f2 0648     		ldr	r0, .L40+16
 714 00f4 FFF7FEFF 		bl	HAL_GPIO_Init
 715              	.LVL74:
 139:LWIP/Target/ethernetif.c **** 
 716              		.loc 1 139 0
 717 00f8 8EE7     		b	.L36
 718              	.L41:
 719 00fa 00BF     		.align	2
 720              	.L40:
 721 00fc 00800240 		.word	1073905664
 722 0100 00080240 		.word	1073874944
 723 0104 00000240 		.word	1073872896
 724 0108 00040240 		.word	1073873920
 725 010c 00180240 		.word	1073879040
 726              		.cfi_endproc
 727              	.LFE158:
 729              		.section	.text.HAL_ETH_MspDeInit,"ax",%progbits
 730              		.align	1
 731              		.global	HAL_ETH_MspDeInit
 732              		.syntax unified
 733              		.thumb
 734              		.thumb_func
 735              		.fpu fpv5-d16
 737              	HAL_ETH_MspDeInit:
 738              	.LFB159:
 142:LWIP/Target/ethernetif.c ****   if(ethHandle->Instance==ETH)
 739              		.loc 1 142 0
 740              		.cfi_startproc
 741              		@ args = 0, pretend = 0, frame = 0
 742              		@ frame_needed = 0, uses_anonymous_args = 0
 743              	.LVL75:
 744 0000 08B5     		push	{r3, lr}
 745              	.LCFI9:
 746              		.cfi_def_cfa_offset 8
 747              		.cfi_offset 3, -8
ARM GAS  /tmp/ccGnuz6d.s 			page 24


 748              		.cfi_offset 14, -4
 143:LWIP/Target/ethernetif.c ****   {
 749              		.loc 1 143 0
 750 0002 0268     		ldr	r2, [r0]
 751 0004 124B     		ldr	r3, .L46
 752 0006 9A42     		cmp	r2, r3
 753 0008 00D0     		beq	.L45
 754              	.LVL76:
 755              	.L42:
 756 000a 08BD     		pop	{r3, pc}
 757              	.LVL77:
 758              	.L45:
 149:LWIP/Target/ethernetif.c **** 
 759              		.loc 1 149 0
 760 000c A3F59043 		sub	r3, r3, #18432
 761 0010 1A6B     		ldr	r2, [r3, #48]
 762 0012 22F08062 		bic	r2, r2, #67108864
 763 0016 1A63     		str	r2, [r3, #48]
 764 0018 1A6B     		ldr	r2, [r3, #48]
 765 001a 22F00062 		bic	r2, r2, #134217728
 766 001e 1A63     		str	r2, [r3, #48]
 767 0020 1A6B     		ldr	r2, [r3, #48]
 768 0022 22F00072 		bic	r2, r2, #33554432
 769 0026 1A63     		str	r2, [r3, #48]
 162:LWIP/Target/ethernetif.c **** 
 770              		.loc 1 162 0
 771 0028 3221     		movs	r1, #50
 772 002a 0A48     		ldr	r0, .L46+4
 773              	.LVL78:
 774 002c FFF7FEFF 		bl	HAL_GPIO_DeInit
 775              	.LVL79:
 164:LWIP/Target/ethernetif.c **** 
 776              		.loc 1 164 0
 777 0030 8621     		movs	r1, #134
 778 0032 0948     		ldr	r0, .L46+8
 779 0034 FFF7FEFF 		bl	HAL_GPIO_DeInit
 780              	.LVL80:
 166:LWIP/Target/ethernetif.c **** 
 781              		.loc 1 166 0
 782 0038 4FF40051 		mov	r1, #8192
 783 003c 0748     		ldr	r0, .L46+12
 784 003e FFF7FEFF 		bl	HAL_GPIO_DeInit
 785              	.LVL81:
 168:LWIP/Target/ethernetif.c **** 
 786              		.loc 1 168 0
 787 0042 4FF42051 		mov	r1, #10240
 788 0046 0648     		ldr	r0, .L46+16
 789 0048 FFF7FEFF 		bl	HAL_GPIO_DeInit
 790              	.LVL82:
 174:LWIP/Target/ethernetif.c **** 
 791              		.loc 1 174 0
 792 004c DDE7     		b	.L42
 793              	.L47:
 794 004e 00BF     		.align	2
 795              	.L46:
 796 0050 00800240 		.word	1073905664
 797 0054 00080240 		.word	1073874944
ARM GAS  /tmp/ccGnuz6d.s 			page 25


 798 0058 00000240 		.word	1073872896
 799 005c 00040240 		.word	1073873920
 800 0060 00180240 		.word	1073879040
 801              		.cfi_endproc
 802              	.LFE159:
 804              		.section	.text.ethernetif_input,"ax",%progbits
 805              		.align	1
 806              		.global	ethernetif_input
 807              		.syntax unified
 808              		.thumb
 809              		.thumb_func
 810              		.fpu fpv5-d16
 812              	ethernetif_input:
 813              	.LFB163:
 462:LWIP/Target/ethernetif.c **** 
 463:LWIP/Target/ethernetif.c **** /**
 464:LWIP/Target/ethernetif.c ****  * This function should be called when a packet is ready to be read
 465:LWIP/Target/ethernetif.c ****  * from the interface. It uses the function low_level_input() that
 466:LWIP/Target/ethernetif.c ****  * should handle the actual reception of bytes from the network
 467:LWIP/Target/ethernetif.c ****  * interface. Then the type of the received packet is determined and
 468:LWIP/Target/ethernetif.c ****  * the appropriate input function is called.
 469:LWIP/Target/ethernetif.c ****  *
 470:LWIP/Target/ethernetif.c ****  * @param netif the lwip network interface structure for this ethernetif
 471:LWIP/Target/ethernetif.c ****  */
 472:LWIP/Target/ethernetif.c **** void ethernetif_input(struct netif *netif)
 473:LWIP/Target/ethernetif.c **** {
 814              		.loc 1 473 0
 815              		.cfi_startproc
 816              		@ args = 0, pretend = 0, frame = 0
 817              		@ frame_needed = 0, uses_anonymous_args = 0
 818              	.LVL83:
 819 0000 38B5     		push	{r3, r4, r5, lr}
 820              	.LCFI10:
 821              		.cfi_def_cfa_offset 16
 822              		.cfi_offset 3, -16
 823              		.cfi_offset 4, -12
 824              		.cfi_offset 5, -8
 825              		.cfi_offset 14, -4
 826 0002 0446     		mov	r4, r0
 474:LWIP/Target/ethernetif.c ****   err_t err;
 475:LWIP/Target/ethernetif.c ****   struct pbuf *p;
 476:LWIP/Target/ethernetif.c **** 
 477:LWIP/Target/ethernetif.c ****   /* move received packet into a new pbuf */
 478:LWIP/Target/ethernetif.c ****   p = low_level_input(netif);
 827              		.loc 1 478 0
 828 0004 FFF7FEFF 		bl	low_level_input
 829              	.LVL84:
 479:LWIP/Target/ethernetif.c **** 
 480:LWIP/Target/ethernetif.c ****   /* no packet could be read, silently ignore this */
 481:LWIP/Target/ethernetif.c ****   if (p == NULL) return;
 830              		.loc 1 481 0
 831 0008 20B1     		cbz	r0, .L48
 832 000a 0546     		mov	r5, r0
 482:LWIP/Target/ethernetif.c **** 
 483:LWIP/Target/ethernetif.c ****   /* entry point to the LwIP stack */
 484:LWIP/Target/ethernetif.c ****   err = netif->input(p, netif);
 833              		.loc 1 484 0
ARM GAS  /tmp/ccGnuz6d.s 			page 26


 834 000c 2369     		ldr	r3, [r4, #16]
 835 000e 2146     		mov	r1, r4
 836 0010 9847     		blx	r3
 837              	.LVL85:
 485:LWIP/Target/ethernetif.c **** 
 486:LWIP/Target/ethernetif.c ****   if (err != ERR_OK)
 838              		.loc 1 486 0
 839 0012 00B9     		cbnz	r0, .L51
 840              	.LVL86:
 841              	.L48:
 842 0014 38BD     		pop	{r3, r4, r5, pc}
 843              	.LVL87:
 844              	.L51:
 487:LWIP/Target/ethernetif.c ****   {
 488:LWIP/Target/ethernetif.c ****     LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
 489:LWIP/Target/ethernetif.c ****     pbuf_free(p);
 845              		.loc 1 489 0
 846 0016 2846     		mov	r0, r5
 847              	.LVL88:
 848 0018 FFF7FEFF 		bl	pbuf_free
 849              	.LVL89:
 850 001c FAE7     		b	.L48
 851              		.cfi_endproc
 852              	.LFE163:
 854              		.section	.text.ethernetif_init,"ax",%progbits
 855              		.align	1
 856              		.global	ethernetif_init
 857              		.syntax unified
 858              		.thumb
 859              		.thumb_func
 860              		.fpu fpv5-d16
 862              	ethernetif_init:
 863              	.LFB164:
 490:LWIP/Target/ethernetif.c ****     p = NULL;
 491:LWIP/Target/ethernetif.c ****   }
 492:LWIP/Target/ethernetif.c **** }
 493:LWIP/Target/ethernetif.c **** 
 494:LWIP/Target/ethernetif.c **** #if !LWIP_ARP
 495:LWIP/Target/ethernetif.c **** /**
 496:LWIP/Target/ethernetif.c ****  * This function has to be completed by user in case of ARP OFF.
 497:LWIP/Target/ethernetif.c ****  *
 498:LWIP/Target/ethernetif.c ****  * @param netif the lwip network interface structure for this ethernetif
 499:LWIP/Target/ethernetif.c ****  * @return ERR_OK if ...
 500:LWIP/Target/ethernetif.c ****  */
 501:LWIP/Target/ethernetif.c **** static err_t low_level_output_arp_off(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr
 502:LWIP/Target/ethernetif.c **** {
 503:LWIP/Target/ethernetif.c ****   err_t errval;
 504:LWIP/Target/ethernetif.c ****   errval = ERR_OK;
 505:LWIP/Target/ethernetif.c **** 
 506:LWIP/Target/ethernetif.c **** /* USER CODE BEGIN 5 */
 507:LWIP/Target/ethernetif.c **** 
 508:LWIP/Target/ethernetif.c **** /* USER CODE END 5 */
 509:LWIP/Target/ethernetif.c **** 
 510:LWIP/Target/ethernetif.c ****   return errval;
 511:LWIP/Target/ethernetif.c **** 
 512:LWIP/Target/ethernetif.c **** }
 513:LWIP/Target/ethernetif.c **** #endif /* LWIP_ARP */
ARM GAS  /tmp/ccGnuz6d.s 			page 27


 514:LWIP/Target/ethernetif.c **** 
 515:LWIP/Target/ethernetif.c **** /**
 516:LWIP/Target/ethernetif.c ****  * Should be called at the beginning of the program to set up the
 517:LWIP/Target/ethernetif.c ****  * network interface. It calls the function low_level_init() to do the
 518:LWIP/Target/ethernetif.c ****  * actual setup of the hardware.
 519:LWIP/Target/ethernetif.c ****  *
 520:LWIP/Target/ethernetif.c ****  * This function should be passed as a parameter to netif_add().
 521:LWIP/Target/ethernetif.c ****  *
 522:LWIP/Target/ethernetif.c ****  * @param netif the lwip network interface structure for this ethernetif
 523:LWIP/Target/ethernetif.c ****  * @return ERR_OK if the loopif is initialized
 524:LWIP/Target/ethernetif.c ****  *         ERR_MEM if private data couldn't be allocated
 525:LWIP/Target/ethernetif.c ****  *         any other err_t on error
 526:LWIP/Target/ethernetif.c ****  */
 527:LWIP/Target/ethernetif.c **** err_t ethernetif_init(struct netif *netif)
 528:LWIP/Target/ethernetif.c **** {
 864              		.loc 1 528 0
 865              		.cfi_startproc
 866              		@ args = 0, pretend = 0, frame = 0
 867              		@ frame_needed = 0, uses_anonymous_args = 0
 868              	.LVL90:
 869 0000 10B5     		push	{r4, lr}
 870              	.LCFI11:
 871              		.cfi_def_cfa_offset 8
 872              		.cfi_offset 4, -8
 873              		.cfi_offset 14, -4
 529:LWIP/Target/ethernetif.c ****   LWIP_ASSERT("netif != NULL", (netif != NULL));
 874              		.loc 1 529 0
 875 0002 0446     		mov	r4, r0
 876 0004 70B1     		cbz	r0, .L55
 877              	.LVL91:
 878              	.L53:
 530:LWIP/Target/ethernetif.c **** 
 531:LWIP/Target/ethernetif.c **** #if LWIP_NETIF_HOSTNAME
 532:LWIP/Target/ethernetif.c ****   /* Initialize interface hostname */
 533:LWIP/Target/ethernetif.c ****   netif->hostname = "lwip";
 534:LWIP/Target/ethernetif.c **** #endif /* LWIP_NETIF_HOSTNAME */
 535:LWIP/Target/ethernetif.c **** 
 536:LWIP/Target/ethernetif.c ****   netif->name[0] = IFNAME0;
 879              		.loc 1 536 0
 880 0006 7323     		movs	r3, #115
 881 0008 84F83230 		strb	r3, [r4, #50]
 537:LWIP/Target/ethernetif.c ****   netif->name[1] = IFNAME1;
 882              		.loc 1 537 0
 883 000c 7423     		movs	r3, #116
 884 000e 84F83330 		strb	r3, [r4, #51]
 538:LWIP/Target/ethernetif.c ****   /* We directly use etharp_output() here to save a function call.
 539:LWIP/Target/ethernetif.c ****    * You can instead declare your own function an call etharp_output()
 540:LWIP/Target/ethernetif.c ****    * from it if you have to do some checks before sending (e.g. if link
 541:LWIP/Target/ethernetif.c ****    * is available...) */
 542:LWIP/Target/ethernetif.c **** 
 543:LWIP/Target/ethernetif.c **** #if LWIP_IPV4
 544:LWIP/Target/ethernetif.c **** #if LWIP_ARP || LWIP_ETHERNET
 545:LWIP/Target/ethernetif.c **** #if LWIP_ARP
 546:LWIP/Target/ethernetif.c ****   netif->output = etharp_output;
 885              		.loc 1 546 0
 886 0012 084B     		ldr	r3, .L56
 887 0014 6361     		str	r3, [r4, #20]
ARM GAS  /tmp/ccGnuz6d.s 			page 28


 547:LWIP/Target/ethernetif.c **** #else
 548:LWIP/Target/ethernetif.c ****   /* The user should write its own code in low_level_output_arp_off function */
 549:LWIP/Target/ethernetif.c ****   netif->output = low_level_output_arp_off;
 550:LWIP/Target/ethernetif.c **** #endif /* LWIP_ARP */
 551:LWIP/Target/ethernetif.c **** #endif /* LWIP_ARP || LWIP_ETHERNET */
 552:LWIP/Target/ethernetif.c **** #endif /* LWIP_IPV4 */
 553:LWIP/Target/ethernetif.c **** 
 554:LWIP/Target/ethernetif.c **** #if LWIP_IPV6
 555:LWIP/Target/ethernetif.c ****   netif->output_ip6 = ethip6_output;
 556:LWIP/Target/ethernetif.c **** #endif /* LWIP_IPV6 */
 557:LWIP/Target/ethernetif.c **** 
 558:LWIP/Target/ethernetif.c ****   netif->linkoutput = low_level_output;
 888              		.loc 1 558 0
 889 0016 084B     		ldr	r3, .L56+4
 890 0018 A361     		str	r3, [r4, #24]
 559:LWIP/Target/ethernetif.c **** 
 560:LWIP/Target/ethernetif.c ****   /* initialize the hardware */
 561:LWIP/Target/ethernetif.c ****   low_level_init(netif);
 891              		.loc 1 561 0
 892 001a 2046     		mov	r0, r4
 893 001c FFF7FEFF 		bl	low_level_init
 894              	.LVL92:
 562:LWIP/Target/ethernetif.c **** 
 563:LWIP/Target/ethernetif.c ****   return ERR_OK;
 564:LWIP/Target/ethernetif.c **** }
 895              		.loc 1 564 0
 896 0020 0020     		movs	r0, #0
 897 0022 10BD     		pop	{r4, pc}
 898              	.LVL93:
 899              	.L55:
 529:LWIP/Target/ethernetif.c **** 
 900              		.loc 1 529 0 discriminator 1
 901 0024 054B     		ldr	r3, .L56+8
 902 0026 40F21122 		movw	r2, #529
 903 002a 0549     		ldr	r1, .L56+12
 904 002c 0548     		ldr	r0, .L56+16
 905              	.LVL94:
 906 002e FFF7FEFF 		bl	printf
 907              	.LVL95:
 908 0032 E8E7     		b	.L53
 909              	.L57:
 910              		.align	2
 911              	.L56:
 912 0034 00000000 		.word	etharp_output
 913 0038 00000000 		.word	low_level_output
 914 003c 00000000 		.word	.LC0
 915 0040 1C000000 		.word	.LC1
 916 0044 2C000000 		.word	.LC2
 917              		.cfi_endproc
 918              	.LFE164:
 920              		.section	.text.sys_jiffies,"ax",%progbits
 921              		.align	1
 922              		.global	sys_jiffies
 923              		.syntax unified
 924              		.thumb
 925              		.thumb_func
 926              		.fpu fpv5-d16
ARM GAS  /tmp/ccGnuz6d.s 			page 29


 928              	sys_jiffies:
 929              	.LFB165:
 565:LWIP/Target/ethernetif.c **** 
 566:LWIP/Target/ethernetif.c **** /* USER CODE BEGIN 6 */
 567:LWIP/Target/ethernetif.c **** 
 568:LWIP/Target/ethernetif.c **** /**
 569:LWIP/Target/ethernetif.c **** * @brief  Returns the current time in milliseconds
 570:LWIP/Target/ethernetif.c **** *         when LWIP_TIMERS == 1 and NO_SYS == 1
 571:LWIP/Target/ethernetif.c **** * @param  None
 572:LWIP/Target/ethernetif.c **** * @retval Time
 573:LWIP/Target/ethernetif.c **** */
 574:LWIP/Target/ethernetif.c **** u32_t sys_jiffies(void)
 575:LWIP/Target/ethernetif.c **** {
 930              		.loc 1 575 0
 931              		.cfi_startproc
 932              		@ args = 0, pretend = 0, frame = 0
 933              		@ frame_needed = 0, uses_anonymous_args = 0
 934 0000 08B5     		push	{r3, lr}
 935              	.LCFI12:
 936              		.cfi_def_cfa_offset 8
 937              		.cfi_offset 3, -8
 938              		.cfi_offset 14, -4
 576:LWIP/Target/ethernetif.c ****   return HAL_GetTick();
 939              		.loc 1 576 0
 940 0002 FFF7FEFF 		bl	HAL_GetTick
 941              	.LVL96:
 577:LWIP/Target/ethernetif.c **** }
 942              		.loc 1 577 0
 943 0006 08BD     		pop	{r3, pc}
 944              		.cfi_endproc
 945              	.LFE165:
 947              		.section	.text.sys_now,"ax",%progbits
 948              		.align	1
 949              		.global	sys_now
 950              		.syntax unified
 951              		.thumb
 952              		.thumb_func
 953              		.fpu fpv5-d16
 955              	sys_now:
 956              	.LFB166:
 578:LWIP/Target/ethernetif.c **** 
 579:LWIP/Target/ethernetif.c **** /**
 580:LWIP/Target/ethernetif.c **** * @brief  Returns the current time in milliseconds
 581:LWIP/Target/ethernetif.c **** *         when LWIP_TIMERS == 1 and NO_SYS == 1
 582:LWIP/Target/ethernetif.c **** * @param  None
 583:LWIP/Target/ethernetif.c **** * @retval Time
 584:LWIP/Target/ethernetif.c **** */
 585:LWIP/Target/ethernetif.c **** u32_t sys_now(void)
 586:LWIP/Target/ethernetif.c **** {
 957              		.loc 1 586 0
 958              		.cfi_startproc
 959              		@ args = 0, pretend = 0, frame = 0
 960              		@ frame_needed = 0, uses_anonymous_args = 0
 961 0000 08B5     		push	{r3, lr}
 962              	.LCFI13:
 963              		.cfi_def_cfa_offset 8
 964              		.cfi_offset 3, -8
ARM GAS  /tmp/ccGnuz6d.s 			page 30


 965              		.cfi_offset 14, -4
 587:LWIP/Target/ethernetif.c ****   return HAL_GetTick();
 966              		.loc 1 587 0
 967 0002 FFF7FEFF 		bl	HAL_GetTick
 968              	.LVL97:
 588:LWIP/Target/ethernetif.c **** }
 969              		.loc 1 588 0
 970 0006 08BD     		pop	{r3, pc}
 971              		.cfi_endproc
 972              	.LFE166:
 974              		.section	.text.ethernetif_set_link,"ax",%progbits
 975              		.align	1
 976              		.global	ethernetif_set_link
 977              		.syntax unified
 978              		.thumb
 979              		.thumb_func
 980              		.fpu fpv5-d16
 982              	ethernetif_set_link:
 983              	.LFB167:
 589:LWIP/Target/ethernetif.c **** 
 590:LWIP/Target/ethernetif.c **** /* USER CODE END 6 */
 591:LWIP/Target/ethernetif.c **** 
 592:LWIP/Target/ethernetif.c **** /**
 593:LWIP/Target/ethernetif.c ****   * @brief  This function sets the netif link status.
 594:LWIP/Target/ethernetif.c ****   * @note   This function should be included in the main loop to poll
 595:LWIP/Target/ethernetif.c ****   *         for the link status update
 596:LWIP/Target/ethernetif.c ****   * @param  netif: the network interface
 597:LWIP/Target/ethernetif.c ****   * @retval None
 598:LWIP/Target/ethernetif.c ****   */
 599:LWIP/Target/ethernetif.c **** uint32_t EthernetLinkTimer=0;
 600:LWIP/Target/ethernetif.c **** 
 601:LWIP/Target/ethernetif.c **** void ethernetif_set_link(struct netif *netif)
 602:LWIP/Target/ethernetif.c **** {
 984              		.loc 1 602 0
 985              		.cfi_startproc
 986              		@ args = 0, pretend = 0, frame = 8
 987              		@ frame_needed = 0, uses_anonymous_args = 0
 988              	.LVL98:
 989 0000 10B5     		push	{r4, lr}
 990              	.LCFI14:
 991              		.cfi_def_cfa_offset 8
 992              		.cfi_offset 4, -8
 993              		.cfi_offset 14, -4
 994 0002 82B0     		sub	sp, sp, #8
 995              	.LCFI15:
 996              		.cfi_def_cfa_offset 16
 997 0004 0446     		mov	r4, r0
 603:LWIP/Target/ethernetif.c ****   uint32_t regvalue = 0;
 998              		.loc 1 603 0
 999 0006 0023     		movs	r3, #0
 1000 0008 0193     		str	r3, [sp, #4]
 604:LWIP/Target/ethernetif.c ****   /* Ethernet Link every 200ms */
 605:LWIP/Target/ethernetif.c ****   if (HAL_GetTick() - EthernetLinkTimer >= 200)
 1001              		.loc 1 605 0
 1002 000a FFF7FEFF 		bl	HAL_GetTick
 1003              	.LVL99:
 1004 000e 134B     		ldr	r3, .L68
ARM GAS  /tmp/ccGnuz6d.s 			page 31


 1005 0010 1B68     		ldr	r3, [r3]
 1006 0012 C01A     		subs	r0, r0, r3
 1007 0014 C728     		cmp	r0, #199
 1008 0016 01D8     		bhi	.L66
 1009              	.L62:
 606:LWIP/Target/ethernetif.c ****   {
 607:LWIP/Target/ethernetif.c ****     EthernetLinkTimer = HAL_GetTick();
 608:LWIP/Target/ethernetif.c **** 
 609:LWIP/Target/ethernetif.c ****     /* Read PHY_BSR*/
 610:LWIP/Target/ethernetif.c ****     HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 611:LWIP/Target/ethernetif.c **** 
 612:LWIP/Target/ethernetif.c ****     regvalue &= PHY_LINKED_STATUS;
 613:LWIP/Target/ethernetif.c **** 
 614:LWIP/Target/ethernetif.c ****     /* Check whether the netif link down and the PHY link is up */
 615:LWIP/Target/ethernetif.c ****     if(!netif_is_link_up(netif) && (regvalue))
 616:LWIP/Target/ethernetif.c ****     {
 617:LWIP/Target/ethernetif.c ****       /* network cable is connected */
 618:LWIP/Target/ethernetif.c ****       netif_set_link_up(netif);
 619:LWIP/Target/ethernetif.c ****     }
 620:LWIP/Target/ethernetif.c ****     else if(netif_is_link_up(netif) && (!regvalue))
 621:LWIP/Target/ethernetif.c ****     {
 622:LWIP/Target/ethernetif.c ****       /* network cable is disconnected */
 623:LWIP/Target/ethernetif.c ****       netif_set_link_down(netif);
 624:LWIP/Target/ethernetif.c ****     }
 625:LWIP/Target/ethernetif.c ****   }
 626:LWIP/Target/ethernetif.c **** }
 1010              		.loc 1 626 0
 1011 0018 02B0     		add	sp, sp, #8
 1012              	.LCFI16:
 1013              		.cfi_remember_state
 1014              		.cfi_def_cfa_offset 8
 1015              		@ sp needed
 1016 001a 10BD     		pop	{r4, pc}
 1017              	.LVL100:
 1018              	.L66:
 1019              	.LCFI17:
 1020              		.cfi_restore_state
 607:LWIP/Target/ethernetif.c **** 
 1021              		.loc 1 607 0
 1022 001c FFF7FEFF 		bl	HAL_GetTick
 1023              	.LVL101:
 1024 0020 0E4B     		ldr	r3, .L68
 1025 0022 1860     		str	r0, [r3]
 610:LWIP/Target/ethernetif.c **** 
 1026              		.loc 1 610 0
 1027 0024 01AA     		add	r2, sp, #4
 1028 0026 0121     		movs	r1, #1
 1029 0028 0D48     		ldr	r0, .L68+4
 1030 002a FFF7FEFF 		bl	HAL_ETH_ReadPHYRegister
 1031              	.LVL102:
 612:LWIP/Target/ethernetif.c **** 
 1032              		.loc 1 612 0
 1033 002e 019B     		ldr	r3, [sp, #4]
 1034 0030 03F00403 		and	r3, r3, #4
 1035 0034 0193     		str	r3, [sp, #4]
 615:LWIP/Target/ethernetif.c ****     {
 1036              		.loc 1 615 0
ARM GAS  /tmp/ccGnuz6d.s 			page 32


 1037 0036 94F83120 		ldrb	r2, [r4, #49]	@ zero_extendqisi2
 1038 003a 12F00402 		ands	r2, r2, #4
 1039 003e 00D1     		bne	.L64
 615:LWIP/Target/ethernetif.c ****     {
 1040              		.loc 1 615 0 is_stmt 0 discriminator 1
 1041 0040 3BB9     		cbnz	r3, .L67
 1042              	.L64:
 620:LWIP/Target/ethernetif.c ****     {
 1043              		.loc 1 620 0 is_stmt 1
 1044 0042 002A     		cmp	r2, #0
 1045 0044 E8D0     		beq	.L62
 620:LWIP/Target/ethernetif.c ****     {
 1046              		.loc 1 620 0 is_stmt 0 discriminator 1
 1047 0046 002B     		cmp	r3, #0
 1048 0048 E6D1     		bne	.L62
 623:LWIP/Target/ethernetif.c ****     }
 1049              		.loc 1 623 0 is_stmt 1
 1050 004a 2046     		mov	r0, r4
 1051 004c FFF7FEFF 		bl	netif_set_link_down
 1052              	.LVL103:
 1053              		.loc 1 626 0
 1054 0050 E2E7     		b	.L62
 1055              	.L67:
 618:LWIP/Target/ethernetif.c ****     }
 1056              		.loc 1 618 0
 1057 0052 2046     		mov	r0, r4
 1058 0054 FFF7FEFF 		bl	netif_set_link_up
 1059              	.LVL104:
 1060 0058 DEE7     		b	.L62
 1061              	.L69:
 1062 005a 00BF     		.align	2
 1063              	.L68:
 1064 005c 00000000 		.word	.LANCHOR0
 1065 0060 00000000 		.word	heth
 1066              		.cfi_endproc
 1067              	.LFE167:
 1069              		.section	.text.ethernetif_notify_conn_changed,"ax",%progbits
 1070              		.align	1
 1071              		.weak	ethernetif_notify_conn_changed
 1072              		.syntax unified
 1073              		.thumb
 1074              		.thumb_func
 1075              		.fpu fpv5-d16
 1077              	ethernetif_notify_conn_changed:
 1078              	.LFB169:
 627:LWIP/Target/ethernetif.c **** 
 628:LWIP/Target/ethernetif.c **** /* USER CODE BEGIN 7 */
 629:LWIP/Target/ethernetif.c **** 
 630:LWIP/Target/ethernetif.c **** /* USER CODE END 7 */
 631:LWIP/Target/ethernetif.c **** 
 632:LWIP/Target/ethernetif.c **** #if LWIP_NETIF_LINK_CALLBACK
 633:LWIP/Target/ethernetif.c **** /**
 634:LWIP/Target/ethernetif.c ****   * @brief  Link callback function, this function is called on change of link status
 635:LWIP/Target/ethernetif.c ****   *         to update low level driver configuration.
 636:LWIP/Target/ethernetif.c **** * @param  netif: The network interface
 637:LWIP/Target/ethernetif.c ****   * @retval None
 638:LWIP/Target/ethernetif.c ****   */
ARM GAS  /tmp/ccGnuz6d.s 			page 33


 639:LWIP/Target/ethernetif.c **** void ethernetif_update_config(struct netif *netif)
 640:LWIP/Target/ethernetif.c **** {
 641:LWIP/Target/ethernetif.c ****   __IO uint32_t tickstart = 0;
 642:LWIP/Target/ethernetif.c ****   uint32_t regvalue = 0;
 643:LWIP/Target/ethernetif.c **** 
 644:LWIP/Target/ethernetif.c ****   if(netif_is_link_up(netif))
 645:LWIP/Target/ethernetif.c ****   {
 646:LWIP/Target/ethernetif.c ****     /* Restart the auto-negotiation */
 647:LWIP/Target/ethernetif.c ****     if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 648:LWIP/Target/ethernetif.c ****     {
 649:LWIP/Target/ethernetif.c ****       /* Enable Auto-Negotiation */
 650:LWIP/Target/ethernetif.c ****       HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 651:LWIP/Target/ethernetif.c **** 
 652:LWIP/Target/ethernetif.c ****       /* Get tick */
 653:LWIP/Target/ethernetif.c ****       tickstart = HAL_GetTick();
 654:LWIP/Target/ethernetif.c **** 
 655:LWIP/Target/ethernetif.c ****       /* Wait until the auto-negotiation will be completed */
 656:LWIP/Target/ethernetif.c ****       do
 657:LWIP/Target/ethernetif.c ****       {
 658:LWIP/Target/ethernetif.c ****         HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 659:LWIP/Target/ethernetif.c **** 
 660:LWIP/Target/ethernetif.c ****         /* Check for the Timeout ( 1s ) */
 661:LWIP/Target/ethernetif.c ****         if((HAL_GetTick() - tickstart ) > 1000)
 662:LWIP/Target/ethernetif.c ****         {
 663:LWIP/Target/ethernetif.c ****           /* In case of timeout */
 664:LWIP/Target/ethernetif.c ****           goto error;
 665:LWIP/Target/ethernetif.c ****         }
 666:LWIP/Target/ethernetif.c ****       } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 667:LWIP/Target/ethernetif.c **** 
 668:LWIP/Target/ethernetif.c ****       /* Read the result of the auto-negotiation */
 669:LWIP/Target/ethernetif.c ****       HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 670:LWIP/Target/ethernetif.c **** 
 671:LWIP/Target/ethernetif.c ****       /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
 672:LWIP/Target/ethernetif.c ****       if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 673:LWIP/Target/ethernetif.c ****       {
 674:LWIP/Target/ethernetif.c ****         /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
 675:LWIP/Target/ethernetif.c ****         heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 676:LWIP/Target/ethernetif.c ****       }
 677:LWIP/Target/ethernetif.c ****       else
 678:LWIP/Target/ethernetif.c ****       {
 679:LWIP/Target/ethernetif.c ****         /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
 680:LWIP/Target/ethernetif.c ****         heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 681:LWIP/Target/ethernetif.c ****       }
 682:LWIP/Target/ethernetif.c ****       /* Configure the MAC with the speed fixed by the auto-negotiation process */
 683:LWIP/Target/ethernetif.c ****       if(regvalue & PHY_SPEED_STATUS)
 684:LWIP/Target/ethernetif.c ****       {
 685:LWIP/Target/ethernetif.c ****         /* Set Ethernet speed to 10M following the auto-negotiation */
 686:LWIP/Target/ethernetif.c ****         heth.Init.Speed = ETH_SPEED_10M;
 687:LWIP/Target/ethernetif.c ****       }
 688:LWIP/Target/ethernetif.c ****       else
 689:LWIP/Target/ethernetif.c ****       {
 690:LWIP/Target/ethernetif.c ****         /* Set Ethernet speed to 100M following the auto-negotiation */
 691:LWIP/Target/ethernetif.c ****         heth.Init.Speed = ETH_SPEED_100M;
 692:LWIP/Target/ethernetif.c ****       }
 693:LWIP/Target/ethernetif.c ****     }
 694:LWIP/Target/ethernetif.c ****     else /* AutoNegotiation Disable */
 695:LWIP/Target/ethernetif.c ****     {
ARM GAS  /tmp/ccGnuz6d.s 			page 34


 696:LWIP/Target/ethernetif.c ****     error :
 697:LWIP/Target/ethernetif.c ****       /* Check parameters */
 698:LWIP/Target/ethernetif.c ****       assert_param(IS_ETH_SPEED(heth.Init.Speed));
 699:LWIP/Target/ethernetif.c ****       assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 700:LWIP/Target/ethernetif.c **** 
 701:LWIP/Target/ethernetif.c ****       /* Set MAC Speed and Duplex Mode to PHY */
 702:LWIP/Target/ethernetif.c ****       HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 703:LWIP/Target/ethernetif.c ****                                                      (uint16_t)(heth.Init.Speed >> 1)));
 704:LWIP/Target/ethernetif.c ****     }
 705:LWIP/Target/ethernetif.c **** 
 706:LWIP/Target/ethernetif.c ****     /* ETHERNET MAC Re-Configuration */
 707:LWIP/Target/ethernetif.c ****     HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 708:LWIP/Target/ethernetif.c **** 
 709:LWIP/Target/ethernetif.c ****     /* Restart MAC interface */
 710:LWIP/Target/ethernetif.c ****     HAL_ETH_Start(&heth);
 711:LWIP/Target/ethernetif.c ****   }
 712:LWIP/Target/ethernetif.c ****   else
 713:LWIP/Target/ethernetif.c ****   {
 714:LWIP/Target/ethernetif.c ****     /* Stop MAC interface */
 715:LWIP/Target/ethernetif.c ****     HAL_ETH_Stop(&heth);
 716:LWIP/Target/ethernetif.c ****   }
 717:LWIP/Target/ethernetif.c **** 
 718:LWIP/Target/ethernetif.c ****   ethernetif_notify_conn_changed(netif);
 719:LWIP/Target/ethernetif.c **** }
 720:LWIP/Target/ethernetif.c **** 
 721:LWIP/Target/ethernetif.c **** /* USER CODE BEGIN 8 */
 722:LWIP/Target/ethernetif.c **** /**
 723:LWIP/Target/ethernetif.c ****   * @brief  This function notify user about link status changement.
 724:LWIP/Target/ethernetif.c ****   * @param  netif: the network interface
 725:LWIP/Target/ethernetif.c ****   * @retval None
 726:LWIP/Target/ethernetif.c ****   */
 727:LWIP/Target/ethernetif.c **** __weak void ethernetif_notify_conn_changed(struct netif *netif)
 728:LWIP/Target/ethernetif.c **** {
 1079              		.loc 1 728 0
 1080              		.cfi_startproc
 1081              		@ args = 0, pretend = 0, frame = 0
 1082              		@ frame_needed = 0, uses_anonymous_args = 0
 1083              		@ link register save eliminated.
 1084              	.LVL105:
 1085 0000 7047     		bx	lr
 1086              		.cfi_endproc
 1087              	.LFE169:
 1089              		.section	.text.ethernetif_update_config,"ax",%progbits
 1090              		.align	1
 1091              		.global	ethernetif_update_config
 1092              		.syntax unified
 1093              		.thumb
 1094              		.thumb_func
 1095              		.fpu fpv5-d16
 1097              	ethernetif_update_config:
 1098              	.LFB168:
 640:LWIP/Target/ethernetif.c ****   __IO uint32_t tickstart = 0;
 1099              		.loc 1 640 0
 1100              		.cfi_startproc
 1101              		@ args = 0, pretend = 0, frame = 8
 1102              		@ frame_needed = 0, uses_anonymous_args = 0
 1103              	.LVL106:
ARM GAS  /tmp/ccGnuz6d.s 			page 35


 640:LWIP/Target/ethernetif.c ****   __IO uint32_t tickstart = 0;
 1104              		.loc 1 640 0
 1105 0000 30B5     		push	{r4, r5, lr}
 1106              	.LCFI18:
 1107              		.cfi_def_cfa_offset 12
 1108              		.cfi_offset 4, -12
 1109              		.cfi_offset 5, -8
 1110              		.cfi_offset 14, -4
 1111 0002 83B0     		sub	sp, sp, #12
 1112              	.LCFI19:
 1113              		.cfi_def_cfa_offset 24
 1114 0004 0446     		mov	r4, r0
 641:LWIP/Target/ethernetif.c ****   uint32_t regvalue = 0;
 1115              		.loc 1 641 0
 1116 0006 0023     		movs	r3, #0
 1117 0008 0193     		str	r3, [sp, #4]
 642:LWIP/Target/ethernetif.c **** 
 1118              		.loc 1 642 0
 1119 000a 0093     		str	r3, [sp]
 644:LWIP/Target/ethernetif.c ****   {
 1120              		.loc 1 644 0
 1121 000c 90F83130 		ldrb	r3, [r0, #49]	@ zero_extendqisi2
 1122 0010 13F0040F 		tst	r3, #4
 1123 0014 51D0     		beq	.L72
 647:LWIP/Target/ethernetif.c ****     {
 1124              		.loc 1 647 0
 1125 0016 2B4B     		ldr	r3, .L81
 1126 0018 5B68     		ldr	r3, [r3, #4]
 1127 001a 002B     		cmp	r3, #0
 1128 001c 35D0     		beq	.L73
 650:LWIP/Target/ethernetif.c **** 
 1129              		.loc 1 650 0
 1130 001e 4FF48052 		mov	r2, #4096
 1131 0022 0021     		movs	r1, #0
 1132 0024 2748     		ldr	r0, .L81
 1133              	.LVL107:
 1134 0026 FFF7FEFF 		bl	HAL_ETH_WritePHYRegister
 1135              	.LVL108:
 653:LWIP/Target/ethernetif.c **** 
 1136              		.loc 1 653 0
 1137 002a FFF7FEFF 		bl	HAL_GetTick
 1138              	.LVL109:
 1139 002e 0190     		str	r0, [sp, #4]
 1140              	.L74:
 658:LWIP/Target/ethernetif.c **** 
 1141              		.loc 1 658 0
 1142 0030 6A46     		mov	r2, sp
 1143 0032 0121     		movs	r1, #1
 1144 0034 2348     		ldr	r0, .L81
 1145 0036 FFF7FEFF 		bl	HAL_ETH_ReadPHYRegister
 1146              	.LVL110:
 661:LWIP/Target/ethernetif.c ****         {
 1147              		.loc 1 661 0
 1148 003a FFF7FEFF 		bl	HAL_GetTick
 1149              	.LVL111:
 1150 003e 019B     		ldr	r3, [sp, #4]
 1151 0040 C01A     		subs	r0, r0, r3
ARM GAS  /tmp/ccGnuz6d.s 			page 36


 1152 0042 B0F57A7F 		cmp	r0, #1000
 1153 0046 20D8     		bhi	.L73
 666:LWIP/Target/ethernetif.c **** 
 1154              		.loc 1 666 0
 1155 0048 009B     		ldr	r3, [sp]
 1156 004a 13F0200F 		tst	r3, #32
 1157 004e EFD0     		beq	.L74
 669:LWIP/Target/ethernetif.c **** 
 1158              		.loc 1 669 0
 1159 0050 6A46     		mov	r2, sp
 1160 0052 1021     		movs	r1, #16
 1161 0054 1B48     		ldr	r0, .L81
 1162 0056 FFF7FEFF 		bl	HAL_ETH_ReadPHYRegister
 1163              	.LVL112:
 672:LWIP/Target/ethernetif.c ****       {
 1164              		.loc 1 672 0
 1165 005a 009B     		ldr	r3, [sp]
 1166 005c 13F0040F 		tst	r3, #4
 1167 0060 0AD0     		beq	.L75
 675:LWIP/Target/ethernetif.c ****       }
 1168              		.loc 1 675 0
 1169 0062 4FF40061 		mov	r1, #2048
 1170 0066 174A     		ldr	r2, .L81
 1171 0068 D160     		str	r1, [r2, #12]
 1172              	.L76:
 683:LWIP/Target/ethernetif.c ****       {
 1173              		.loc 1 683 0
 1174 006a 13F0020F 		tst	r3, #2
 1175 006e 07D0     		beq	.L77
 686:LWIP/Target/ethernetif.c ****       }
 1176              		.loc 1 686 0
 1177 0070 0022     		movs	r2, #0
 1178 0072 144B     		ldr	r3, .L81
 1179 0074 9A60     		str	r2, [r3, #8]
 1180 0076 13E0     		b	.L78
 1181              	.L75:
 680:LWIP/Target/ethernetif.c ****       }
 1182              		.loc 1 680 0
 1183 0078 0021     		movs	r1, #0
 1184 007a 124A     		ldr	r2, .L81
 1185 007c D160     		str	r1, [r2, #12]
 1186 007e F4E7     		b	.L76
 1187              	.L77:
 691:LWIP/Target/ethernetif.c ****       }
 1188              		.loc 1 691 0
 1189 0080 4FF48042 		mov	r2, #16384
 1190 0084 0F4B     		ldr	r3, .L81
 1191 0086 9A60     		str	r2, [r3, #8]
 1192 0088 0AE0     		b	.L78
 1193              	.L73:
 702:LWIP/Target/ethernetif.c ****                                                      (uint16_t)(heth.Init.Speed >> 1)));
 1194              		.loc 1 702 0
 1195 008a 0E48     		ldr	r0, .L81
 1196 008c C268     		ldr	r2, [r0, #12]
 1197 008e C2F3CF02 		ubfx	r2, r2, #3, #16
 703:LWIP/Target/ethernetif.c ****     }
 1198              		.loc 1 703 0
ARM GAS  /tmp/ccGnuz6d.s 			page 37


 1199 0092 8368     		ldr	r3, [r0, #8]
 1200 0094 C3F34F03 		ubfx	r3, r3, #1, #16
 702:LWIP/Target/ethernetif.c ****                                                      (uint16_t)(heth.Init.Speed >> 1)));
 1201              		.loc 1 702 0
 1202 0098 1A43     		orrs	r2, r2, r3
 1203 009a 0021     		movs	r1, #0
 1204 009c FFF7FEFF 		bl	HAL_ETH_WritePHYRegister
 1205              	.LVL113:
 1206              	.L78:
 707:LWIP/Target/ethernetif.c **** 
 1207              		.loc 1 707 0
 1208 00a0 084D     		ldr	r5, .L81
 1209 00a2 0021     		movs	r1, #0
 1210 00a4 2846     		mov	r0, r5
 1211 00a6 FFF7FEFF 		bl	HAL_ETH_ConfigMAC
 1212              	.LVL114:
 710:LWIP/Target/ethernetif.c ****   }
 1213              		.loc 1 710 0
 1214 00aa 2846     		mov	r0, r5
 1215 00ac FFF7FEFF 		bl	HAL_ETH_Start
 1216              	.LVL115:
 1217              	.L79:
 718:LWIP/Target/ethernetif.c **** }
 1218              		.loc 1 718 0
 1219 00b0 2046     		mov	r0, r4
 1220 00b2 FFF7FEFF 		bl	ethernetif_notify_conn_changed
 1221              	.LVL116:
 719:LWIP/Target/ethernetif.c **** 
 1222              		.loc 1 719 0
 1223 00b6 03B0     		add	sp, sp, #12
 1224              	.LCFI20:
 1225              		.cfi_remember_state
 1226              		.cfi_def_cfa_offset 12
 1227              		@ sp needed
 1228 00b8 30BD     		pop	{r4, r5, pc}
 1229              	.LVL117:
 1230              	.L72:
 1231              	.LCFI21:
 1232              		.cfi_restore_state
 715:LWIP/Target/ethernetif.c ****   }
 1233              		.loc 1 715 0
 1234 00ba 0248     		ldr	r0, .L81
 1235              	.LVL118:
 1236 00bc FFF7FEFF 		bl	HAL_ETH_Stop
 1237              	.LVL119:
 1238 00c0 F6E7     		b	.L79
 1239              	.L82:
 1240 00c2 00BF     		.align	2
 1241              	.L81:
 1242 00c4 00000000 		.word	heth
 1243              		.cfi_endproc
 1244              	.LFE168:
 1246              		.global	EthernetLinkTimer
 1247              		.comm	heth,72,4
 1248              		.comm	Tx_Buff,6096,4
 1249              		.comm	Rx_Buff,6096,4
 1250              		.comm	DMATxDscrTab,128,4
ARM GAS  /tmp/ccGnuz6d.s 			page 38


 1251              		.comm	DMARxDscrTab,128,4
 1252              		.section	.bss.EthernetLinkTimer,"aw",%nobits
 1253              		.align	2
 1254              		.set	.LANCHOR0,. + 0
 1257              	EthernetLinkTimer:
 1258 0000 00000000 		.space	4
 1259              		.section	.rodata.ethernetif_init.str1.4,"aMS",%progbits,1
 1260              		.align	2
 1261              	.LC0:
 1262 0000 4C574950 		.ascii	"LWIP/Target/ethernetif.c\000"
 1262      2F546172 
 1262      6765742F 
 1262      65746865 
 1262      726E6574 
 1263 0019 000000   		.space	3
 1264              	.LC1:
 1265 001c 6E657469 		.ascii	"netif != NULL\000"
 1265      6620213D 
 1265      204E554C 
 1265      4C00
 1266 002a 0000     		.space	2
 1267              	.LC2:
 1268 002c 41737365 		.ascii	"Assertion \"%s\" failed at line %d in %s\012\000"
 1268      7274696F 
 1268      6E202225 
 1268      73222066 
 1268      61696C65 
 1269              		.text
 1270              	.Letext0:
 1271              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1272              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1273              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 1274              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 1275              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f767xx.h"
 1276              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 1277              		.file 8 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 1278              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_gpio.h"
 1279              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_eth.h"
 1280              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 1281              		.file 12 "/usr/include/newlib/sys/lock.h"
 1282              		.file 13 "/usr/include/newlib/sys/_types.h"
 1283              		.file 14 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1284              		.file 15 "/usr/include/newlib/sys/reent.h"
 1285              		.file 16 "/usr/include/newlib/stdlib.h"
 1286              		.file 17 "/usr/include/newlib/time.h"
 1287              		.file 18 "Middlewares/Third_Party/LwIP/src/include/lwip/arch.h"
 1288              		.file 19 "/usr/include/newlib/ctype.h"
 1289              		.file 20 "Middlewares/Third_Party/LwIP/src/include/lwip/memp.h"
 1290              		.file 21 "Middlewares/Third_Party/LwIP/src/include/lwip/priv/memp_priv.h"
 1291              		.file 22 "Middlewares/Third_Party/LwIP/src/include/lwip/err.h"
 1292              		.file 23 "Middlewares/Third_Party/LwIP/src/include/lwip/timeouts.h"
 1293              		.file 24 "Middlewares/Third_Party/LwIP/src/include/lwip/pbuf.h"
 1294              		.file 25 "Middlewares/Third_Party/LwIP/src/include/lwip/ip4_addr.h"
 1295              		.file 26 "Middlewares/Third_Party/LwIP/src/include/lwip/ip_addr.h"
 1296              		.file 27 "Middlewares/Third_Party/LwIP/src/include/lwip/netif.h"
 1297              		.file 28 "Middlewares/Third_Party/LwIP/src/include/lwip/prot/ethernet.h"
 1298              		.file 29 "Middlewares/Third_Party/LwIP/src/include/netif/ethernet.h"
ARM GAS  /tmp/ccGnuz6d.s 			page 39


 1299              		.file 30 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccGnuz6d.s 			page 40


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ethernetif.c
     /tmp/ccGnuz6d.s:17     .text.low_level_input:0000000000000000 $t
     /tmp/ccGnuz6d.s:23     .text.low_level_input:0000000000000000 low_level_input
     /tmp/ccGnuz6d.s:202    .text.low_level_input:00000000000000d8 $d
                            *COM*:0000000000000048 heth
     /tmp/ccGnuz6d.s:207    .text.low_level_output:0000000000000000 $t
     /tmp/ccGnuz6d.s:213    .text.low_level_output:0000000000000000 low_level_output
     /tmp/ccGnuz6d.s:359    .text.low_level_output:00000000000000b8 $d
     /tmp/ccGnuz6d.s:364    .text.low_level_init:0000000000000000 $t
     /tmp/ccGnuz6d.s:370    .text.low_level_init:0000000000000000 low_level_init
     /tmp/ccGnuz6d.s:520    .text.low_level_init:00000000000000e4 $d
                            *COM*:00000000000017d0 Tx_Buff
                            *COM*:0000000000000080 DMATxDscrTab
                            *COM*:00000000000017d0 Rx_Buff
                            *COM*:0000000000000080 DMARxDscrTab
     /tmp/ccGnuz6d.s:530    .text.HAL_ETH_MspInit:0000000000000000 $t
     /tmp/ccGnuz6d.s:537    .text.HAL_ETH_MspInit:0000000000000000 HAL_ETH_MspInit
     /tmp/ccGnuz6d.s:721    .text.HAL_ETH_MspInit:00000000000000fc $d
     /tmp/ccGnuz6d.s:730    .text.HAL_ETH_MspDeInit:0000000000000000 $t
     /tmp/ccGnuz6d.s:737    .text.HAL_ETH_MspDeInit:0000000000000000 HAL_ETH_MspDeInit
     /tmp/ccGnuz6d.s:796    .text.HAL_ETH_MspDeInit:0000000000000050 $d
     /tmp/ccGnuz6d.s:805    .text.ethernetif_input:0000000000000000 $t
     /tmp/ccGnuz6d.s:812    .text.ethernetif_input:0000000000000000 ethernetif_input
     /tmp/ccGnuz6d.s:855    .text.ethernetif_init:0000000000000000 $t
     /tmp/ccGnuz6d.s:862    .text.ethernetif_init:0000000000000000 ethernetif_init
     /tmp/ccGnuz6d.s:912    .text.ethernetif_init:0000000000000034 $d
     /tmp/ccGnuz6d.s:921    .text.sys_jiffies:0000000000000000 $t
     /tmp/ccGnuz6d.s:928    .text.sys_jiffies:0000000000000000 sys_jiffies
     /tmp/ccGnuz6d.s:948    .text.sys_now:0000000000000000 $t
     /tmp/ccGnuz6d.s:955    .text.sys_now:0000000000000000 sys_now
     /tmp/ccGnuz6d.s:975    .text.ethernetif_set_link:0000000000000000 $t
     /tmp/ccGnuz6d.s:982    .text.ethernetif_set_link:0000000000000000 ethernetif_set_link
     /tmp/ccGnuz6d.s:1064   .text.ethernetif_set_link:000000000000005c $d
     /tmp/ccGnuz6d.s:1070   .text.ethernetif_notify_conn_changed:0000000000000000 $t
     /tmp/ccGnuz6d.s:1077   .text.ethernetif_notify_conn_changed:0000000000000000 ethernetif_notify_conn_changed
     /tmp/ccGnuz6d.s:1090   .text.ethernetif_update_config:0000000000000000 $t
     /tmp/ccGnuz6d.s:1097   .text.ethernetif_update_config:0000000000000000 ethernetif_update_config
     /tmp/ccGnuz6d.s:1242   .text.ethernetif_update_config:00000000000000c4 $d
     /tmp/ccGnuz6d.s:1257   .bss.EthernetLinkTimer:0000000000000000 EthernetLinkTimer
     /tmp/ccGnuz6d.s:1253   .bss.EthernetLinkTimer:0000000000000000 $d
     /tmp/ccGnuz6d.s:1260   .rodata.ethernetif_init.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_ETH_GetReceivedFrame
pbuf_alloc
memcpy
HAL_ETH_TransmitFrame
HAL_ETH_Init
HAL_ETH_DMATxDescListInit
HAL_ETH_DMARxDescListInit
HAL_ETH_Start
HAL_ETH_ReadPHYRegister
HAL_ETH_WritePHYRegister
HAL_GPIO_Init
HAL_GPIO_DeInit
ARM GAS  /tmp/ccGnuz6d.s 			page 41


pbuf_free
printf
etharp_output
HAL_GetTick
netif_set_link_down
netif_set_link_up
HAL_ETH_ConfigMAC
HAL_ETH_Stop

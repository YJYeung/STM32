ARM GAS  /tmp/ccwHIqYH.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"stm32f7xx_hal_uart.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.UART_EndTxTransfer,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv5-d16
  23              	UART_EndTxTransfer:
  24              	.LFB191:
  25              		.file 1 "Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c"
   1:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
   2:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   ******************************************************************************
   3:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @file    stm32f7xx_hal_uart.c
   4:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @author  MCD Application Team
   5:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief   UART HAL module driver.
   6:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *          functionalities of the Universal Asynchronous Receiver Transmitter Peripheral (UART).
   8:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           + IO operation functions
  10:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           + Peripheral Control functions
  11:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *
  12:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *
  13:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   @verbatim
  14:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****  ===============================================================================
  15:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                         ##### How to use this driver #####
  16:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****  ===============================================================================
  17:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   [..]
  18:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     The UART HAL driver can be used as follows:
  19:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  20:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) Declare a UART_HandleTypeDef handle structure (eg. UART_HandleTypeDef huart).
  21:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) Initialize the UART low level resources by implementing the HAL_UART_MspInit() API:
  22:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) Enable the USARTx interface clock.
  23:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) UART pins configuration:
  24:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Enable the clock for the UART GPIOs.
  25:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Configure these UART pins as alternate function pull-up.
  26:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) NVIC configuration if you need to use interrupt process (HAL_UART_Transmit_IT()
  27:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****              and HAL_UART_Receive_IT() APIs):
  28:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority.
  29:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Enable the NVIC USART IRQ handle.
  30:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) UART interrupts handling:
  31:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****               -@@-  The specific UART interrupts (Transmission complete interrupt,
  32:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                 RXNE interrupt, RX/TX FIFOs related interrupts and Error Interrupts)
  33:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                 are managed using the macros __HAL_UART_ENABLE_IT() and __HAL_UART_DISABLE_IT()
ARM GAS  /tmp/ccwHIqYH.s 			page 2


  34:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                 inside the transmit and receive processes.
  35:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) DMA Configuration if you need to use DMA process (HAL_UART_Transmit_DMA()
  36:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****              and HAL_UART_Receive_DMA() APIs):
  37:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Declare a DMA handle structure for the Tx/Rx channel.
  38:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Enable the DMAx interface clock.
  39:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Configure the declared DMA handle structure with the required Tx/Rx parameters.
  40:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Configure the DMA Tx/Rx channel.
  41:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Associate the initialized DMA handle to the UART DMA Tx/Rx handle.
  42:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete
  43:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                   interrupt on the DMA Tx/Rx channel.
  44:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  45:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) Program the Baud Rate, Word Length, Stop Bit, Parity, Hardware
  46:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         flow control and Mode (Receiver/Transmitter) in the huart handle Init structure.
  47:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  48:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) If required, program UART advanced features (TX/RX pins swap, auto Baud rate detection,...)
  49:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         in the huart handle AdvancedInit structure.
  50:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  51:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) For the UART asynchronous mode, initialize the UART registers by calling
  52:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         the HAL_UART_Init() API.
  53:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  54:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) For the UART Half duplex mode, initialize the UART registers by calling
  55:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         the HAL_HalfDuplex_Init() API.
  56:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  57:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) For the UART LIN (Local Interconnection Network) mode, initialize the UART registers
  58:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         by calling the HAL_LIN_Init() API.
  59:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  60:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) For the UART Multiprocessor mode, initialize the UART registers
  61:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         by calling the HAL_MultiProcessor_Init() API.
  62:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  63:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) For the UART RS485 Driver Enabled mode, initialize the UART registers
  64:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         by calling the HAL_RS485Ex_Init() API.
  65:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  66:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
  67:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (@) These API's (HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_LIN_Init(), HAL_MultiProcessor_Ini
  68:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         also configure the low level Hardware GPIO, CLOCK, CORTEX...etc) by
  69:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         calling the customized HAL_UART_MspInit() API.
  70:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  71:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     ##### Callback registration #####
  72:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     ==================================
  73:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  74:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
  75:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     The compilation define USE_HAL_UART_REGISTER_CALLBACKS when set to 1
  76:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     allows the user to configure dynamically the driver callbacks.
  77:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  78:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
  79:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     Use Function @ref HAL_UART_RegisterCallback() to register a user callback.
  80:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     Function @ref HAL_UART_RegisterCallback() allows to register following callbacks:
  81:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
  82:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
  83:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
  84:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
  85:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
  86:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
  87:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
  88:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
  89:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) WakeupCallback            : Wakeup Callback.
  90:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
ARM GAS  /tmp/ccwHIqYH.s 			page 3


  91:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
  92:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     This function takes as parameters the HAL peripheral handle, the Callback ID
  93:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     and a pointer to the user callback function.
  94:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  95:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
  96:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     Use function @ref HAL_UART_UnRegisterCallback() to reset a callback to the default
  97:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     weak (surcharged) function.
  98:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     @ref HAL_UART_UnRegisterCallback() takes as parameters the HAL peripheral handle,
  99:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     and the Callback ID.
 100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     This function allows to reset following callbacks:
 101:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
 102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
 103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
 104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
 105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
 106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
 107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
 108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
 109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) WakeupCallback            : Wakeup Callback.
 110:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
 111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
 112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
 114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     For specific callback RxEventCallback, use dedicated registration/reset functions:
 115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     respectively @ref HAL_UART_RegisterRxEventCallback() , @ref HAL_UART_UnRegisterRxEventCallback(
 116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
 118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     By default, after the @ref HAL_UART_Init() and when the state is HAL_UART_STATE_RESET
 119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     all callbacks are set to the corresponding weak (surcharged) functions:
 120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     examples @ref HAL_UART_TxCpltCallback(), @ref HAL_UART_RxHalfCpltCallback().
 121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     Exception done for MspInit and MspDeInit functions that are respectively
 122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     reset to the legacy weak (surcharged) functions in the @ref HAL_UART_Init()
 123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     and @ref HAL_UART_DeInit() only when these callbacks are null (not registered beforehand).
 124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     If not, MspInit or MspDeInit are not null, the @ref HAL_UART_Init() and @ref HAL_UART_DeInit()
 125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     keep and use the user MspInit/MspDeInit callbacks (registered beforehand).
 126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
 128:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     Callbacks can be registered/unregistered in HAL_UART_STATE_READY state only.
 129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     Exception done MspInit/MspDeInit that can be registered/unregistered
 130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     in HAL_UART_STATE_READY or HAL_UART_STATE_RESET state, thus registered (user)
 131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MspInit/DeInit callbacks can be used during the Init/DeInit.
 132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     In that case first register the MspInit/MspDeInit user callbacks
 133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     using @ref HAL_UART_RegisterCallback() before calling @ref HAL_UART_DeInit()
 134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     or @ref HAL_UART_Init() function.
 135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
 137:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     When The compilation define USE_HAL_UART_REGISTER_CALLBACKS is set to 0 or
 138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     not defined, the callback registration feature is not available
 139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     and weak (surcharged) callbacks are used.
 140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   @endverbatim
 143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   ******************************************************************************
 144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @attention
 145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *
 146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
 147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * All rights reserved.</center></h2>
ARM GAS  /tmp/ccwHIqYH.s 			page 4


 148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *
 149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * the "License"; You may not use this file except in compliance with the
 151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * License. You may obtain a copy of the License at:
 152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *                        opensource.org/licenses/BSD-3-Clause
 153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *
 154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   ******************************************************************************
 155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 156:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /* Includes ------------------------------------------------------------------*/
 158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #include "stm32f7xx_hal.h"
 159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @addtogroup STM32F7xx_HAL_Driver
 161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
 162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @defgroup UART UART
 165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief HAL UART module driver
 166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
 167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 168:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #ifdef HAL_UART_MODULE_ENABLED
 170:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 171:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /* Private typedef -----------------------------------------------------------*/
 172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /* Private define ------------------------------------------------------------*/
 173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @defgroup UART_Private_Constants UART Private Constants
 174:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
 175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #define USART_CR1_FIELDS  ((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | U
 177:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                                       USART_CR1_OVER8)) /*!< UART or USART CR1 fields of parameters
 178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #define USART_CR3_FIELDS  ((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE |\
 180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                             USART_CR3_ONEBIT)) /*!< UART or USART CR3 fields of parameters set by U
 181:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #define UART_BRR_MIN    0x10U        /* UART BRR minimum authorized value */
 184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #define UART_BRR_MAX    0x0000FFFFU  /* UART BRR maximum authorized value */
 185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @}
 187:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 189:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /* Private macros ------------------------------------------------------------*/
 190:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /* Private variables ---------------------------------------------------------*/
 191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /* Private function prototypes -----------------------------------------------*/
 192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @addtogroup UART_Private_Functions
 193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
 194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart);
 196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart);
 197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 198:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
 200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma);
 201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma);
 202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
ARM GAS  /tmp/ccwHIqYH.s 			page 5


 205:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_TxISR_8BIT(UART_HandleTypeDef *huart);
 208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_TxISR_16BIT(UART_HandleTypeDef *huart);
 209:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_EndTransmit_IT(UART_HandleTypeDef *huart);
 210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_RxISR_8BIT(UART_HandleTypeDef *huart);
 211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_RxISR_16BIT(UART_HandleTypeDef *huart);
 212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @}
 214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 215:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 217:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /* Exported functions --------------------------------------------------------*/
 218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 219:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @defgroup UART_Exported_Functions UART Exported Functions
 220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
 221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 222:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 223:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group1 Initialization and de-initialization functions
 224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *  @brief    Initialization and Configuration functions
 225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *
 226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** @verbatim
 227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** ===============================================================================
 228:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             ##### Initialization and Configuration functions #####
 229:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****  ===============================================================================
 230:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
 231:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy
 232:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     in asynchronous mode.
 233:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (+) For the asynchronous mode the parameters below can be configured:
 234:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) Baud Rate
 235:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) Word Length
 236:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) Stop Bit
 237:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 238:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****              in the data register is transmitted but is changed by the parity bit.
 239:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) Hardware flow control
 240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) Receiver/transmitter modes
 241:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) Over Sampling Method
 242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) One-Bit Sampling Method
 243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (+) For the asynchronous mode, the following advanced features can be configured as well:
 244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) TX and/or RX pin level inversion
 245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) data logical level inversion
 246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) RX and TX pins swap
 247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) RX overrun detection disabling
 248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) DMA disabling on RX error
 249:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) MSB first on communication line
 250:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) auto Baud rate detection
 251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
 252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     The HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_LIN_Init()and HAL_MultiProcessor_Init()API
 253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     follow respectively the UART asynchronous, UART Half duplex, UART LIN mode
 254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     and UART multiprocessor mode configuration procedures (details for the procedures
 255:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     are available in reference manual).
 256:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** @endverbatim
 258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   Depending on the frame length defined by the M1 and M0 bits (7-bit,
 260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   8-bit or 9-bit), the possible UART formats are listed in the
 261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   following table.
ARM GAS  /tmp/ccwHIqYH.s 			page 6


 262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   Table 1. UART frame format.
 264:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     +-----------------------------------------------------------------------+
 265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |  M1 bit |  M0 bit |  PCE bit  |             UART frame                |
 266:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |    0    |    0    |    0      |    | SB |    8 bit data   | STB |     |
 268:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 269:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |    0    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |    0    |    1    |    0      |    | SB |    9 bit data   | STB |     |
 272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |    0    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 275:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |    1    |    0    |    0      |    | SB |    7 bit data   | STB |     |
 276:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 277:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |    1    |    0    |    1      |    | SB | 6 bit data | PB | STB |     |
 278:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     +-----------------------------------------------------------------------+
 279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 280:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
 281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 282:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 284:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Initialize the UART mode according to the specified
 285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and initialize the associated handle.
 286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
 287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
 288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart == NULL)
 293:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 295:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 296:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Check the parameters */
 300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 302:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
 303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 304:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Check the parameters */
 305:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_INSTANCE(huart->Instance));
 306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 308:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 313:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 316:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
ARM GAS  /tmp/ccwHIqYH.s 			page 7


 319:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 320:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init the low level hardware */
 322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->MspInitCallback(huart);
 323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
 324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 328:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Set the UART Communication parameters */
 334:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 336:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 340:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 342:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 343:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 344:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* In asynchronous mode, the following bits must be kept cleared:
 345:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
 346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
 347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 349:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 351:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 352:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 354:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 356:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 357:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Initialize the half-duplex mode according to the specified
 358:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and creates the associated handle.
 359:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
 360:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
 361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 362:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
 363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart == NULL)
 366:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check UART instance */
 371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
 372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
ARM GAS  /tmp/ccwHIqYH.s 			page 8


 376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 377:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 378:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 382:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 386:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init the low level hardware */
 387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->MspInitCallback(huart);
 388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
 389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 391:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 395:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 397:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Set the UART Communication parameters */
 399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 403:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 409:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* In half-duplex mode, the following bits must be kept cleared:
 410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
 411:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   - SCEN and IREN bits in the USART_CR3 register.*/
 412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 415:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 418:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 422:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 426:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Initialize the LIN mode according to the specified
 427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and creates the associated handle.
 428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart             UART handle.
 429:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param BreakDetectLength Specifies the LIN break detection length.
 430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        This parameter can be one of the following values:
 431:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *          @arg @ref UART_LINBREAKDETECTLENGTH_10B 10-bit break detection
 432:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *          @arg @ref UART_LINBREAKDETECTLENGTH_11B 11-bit break detection
ARM GAS  /tmp/ccwHIqYH.s 			page 9


 433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
 434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
 436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart == NULL)
 439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 442:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the LIN UART instance */
 444:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
 445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the Break detection length parameter */
 446:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
 447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 448:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* LIN mode limited to 16-bit oversampling only */
 449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 450:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* LIN mode limited to 8-bit data length */
 454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 455:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 460:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 461:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 462:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 463:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 465:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 466:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 470:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 471:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 472:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init the low level hardware */
 473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->MspInitCallback(huart);
 474:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
 475:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 477:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 479:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 482:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 483:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 484:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Set the UART Communication parameters */
 485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 486:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccwHIqYH.s 			page 10


 490:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 491:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 493:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 494:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* In LIN mode, the following bits must be kept cleared:
 496:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
 497:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   - SCEN and IREN bits in the USART_CR3 register.*/
 498:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 499:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 500:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 501:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 502:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Set the USART LIN Break detection length. */
 505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 506:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 507:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 508:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 509:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 510:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 512:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 513:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 514:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Initialize the multiprocessor mode according to the specified
 516:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and initialize the associated handle.
 517:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart        UART handle.
 518:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Address      UART node address (4-, 6-, 7- or 8-bit long).
 519:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param WakeUpMethod Specifies the UART wakeup method.
 520:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        This parameter can be one of the following values:
 521:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *          @arg @ref UART_WAKEUPMETHOD_IDLELINE WakeUp by an idle line detection
 522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *          @arg @ref UART_WAKEUPMETHOD_ADDRESSMARK WakeUp by an address mark
 523:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note  If the user resorts to idle line detection wake up, the Address parameter
 524:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        is useless and ignored by the initialization function.
 525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note  If the user resorts to address mark wake up, the address length detection
 526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        is configured by default to 4 bits only. For the UART to be able to
 527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        manage 6-, 7- or 8-bit long addresses detection, the API
 528:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
 529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        HAL_MultiProcessor_Init().
 530:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
 531:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 532:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t Wake
 533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 535:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart == NULL)
 536:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 537:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 538:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 540:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the wake up method parameter */
 541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 542:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 543:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 545:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 546:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
ARM GAS  /tmp/ccwHIqYH.s 			page 11


 547:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 548:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 549:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 550:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 551:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 552:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 553:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 554:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 555:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 556:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init the low level hardware */
 557:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->MspInitCallback(huart);
 558:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
 559:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 560:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 561:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 562:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 563:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 564:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 565:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 567:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 568:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Set the UART Communication parameters */
 569:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 570:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 571:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 572:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 573:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 574:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 575:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 576:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 577:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 578:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 579:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* In multiprocessor mode, the following bits must be kept cleared:
 580:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
 581:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
 582:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 583:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 584:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 585:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 586:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 587:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* If address mark wake up method is chosen, set the USART address node */
 588:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS)
 589:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 590:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 591:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Set the wake up method by setting the WAKE bit in the CR1 register */
 592:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 593:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 594:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 595:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 596:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 597:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 598:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 599:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 600:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 601:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 602:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief DeInitialize the UART peripheral.
 603:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
ARM GAS  /tmp/ccwHIqYH.s 			page 12


 604:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
 605:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 606:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
 607:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 608:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 609:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart == NULL)
 610:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 611:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 612:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 613:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 614:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the parameters */
 615:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 616:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 617:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 618:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 619:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 620:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 621:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->Instance->CR1 = 0x0U;
 622:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->Instance->CR2 = 0x0U;
 623:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->Instance->CR3 = 0x0U;
 624:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 625:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 626:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->MspDeInitCallback == NULL)
 627:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 628:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->MspDeInitCallback = HAL_UART_MspDeInit;
 629:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 630:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* DeInit the low level hardware */
 631:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->MspDeInitCallback(huart);
 632:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
 633:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* DeInit the low level hardware */
 634:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_MspDeInit(huart);
 635:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 636:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 637:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_RESET;
 639:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_RESET;
 640:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 641:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 642:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 643:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
 645:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 646:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 647:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 648:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Initialize the UART MSP.
 649:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
 650:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
 651:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 652:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
 653:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 654:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 655:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
 656:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 657:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 658:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             the HAL_UART_MspInit can be implemented in the user file
 659:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
 660:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
ARM GAS  /tmp/ccwHIqYH.s 			page 13


 661:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 662:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 663:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief DeInitialize the UART MSP.
 664:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
 665:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
 666:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 667:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
 668:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 669:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 670:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
 671:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 672:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 673:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             the HAL_UART_MspDeInit can be implemented in the user file
 674:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
 675:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 676:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 677:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 678:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Register a User UART Callback
 680:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         To be used instead of the weak predefined callback
 681:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart uart handle
 682:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be registered
 683:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         This parameter can be one of the following values:
 684:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 685:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 686:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 687:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 688:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 689:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 690:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 691:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 692:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_WAKEUP_CB_ID Wakeup Callback ID
 693:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 694:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 695:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  pCallback pointer to the Callback function
 696:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
 697:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 698:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef C
 699:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                                             pUART_CallbackTypeDef pCallback)
 700:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 701:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 702:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 703:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (pCallback == NULL)
 704:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 705:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 706:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 707:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 708:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 709:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 710:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
 711:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 712:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 713:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 714:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     switch (CallbackID)
 715:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 716:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 717:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->TxHalfCpltCallback = pCallback;
ARM GAS  /tmp/ccwHIqYH.s 			page 14


 718:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 719:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 720:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 721:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->TxCpltCallback = pCallback;
 722:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 723:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 724:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 725:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxHalfCpltCallback = pCallback;
 726:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 727:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 728:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 729:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxCpltCallback = pCallback;
 730:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 731:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 732:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 733:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCallback = pCallback;
 734:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 735:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 736:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 737:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->AbortCpltCallback = pCallback;
 738:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 739:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 740:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 741:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = pCallback;
 742:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 743:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 744:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 745:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = pCallback;
 746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 747:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 748:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if defined(USART_CR1_UESM)
 749:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if defined(USART_CR3_WUFIE)
 750:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_WAKEUP_CB_ID :
 751:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->WakeupCallback = pCallback;
 752:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 753:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 754:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USART_CR3_WUFIE */
 755:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USART_CR1_UESM */
 756:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 757:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 758:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 759:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 760:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 761:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 762:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 763:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 764:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 765:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       default :
 766:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 767:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 768:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         status =  HAL_ERROR;
 769:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 770:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 771:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 772:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else if (huart->gState == HAL_UART_STATE_RESET)
 773:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 774:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     switch (CallbackID)
ARM GAS  /tmp/ccwHIqYH.s 			page 15


 775:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 776:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 777:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 778:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 779:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 780:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 781:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 782:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 783:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 784:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       default :
 785:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 786:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 787:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         status =  HAL_ERROR;
 788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 789:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 790:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 791:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
 792:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 793:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 794:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 795:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     status =  HAL_ERROR;
 796:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 797:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 798:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 799:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 800:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return status;
 801:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 802:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 803:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 804:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Unregister an UART Callback
 805:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         UART callaback is redirected to the weak predefined callback
 806:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart uart handle
 807:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be unregistered
 808:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         This parameter can be one of the following values:
 809:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 810:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 811:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 812:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 813:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 814:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 815:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 816:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 817:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_WAKEUP_CB_ID Wakeup Callback ID
 818:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 819:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 820:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
 821:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 822:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_UnRegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef
 823:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 824:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 825:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 826:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
 827:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 828:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_UART_STATE_READY == huart->gState)
 829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 830:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     switch (CallbackID)
 831:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
ARM GAS  /tmp/ccwHIqYH.s 			page 16


 832:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 833:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->TxHalfCpltCallback = HAL_UART_TxHalfCpltCallback;               /* Legacy weak  TxHa
 834:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 835:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 836:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 837:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->TxCpltCallback = HAL_UART_TxCpltCallback;                       /* Legacy weak TxCpl
 838:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 839:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 840:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 841:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxHalfCpltCallback = HAL_UART_RxHalfCpltCallback;               /* Legacy weak RxHal
 842:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 843:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 844:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 845:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxCpltCallback = HAL_UART_RxCpltCallback;                       /* Legacy weak RxCpl
 846:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 847:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 848:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 849:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCallback = HAL_UART_ErrorCallback;                         /* Legacy weak Error
 850:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 851:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 852:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 853:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->AbortCpltCallback = HAL_UART_AbortCpltCallback;                 /* Legacy weak Abort
 854:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 855:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 856:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 857:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak
 858:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                                                                                   AbortTransmitCplt
 859:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 860:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 861:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 862:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = HAL_UART_AbortReceiveCpltCallback;   /* Legacy weak
 863:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                                                                                   AbortReceiveCpltC
 864:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 865:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 866:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if defined(USART_CR1_UESM)
 867:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if defined(USART_CR3_WUFIE)
 868:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_WAKEUP_CB_ID :
 869:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->WakeupCallback = HAL_UARTEx_WakeupCallback;                     /* Legacy weak Wakeu
 870:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 871:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 872:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USART_CR3_WUFIE */
 873:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USART_CR1_UESM */
 874:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 875:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;                             /* Legacy weak MspIn
 876:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 877:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 878:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 879:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;                         /* Legacy weak MspDe
 880:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 881:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 882:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       default :
 883:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 884:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 885:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         status =  HAL_ERROR;
 886:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 887:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 888:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
ARM GAS  /tmp/ccwHIqYH.s 			page 17


 889:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else if (HAL_UART_STATE_RESET == huart->gState)
 890:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 891:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     switch (CallbackID)
 892:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 893:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 894:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;
 895:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 896:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 897:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 898:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;
 899:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 900:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 901:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       default :
 902:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 903:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 904:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         status =  HAL_ERROR;
 905:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 906:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 907:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 908:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
 909:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 910:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 911:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 912:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     status =  HAL_ERROR;
 913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 914:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 915:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 916:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 917:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return status;
 918:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 919:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 920:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 921:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Register a User UART Rx Event Callback
 922:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         To be used instead of the weak predefined callback
 923:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart     Uart handle
 924:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  pCallback Pointer to the Rx Event Callback function
 925:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
 926:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 927:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_RegisterRxEventCallback(UART_HandleTypeDef *huart, pUART_RxEventCallback
 928:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 929:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 930:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 931:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (pCallback == NULL)
 932:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 933:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 934:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 935:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 936:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 937:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 938:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Process locked */
 939:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
 940:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 942:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 943:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxEventCallback = pCallback;
 944:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 945:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
ARM GAS  /tmp/ccwHIqYH.s 			page 18


 946:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 947:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 948:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 949:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     status =  HAL_ERROR;
 950:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 951:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 952:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Release Lock */
 953:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 954:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return status;
 956:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 957:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 958:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 959:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  UnRegister the UART Rx Event Callback
 960:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         UART Rx Event Callback is redirected to the weak HAL_UARTEx_RxEventCallback() predefine
 961:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart     Uart handle
 962:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
 963:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 964:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_UnRegisterRxEventCallback(UART_HandleTypeDef *huart)
 965:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 966:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 967:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 968:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Process locked */
 969:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
 970:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 971:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 972:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 973:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxEventCallback = HAL_UARTEx_RxEventCallback; /* Legacy weak UART Rx Event Callback  */
 974:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 975:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
 976:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 977:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 978:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 979:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     status =  HAL_ERROR;
 980:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 981:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 982:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Release Lock */
 983:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 984:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return status;
 985:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 986:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 987:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 988:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 989:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 990:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @}
 991:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 992:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 993:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group2 IO operation functions
 994:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief UART Transmit/Receive functions
 995:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *
 996:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** @verbatim
 997:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****  ===============================================================================
 998:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                       ##### IO operation functions #####
 999:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****  ===============================================================================
1000:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     This subsection provides a set of functions allowing to manage the UART asynchronous
1001:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     and Half duplex data transfers.
1002:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccwHIqYH.s 			page 19


1003:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) There are two mode of transfer:
1004:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****        (+) Blocking mode: The communication is performed in polling mode.
1005:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            The HAL status of all data processing is returned by the same function
1006:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            after finishing transfer.
1007:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****        (+) Non-Blocking mode: The communication is performed using Interrupts
1008:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            or DMA, These API's return the HAL status.
1009:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            The end of the data processing will be indicated through the
1010:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when
1011:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            using DMA mode.
1012:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            The HAL_UART_TxCpltCallback(), HAL_UART_RxCpltCallback() user callbacks
1013:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            will be executed respectively at the end of the transmit or Receive process
1014:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a communication error is
1015:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1016:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) Blocking mode API's are :
1017:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_Transmit()
1018:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_Receive()
1019:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1020:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) Non-Blocking mode API's with Interrupt are :
1021:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_Transmit_IT()
1022:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_Receive_IT()
1023:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_IRQHandler()
1024:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1025:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) Non-Blocking mode API's with DMA are :
1026:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_Transmit_DMA()
1027:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_Receive_DMA()
1028:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_DMAPause()
1029:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_DMAResume()
1030:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_DMAStop()
1031:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1032:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) A set of Transfer Complete Callbacks are provided in Non_Blocking mode:
1033:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_TxHalfCpltCallback()
1034:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_TxCpltCallback()
1035:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_RxHalfCpltCallback()
1036:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_RxCpltCallback()
1037:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_ErrorCallback()
1038:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1039:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) Non-Blocking mode transfers could be aborted using Abort API's :
1040:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_Abort()
1041:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit()
1042:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_AbortReceive()
1043:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_Abort_IT()
1044:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit_IT()
1045:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_AbortReceive_IT()
1046:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1047:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) For Abort services based on interrupts (HAL_UART_Abortxxx_IT), a set of Abort Complete Call
1048:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_AbortCpltCallback()
1049:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_AbortTransmitCpltCallback()
1050:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_AbortReceiveCpltCallback()
1051:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1052:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) A Rx Event Reception Callback (Rx event notification) is available for Non_Blocking modes o
1053:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         reception services:
1054:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UARTEx_RxEventCallback()
1055:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if defined(USART_CR1_UESM)
1056:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1057:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) Wakeup from Stop mode Callback:
1058:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UARTEx_WakeupCallback()
1059:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif
ARM GAS  /tmp/ccwHIqYH.s 			page 20


1060:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1061:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) In Non-Blocking mode transfers, possible errors are split into 2 categories.
1062:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         Errors are handled as follows :
1063:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****        (+) Error is considered as Recoverable and non blocking : Transfer could go till end, but er
1064:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            to be evaluated by user : this concerns Frame Error, Parity Error or Noise Error
1065:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            in Interrupt mode reception .
1066:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            Received character is then retrieved and stored in Rx buffer, Error code is set to allow
1067:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            to identify error type, and HAL_UART_ErrorCallback() user callback is executed.
1068:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            Transfer is kept ongoing on UART side.
1069:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            If user wants to abort it, Abort services should be called by user.
1070:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****        (+) Error is considered as Blocking : Transfer could not be completed properly and is aborte
1071:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            This concerns Overrun Error In Interrupt mode reception and all errors in DMA mode.
1072:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            Error code is set to allow user to identify error type, and HAL_UART_ErrorCallback()
1073:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            user callback is executed.
1074:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1075:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     -@- In the Half duplex communication, it is forbidden to run the transmit
1076:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         and receive process in parallel, the UART state HAL_UART_STATE_BUSY_TX_RX can't be useful.
1077:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1078:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** @endverbatim
1079:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
1080:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1081:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1082:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1083:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Send an amount of data in blocking mode.
1084:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1085:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1086:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         of u16 provided through pData.
1087:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart   UART handle.
1088:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param pData   Pointer to data buffer (u8 or u16 data elements).
1089:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Size    Amount of data elements (u8 or u16) to be sent.
1090:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Timeout Timeout duration.
1091:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1092:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1093:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint3
1094:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1095:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint8_t  *pdata8bits;
1096:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t *pdata16bits;
1097:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t tickstart;
1098:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1099:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
1101:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return  HAL_ERROR;
1105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_LOCK(huart);
1108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1110:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
1111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init tickstart for timeout management */
1113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     tickstart = HAL_GetTick();
1114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferSize  = Size;
1116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = Size;
ARM GAS  /tmp/ccwHIqYH.s 			page 21


1117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
1119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
1120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata8bits  = NULL;
1122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
1123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
1125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata8bits  = pData;
1127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata16bits = NULL;
1128:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     while (huart->TxXferCount > 0U)
1133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
1135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         return HAL_TIMEOUT;
1137:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (pdata8bits == NULL)
1139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
1141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pdata16bits++;
1142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       else
1144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
1146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pdata8bits++;
1147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->TxXferCount--;
1149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
1152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return HAL_TIMEOUT;
1154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1156:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* At end of Tx process, restore huart->gState to Ready */
1157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
1158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_OK;
1160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
1162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_BUSY;
1164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1168:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Receive an amount of data in blocking mode.
1169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1170:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1171:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         of u16 available through pData.
1172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart   UART handle.
1173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param pData   Pointer to data buffer (u8 or u16 data elements).
ARM GAS  /tmp/ccwHIqYH.s 			page 22


1174:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Size    Amount of data elements (u8 or u16) to be received.
1175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Timeout Timeout duration.
1176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1177:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32
1179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint8_t  *pdata8bits;
1181:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t *pdata16bits;
1182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t uhMask;
1183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t tickstart;
1184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
1187:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1189:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1190:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return  HAL_ERROR;
1191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_LOCK(huart);
1194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
1197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1198:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init tickstart for timeout management */
1200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     tickstart = HAL_GetTick();
1201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferSize  = Size;
1203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount = Size;
1204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1205:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Computation of UART mask to apply to RDR register */
1206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_MASK_COMPUTATION(huart);
1207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
1208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1209:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
1210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
1211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata8bits  = NULL;
1213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
1214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1215:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
1216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1217:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata8bits  = pData;
1218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata16bits = NULL;
1219:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1222:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1223:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* as long as data have to be received */
1224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     while (huart->RxXferCount > 0U)
1225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
1227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1228:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         return HAL_TIMEOUT;
1229:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1230:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (pdata8bits == NULL)
ARM GAS  /tmp/ccwHIqYH.s 			page 23


1231:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1232:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
1233:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pdata16bits++;
1234:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1235:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       else
1236:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1237:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
1238:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pdata8bits++;
1239:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxXferCount--;
1241:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
1244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
1245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_OK;
1247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
1249:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1250:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_BUSY;
1251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1255:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Send an amount of data in interrupt mode.
1256:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         of u16 provided through pData.
1259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
1260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
1261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Size  Amount of data elements (u8 or u16) to be sent.
1262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1264:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1266:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
1268:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1269:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return HAL_ERROR;
1272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_LOCK(huart);
1275:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1276:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->pTxBuffPtr  = pData;
1277:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferSize  = Size;
1278:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = Size;
1279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxISR       = NULL;
1280:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1282:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
1283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1284:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Set the Tx ISR function pointer according to the data word length */
1285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
1286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->TxISR = UART_TxISR_16BIT;
ARM GAS  /tmp/ccwHIqYH.s 			page 24


1288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
1290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->TxISR = UART_TxISR_8BIT;
1292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1293:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1295:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1296:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Enable the Transmit Data Register Empty interrupt */
1297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
1298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_OK;
1300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
1302:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_BUSY;
1304:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1305:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1308:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Receive an amount of data in interrupt mode.
1309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         of u16 available through pData.
1312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
1313:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
1314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Size  Amount of data elements (u8 or u16) to be received.
1315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1316:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1319:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1320:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
1321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return HAL_ERROR;
1325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_LOCK(huart);
1328:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Set Reception type to Standard reception */
1330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Check that USART RTOEN bit is set */
1333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
1334:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Enable the UART Receiver Timeout Interrupt */
1336:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
1337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return (UART_Start_Receive_IT(huart, pData, Size));
1340:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
1342:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1343:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_BUSY;
1344:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
ARM GAS  /tmp/ccwHIqYH.s 			page 25


1345:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Send an amount of data in DMA mode.
1349:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1351:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         of u16 provided through pData.
1352:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
1353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
1354:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Size  Amount of data elements (u8 or u16) to be sent.
1355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1356:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1357:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1358:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1359:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1360:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
1361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1362:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return HAL_ERROR;
1365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1366:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_LOCK(huart);
1368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->pTxBuffPtr  = pData;
1370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferSize  = Size;
1371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = Size;
1372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
1375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1377:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1378:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA transfer complete callback */
1379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
1380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA Half transfer complete callback */
1382:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
1383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the DMA error callback */
1385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmatx->XferErrorCallback = UART_DMAError;
1386:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the DMA abort callback */
1388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Enable the UART transmit DMA channel */
1391:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->
1392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Set error code to DMA */
1394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_DMA;
1395:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         __HAL_UNLOCK(huart);
1397:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Restore huart->gState to ready */
1399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->gState = HAL_UART_STATE_READY;
1400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         return HAL_ERROR;
ARM GAS  /tmp/ccwHIqYH.s 			page 26


1402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1403:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear the TC flag in the ICR register */
1405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
1406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1409:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
1410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     in the UART CR3 register */
1411:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_OK;
1414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1415:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
1416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_BUSY;
1418:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1422:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Receive an amount of data in DMA mode.
1423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   When the UART parity is enabled (PCE = 1), the received data contain
1424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         the parity bit (MSB position).
1425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1426:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         of u16 available through pData.
1428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
1429:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
1430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Size  Amount of data elements (u8 or u16) to be received.
1431:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1432:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
1437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return HAL_ERROR;
1441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1442:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_LOCK(huart);
1444:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Set Reception type to Standard reception */
1446:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1448:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Check that USART RTOEN bit is set */
1449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
1450:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Enable the UART Receiver Timeout Interrupt */
1452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
1453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1455:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return (UART_Start_Receive_DMA(huart, pData, Size));
1456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
1458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
ARM GAS  /tmp/ccwHIqYH.s 			page 27


1459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_BUSY;
1460:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1461:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1462:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1463:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Pause the DMA Transfer.
1465:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
1466:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
1469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1470:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef gstate = huart->gState;
1471:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
1472:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
1474:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1475:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
1476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
1477:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Disable the UART DMA Tx request */
1479:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
1482:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
1483:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1484:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
1485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
1486:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Disable the UART DMA Rx request */
1489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1490:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1491:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
1493:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1494:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
1495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1496:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1497:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1498:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Resume the DMA Transfer.
1499:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
1500:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1501:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1502:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
1503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
1505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1506:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
1507:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1508:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Enable the UART DMA Tx request */
1509:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1510:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
1512:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1513:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear the Overrun flag before resuming the Rx transfer */
1514:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
1515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccwHIqYH.s 			page 28


1516:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
1517:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
1518:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
1519:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1520:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Enable the UART DMA Rx request */
1521:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1523:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1524:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
1525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
1527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1528:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1530:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Stop the DMA Transfer.
1531:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
1532:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
1535:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1536:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* The Lock is not implemented on this API to allow the user application
1537:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      to call the HAL UART API under callbacks HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1538:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
1539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
1540:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
1541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      the stream and the corresponding call back is executed. */
1542:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1543:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef gstate = huart->gState;
1544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
1545:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1546:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
1547:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
1548:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
1549:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1550:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1551:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1552:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Tx channel */
1553:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1554:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1555:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
1556:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1557:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
1558:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
1559:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Set error code to DMA */
1560:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1561:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1562:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           return HAL_TIMEOUT;
1563:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
1564:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1565:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1567:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_EndTxTransfer(huart);
1568:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1569:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1570:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
1571:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
1572:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
ARM GAS  /tmp/ccwHIqYH.s 			page 29


1573:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1574:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1575:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1576:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Rx channel */
1577:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1578:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1579:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
1580:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1581:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
1582:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
1583:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Set error code to DMA */
1584:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1585:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1586:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           return HAL_TIMEOUT;
1587:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
1588:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1589:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1590:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1591:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_EndRxTransfer(huart);
1592:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1593:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1594:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
1595:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1596:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1597:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1598:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Abort ongoing transfers (blocking mode).
1599:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
1600:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1601:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         This procedure performs following operations :
1602:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1603:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1604:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1605:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Set handle State to READY
1606:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1607:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1608:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1609:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
1610:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1611:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1612:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
1613:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1614:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1615:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
1616:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
1617:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1618:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
1619:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1620:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1621:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1622:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1623:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1624:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1625:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1626:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1627:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1628:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1629:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
ARM GAS  /tmp/ccwHIqYH.s 			page 30


1630:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1631:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1632:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1633:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
1634:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1635:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
1636:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
1637:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Set error code to DMA */
1638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1639:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1640:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           return HAL_TIMEOUT;
1641:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
1642:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1643:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1645:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1646:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1647:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1648:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1649:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1650:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1651:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
1652:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1653:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1654:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1655:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1656:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
1657:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1658:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
1659:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1660:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
1661:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
1662:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Set error code to DMA */
1663:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1664:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1665:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           return HAL_TIMEOUT;
1666:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
1667:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1668:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1669:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1670:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1671:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Reset Tx and Rx transfer counters */
1672:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxXferCount = 0U;
1673:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
1674:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1675:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
1676:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
1677:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1678:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Discard the received data */
1680:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
1681:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1682:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
1683:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
1684:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
1685:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1686:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccwHIqYH.s 			page 31


1687:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
1688:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1689:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
1690:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1691:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1692:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1693:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (blocking mode).
1694:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
1695:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
1696:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         This procedure performs following operations :
1697:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
1698:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1699:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1700:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Set handle State to READY
1701:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1702:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1703:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1704:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
1705:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1706:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
1707:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
1708:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1709:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1710:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1711:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1712:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1713:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1714:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1715:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1716:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1717:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1718:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1719:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1720:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1721:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
1722:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1723:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
1724:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
1725:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Set error code to DMA */
1726:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1727:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1728:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           return HAL_TIMEOUT;
1729:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
1730:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1731:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1732:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1733:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1734:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Reset Tx transfer counter */
1735:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxXferCount = 0U;
1736:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1737:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1738:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Restore huart->gState to Ready */
1739:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
1740:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1741:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
1742:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1743:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccwHIqYH.s 			page 32


1744:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1745:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (blocking mode).
1746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
1747:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
1748:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         This procedure performs following operations :
1749:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
1750:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1751:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1752:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Set handle State to READY
1753:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1754:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1755:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1756:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
1757:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1758:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1759:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
1760:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1761:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1762:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
1763:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
1764:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1765:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
1766:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1767:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1768:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1769:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1770:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1771:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1772:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1773:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
1774:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1775:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1776:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1777:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1778:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
1779:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1780:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
1781:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1782:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
1783:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
1784:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Set error code to DMA */
1785:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1786:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1787:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           return HAL_TIMEOUT;
1788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
1789:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1790:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1791:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1792:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1793:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Reset Rx transfer counter */
1794:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
1795:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1796:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
1797:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
1798:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1799:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Discard the received data */
1800:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
ARM GAS  /tmp/ccwHIqYH.s 			page 33


1801:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1802:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
1803:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
1804:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1805:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1806:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
1807:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1808:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1809:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1810:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Abort ongoing transfers (Interrupt mode).
1811:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
1812:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1813:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         This procedure performs following operations :
1814:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1815:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1816:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1817:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Set handle State to READY
1818:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1819:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1820:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1821:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1822:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1823:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
1824:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1825:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t abortcplt = 1U;
1826:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1827:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable interrupts */
1828:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
1829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1830:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1831:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
1832:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
1833:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1834:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
1835:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1836:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1837:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks sh
1838:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      before any call to DMA Abort functions */
1839:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* DMA Tx Handle is valid */
1840:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->hdmatx != NULL)
1841:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1842:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
1843:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****        Otherwise, set it to NULL */
1844:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1845:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1846:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
1847:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1848:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
1849:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1850:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1851:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1852:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1853:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* DMA Rx Handle is valid */
1854:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->hdmarx != NULL)
1855:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1856:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
1857:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****        Otherwise, set it to NULL */
ARM GAS  /tmp/ccwHIqYH.s 			page 34


1858:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1859:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1860:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
1861:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1862:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
1863:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1864:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
1865:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1866:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1867:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1868:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1869:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1870:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1871:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Disable DMA Tx at UART level */
1872:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1873:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1874:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
1875:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1876:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1877:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* UART Tx DMA Abort callback has already been initialised :
1878:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1879:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1880:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Abort DMA TX */
1881:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
1882:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1883:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback = NULL;
1884:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1885:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       else
1886:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1887:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         abortcplt = 0U;
1888:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1889:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1890:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1891:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1892:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1893:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1894:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1895:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1896:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1897:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
1898:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1899:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1900:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* UART Rx DMA Abort callback has already been initialised :
1901:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1902:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1903:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Abort DMA RX */
1904:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
1905:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1906:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback = NULL;
1907:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         abortcplt = 1U;
1908:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1909:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       else
1910:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1911:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         abortcplt = 0U;
1912:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1914:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
ARM GAS  /tmp/ccwHIqYH.s 			page 35


1915:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1916:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* if no DMA abort complete callback execution is required => call user Abort Complete callback *
1917:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (abortcplt == 1U)
1918:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1919:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Reset Tx and Rx transfer counters */
1920:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = 0U;
1921:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount = 0U;
1922:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1923:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear ISR function pointers */
1924:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxISR = NULL;
1925:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxISR = NULL;
1926:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1927:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Reset errorCode */
1928:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1929:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1930:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear the Error flags in the ICR register */
1931:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF
1932:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1933:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1934:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Discard the received data */
1935:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
1936:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1937:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Restore huart->gState and huart->RxState to Ready */
1938:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState  = HAL_UART_STATE_READY;
1939:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
1940:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1942:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1943:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
1944:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Call registered Abort complete callback */
1945:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->AbortCpltCallback(huart);
1946:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
1947:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Call legacy weak Abort complete callback */
1948:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UART_AbortCpltCallback(huart);
1949:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1950:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1951:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1952:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
1953:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1954:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1956:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (Interrupt mode).
1957:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
1958:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
1959:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         This procedure performs following operations :
1960:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
1961:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1962:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1963:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Set handle State to READY
1964:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1965:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1966:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1967:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1968:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1969:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
1970:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1971:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable interrupts */
ARM GAS  /tmp/ccwHIqYH.s 			page 36


1972:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
1973:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1974:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1975:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1976:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1977:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1978:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1979:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
1980:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1981:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1982:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
1983:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1984:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
1985:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1986:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Abort DMA TX */
1987:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
1988:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1989:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
1990:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback(huart->hdmatx);
1991:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1992:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1993:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
1994:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1995:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Reset Tx transfer counter */
1996:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->TxXferCount = 0U;
1997:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1998:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Clear TxISR function pointers */
1999:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->TxISR = NULL;
2000:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2001:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Restore huart->gState to Ready */
2002:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_READY;
2003:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2004:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
2005:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2006:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Call registered Abort Transmit Complete Callback */
2007:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->AbortTransmitCpltCallback(huart);
2008:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
2009:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Call legacy weak Abort Transmit Complete Callback */
2010:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       HAL_UART_AbortTransmitCpltCallback(huart);
2011:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2012:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2013:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2014:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
2015:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2016:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Reset Tx transfer counter */
2017:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = 0U;
2018:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2019:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear TxISR function pointers */
2020:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxISR = NULL;
2021:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2022:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2023:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Restore huart->gState to Ready */
2024:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
2025:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2026:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2027:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2028:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Call registered Abort Transmit Complete Callback */
ARM GAS  /tmp/ccwHIqYH.s 			page 37


2029:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->AbortTransmitCpltCallback(huart);
2030:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
2031:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Call legacy weak Abort Transmit Complete Callback */
2032:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UART_AbortTransmitCpltCallback(huart);
2033:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2034:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2035:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2036:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
2037:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2038:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2039:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2040:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (Interrupt mode).
2041:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2042:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
2043:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         This procedure performs following operations :
2044:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
2045:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2046:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
2047:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Set handle State to READY
2048:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
2049:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
2050:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
2051:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
2052:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2053:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
2054:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2055:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2056:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
2057:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
2058:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2059:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
2060:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
2061:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2062:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
2063:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2064:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2065:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
2066:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
2067:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2068:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
2069:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2070:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
2071:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmarx != NULL)
2072:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2073:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
2074:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2075:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
2076:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2077:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Abort DMA RX */
2078:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
2079:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
2080:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
2081:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback(huart->hdmarx);
2082:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
2083:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2084:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
2085:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
ARM GAS  /tmp/ccwHIqYH.s 			page 38


2086:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Reset Rx transfer counter */
2087:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxXferCount = 0U;
2088:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2089:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Clear RxISR function pointer */
2090:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->pRxBuffPtr = NULL;
2091:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2092:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Clear the Error flags in the ICR register */
2093:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_F
2094:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2095:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Discard the received data */
2096:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
2097:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2098:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Restore huart->RxState to Ready */
2099:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
2100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
2101:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
2103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Call registered Abort Receive Complete Callback */
2105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->AbortReceiveCpltCallback(huart);
2106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
2107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Call legacy weak Abort Receive Complete Callback */
2108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       HAL_UART_AbortReceiveCpltCallback(huart);
2109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2110:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
2113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Reset Rx transfer counter */
2115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount = 0U;
2116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear RxISR function pointer */
2118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->pRxBuffPtr = NULL;
2119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear the Error flags in the ICR register */
2121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF
2122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Restore huart->RxState to Ready */
2124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
2125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
2126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2128:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Call registered Abort Receive Complete Callback */
2130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->AbortReceiveCpltCallback(huart);
2131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
2132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Call legacy weak Abort Receive Complete Callback */
2133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UART_AbortReceiveCpltCallback(huart);
2134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2137:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
2138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Handle UART interrupt request.
2142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
ARM GAS  /tmp/ccwHIqYH.s 			page 39


2143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
2146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->ISR);
2148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
2149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
2150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t errorflags;
2152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t errorcode;
2153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* If no error occurs */
2155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | 
2156:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (errorflags == 0U)
2157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* UART in mode Receiver ---------------------------------------------------*/
2159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (((isrflags & USART_ISR_RXNE) != 0U)
2160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         && ((cr1its & USART_CR1_RXNEIE) != 0U))
2161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (huart->RxISR != NULL)
2163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
2164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxISR(huart);
2165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
2166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return;
2167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2168:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2170:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* If some errors occur */
2171:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((errorflags != 0U)
2172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       && (((cr3its & USART_CR3_EIE) != 0U)
2173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
2174:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* UART parity error interrupt occurred -------------------------------------*/
2176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
2177:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
2179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_PE;
2181:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* UART frame error interrupt occurred --------------------------------------*/
2184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
2185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
2187:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_FE;
2189:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2190:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* UART noise error interrupt occurred --------------------------------------*/
2192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
2193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
2195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_NE;
2197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2198:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* UART Over-Run interrupt occurred -----------------------------------------*/
ARM GAS  /tmp/ccwHIqYH.s 			page 40


2200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (((isrflags & USART_ISR_ORE) != 0U)
2201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
2202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             ((cr3its & USART_CR3_EIE) != 0U)))
2203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
2205:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_ORE;
2207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2209:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* UART Receiver Timeout interrupt occurred ---------------------------------*/
2210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
2211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
2213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_RTO;
2215:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2217:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Call UART Error Call back function if need be ----------------------------*/
2218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->ErrorCode != HAL_UART_ERROR_NONE)
2219:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* UART in mode Receiver --------------------------------------------------*/
2221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (((isrflags & USART_ISR_RXNE) != 0U)
2222:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           && ((cr1its & USART_CR1_RXNEIE) != 0U))
2223:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
2224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         if (huart->RxISR != NULL)
2225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
2226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->RxISR(huart);
2227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
2228:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
2229:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2230:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* If Error is to be considered as blocking :
2231:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           - Receiver Timeout error in Reception
2232:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           - Overrun error in Reception
2233:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           - any error occurs in DMA mode reception
2234:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       */
2235:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       errorcode = huart->ErrorCode;
2236:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
2237:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
2238:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
2239:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Blocking error : transfer is aborted
2240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            Set the UART state ready to be able to start again the process,
2241:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
2242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         UART_EndRxTransfer(huart);
2243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Disable the UART DMA Rx request if enabled */
2245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
2246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
2247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
2248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2249:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Abort the UART DMA Rx channel */
2250:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           if (huart->hdmarx != NULL)
2251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           {
2252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             /* Set the UART DMA Abort callback :
2253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
2254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
2255:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2256:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             /* Abort DMA RX */
ARM GAS  /tmp/ccwHIqYH.s 			page 41


2257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
2258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             {
2259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****               /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
2260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****               huart->hdmarx->XferAbortCallback(huart->hdmarx);
2261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             }
2262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           }
2263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           else
2264:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           {
2265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             /* Call user error callback */
2266:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             /*Call registered error callback*/
2268:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             huart->ErrorCallback(huart);
2269:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
2270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             /*Call legacy weak error callback*/
2271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             HAL_UART_ErrorCallback(huart);
2272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           }
2275:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
2276:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         else
2277:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
2278:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Call user error callback */
2279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2280:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /*Call registered error callback*/
2281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->ErrorCallback(huart);
2282:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
2283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /*Call legacy weak error callback*/
2284:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           HAL_UART_ErrorCallback(huart);
2285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
2287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
2288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       else
2289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
2290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Non Blocking error : transfer could go on.
2291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            Error is notified to user through user error callback */
2292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2293:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /*Call registered error callback*/
2294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCallback(huart);
2295:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
2296:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /*Call legacy weak error callback*/
2297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         HAL_UART_ErrorCallback(huart);
2298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_NONE;
2300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
2301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2302:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return;
2303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2304:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   } /* End if some error occurs */
2305:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check current reception Mode :
2307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      If Reception till IDLE event has been selected : */
2308:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
2309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       && ((isrflags & USART_ISR_IDLE) != 0U)
2310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       && ((cr1its & USART_ISR_IDLE) != 0U))
2311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
2313:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccwHIqYH.s 			page 42


2314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Check if DMA mode is enabled in UART */
2315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
2316:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* DMA mode enabled */
2318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Check received length : If all expected data are received, do nothing,
2319:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          (DMA cplt callback will be called).
2320:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          Otherwise, if at least one data has already been received, IDLE event is to be notified to
2321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
2322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if ((nb_remaining_rx_data > 0U)
2323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           && (nb_remaining_rx_data < huart->RxXferSize))
2324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
2325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Reception is not complete */
2326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxXferCount = nb_remaining_rx_data;
2327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2328:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* In Normal mode, end DMA xfer and HAL UART Rx process*/
2329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
2330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
2331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
2332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
2333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
2334:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
2336:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****              in the UART CR3 register */
2337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
2338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* At end of Rx process, restore huart->RxState to Ready */
2340:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
2341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
2342:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2343:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
2344:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2345:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Last bytes received, so no need as the abort is immediate */
2346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           (void)HAL_DMA_Abort(huart->hdmarx);
2347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
2348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2349:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /*Call registered Rx Event callback*/
2350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
2351:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
2352:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /*Call legacy weak Rx Event callback*/
2353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
2354:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
2355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
2356:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return;
2357:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2358:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
2359:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2360:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* DMA mode not enabled */
2361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Check received length : If all expected data are received, do nothing.
2362:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          Otherwise, if at least one data has already been received, IDLE event is to be notified to
2363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
2364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if ((huart->RxXferCount > 0U)
2365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           && (nb_rx_data > 0U))
2366:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
2367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Disable the UART Parity Error Interrupt and RXNE interrupts */
2368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
2369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
ARM GAS  /tmp/ccwHIqYH.s 			page 43


2371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
2372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Rx process is completed, restore huart->RxState to Ready */
2374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
2375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
2376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2377:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Clear RxISR function pointer */
2378:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxISR = NULL;
2379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
2381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2382:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /*Call registered Rx complete callback*/
2383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxEventCallback(huart, nb_rx_data);
2384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
2385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /*Call legacy weak Rx Event callback*/
2386:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
2387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
2388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
2389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return;
2390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2391:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if defined(USART_CR1_UESM)
2393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if defined(USART_CR3_WUFIE)
2394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2395:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
2396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
2397:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
2399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* UART Rx state is not reset as a reception process might be ongoing.
2401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****        If UART handle state fields need to be reset to READY, this could be done in Wakeup callback
2402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2403:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Call registered Wakeup Callback */
2405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->WakeupCallback(huart);
2406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
2407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Call legacy weak Wakeup Callback */
2408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UARTEx_WakeupCallback(huart);
2409:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return;
2411:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USART_CR3_WUFIE */
2413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USART_CR1_UESM */
2414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2415:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* UART in mode Transmitter ------------------------------------------------*/
2416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (((isrflags & USART_ISR_TXE) != 0U)
2417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       && ((cr1its & USART_CR1_TXEIE) != 0U))
2418:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->TxISR != NULL)
2420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->TxISR(huart);
2422:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return;
2424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2426:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* UART in mode Transmitter (transmission end) -----------------------------*/
2427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
ARM GAS  /tmp/ccwHIqYH.s 			page 44


2428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2429:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_EndTransmit_IT(huart);
2430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return;
2431:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2432:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Tx Transfer completed callback.
2437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
2438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
2441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2442:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
2444:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2446:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             the HAL_UART_TxCpltCallback can be implemented in the user file.
2447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
2448:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2450:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Tx Half Transfer completed callback.
2452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2455:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
2456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
2459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2460:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2461:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
2462:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
2463:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2465:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2466:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Rx Transfer completed callback.
2467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2470:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
2471:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2472:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
2474:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2475:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             the HAL_UART_RxCpltCallback can be implemented in the user file.
2477:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
2478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2479:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Rx Half Transfer completed callback.
2482:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2483:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2484:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
ARM GAS  /tmp/ccwHIqYH.s 			page 45


2485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
2486:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
2489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2490:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2491:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
2492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
2493:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2494:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2496:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  UART error callback.
2497:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2498:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2499:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2500:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
2501:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2502:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
2504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2506:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             the HAL_UART_ErrorCallback can be implemented in the user file.
2507:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
2508:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2509:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2510:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2512:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2513:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2514:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
2516:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2517:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2518:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
2519:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2520:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2521:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             the HAL_UART_AbortCpltCallback can be implemented in the user file.
2522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
2523:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2524:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2528:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2530:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
2531:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2532:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
2534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2535:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2536:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
2537:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
2538:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2540:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  UART Abort Receive Complete callback.
ARM GAS  /tmp/ccwHIqYH.s 			page 46


2542:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2543:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2545:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
2546:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2547:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2548:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
2549:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2550:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2551:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
2552:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
2553:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2554:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2555:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2556:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Reception Event Callback (Rx event notification called after use of advanced reception 
2557:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle
2558:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  Size  Number of data available in application reception buffer (indicates a position in
2559:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *               reception buffer until which, data are available)
2560:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2561:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2562:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
2563:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2564:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2565:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
2566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(Size);
2567:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2568:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2569:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             the HAL_UARTEx_RxEventCallback can be implemented in the user file.
2570:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
2571:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2572:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2573:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if defined(USART_CR1_UESM)
2574:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2575:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief UART wakeup from Stop mode callback.
2576:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
2577:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2578:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2579:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
2580:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2581:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2582:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
2583:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2584:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2585:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             the HAL_UARTEx_WakeupCallback can be implemented in the user file.
2586:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
2587:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2588:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2589:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USART_CR1_UESM */
2590:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2591:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @}
2592:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2593:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2594:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group3 Peripheral Control functions
2595:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *  @brief   UART control functions
2596:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *
2597:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** @verbatim
2598:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****  ===============================================================================
ARM GAS  /tmp/ccwHIqYH.s 			page 47


2599:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                       ##### Peripheral Control functions #####
2600:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****  ===============================================================================
2601:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
2602:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     This subsection provides a set of functions allowing to control the UART.
2603:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) HAL_UART_ReceiverTimeout_Config() API allows to configure the receiver timeout value on th
2604:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) HAL_UART_EnableReceiverTimeout() API enables the receiver timeout feature
2605:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) HAL_UART_DisableReceiverTimeout() API disables the receiver timeout feature
2606:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) HAL_MultiProcessor_EnableMuteMode() API enables mute mode
2607:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) HAL_MultiProcessor_DisableMuteMode() API disables mute mode
2608:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) HAL_MultiProcessor_EnterMuteMode() API enters mute mode
2609:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) UART_SetConfig() API configures the UART peripheral
2610:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) UART_AdvFeatureConfig() API optionally configures the UART advanced features
2611:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) UART_CheckIdleState() API ensures that TEACK and/or REACK are set after initialization
2612:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) HAL_HalfDuplex_EnableTransmitter() API disables receiver and enables transmitter
2613:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) HAL_HalfDuplex_EnableReceiver() API disables transmitter and enables receiver
2614:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) HAL_LIN_SendBreak() API transmits the break characters
2615:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** @endverbatim
2616:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
2617:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2618:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2619:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2620:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Update on the fly the receiver timeout value in RTOR register.
2621:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2622:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *                    the configuration information for the specified UART module.
2623:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
2624:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *                     value must be less or equal to 0x0FFFFFFFF.
2625:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2626:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2627:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
2628:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2629:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
2630:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
2631:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2632:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2633:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2634:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Enable the UART receiver timeout feature.
2635:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2636:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *                    the configuration information for the specified UART module.
2637:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
2638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2639:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
2640:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2641:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
2642:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2643:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Process Locked */
2644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_LOCK(huart);
2645:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2646:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY;
2647:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2648:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Set the USART RTOEN bit */
2649:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
2650:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2651:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
2652:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2653:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Process Unlocked */
2654:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UNLOCK(huart);
2655:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccwHIqYH.s 			page 48


2656:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_OK;
2657:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2658:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
2659:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2660:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_BUSY;
2661:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2662:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2663:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2664:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2665:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Disable the UART receiver timeout feature.
2666:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2667:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *                    the configuration information for the specified UART module.
2668:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
2669:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2670:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DisableReceiverTimeout(UART_HandleTypeDef *huart)
2671:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2672:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
2673:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2674:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Process Locked */
2675:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_LOCK(huart);
2676:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2677:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY;
2678:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear the USART RTOEN bit */
2680:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
2681:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2682:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
2683:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2684:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Process Unlocked */
2685:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UNLOCK(huart);
2686:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2687:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_OK;
2688:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2689:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
2690:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2691:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_BUSY;
2692:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2693:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2694:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2695:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2696:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Enable UART in mute mode (does not mean UART enters mute mode;
2697:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         to enter mute mode, HAL_MultiProcessor_EnterMuteMode() API must be called).
2698:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2699:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
2700:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2701:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_EnableMuteMode(UART_HandleTypeDef *huart)
2702:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2703:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
2704:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2705:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2706:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2707:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Enable USART mute mode by setting the MME bit in the CR1 register */
2708:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_MME);
2709:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2710:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2711:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2712:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
ARM GAS  /tmp/ccwHIqYH.s 			page 49


2713:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2714:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2715:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2716:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Disable UART mute mode (does not mean the UART actually exits mute mode
2717:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         as it may not have been in mute mode at this very moment).
2718:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2719:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
2720:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2721:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_DisableMuteMode(UART_HandleTypeDef *huart)
2722:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2723:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
2724:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2725:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2726:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2727:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable USART mute mode by clearing the MME bit in the CR1 register */
2728:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_MME);
2729:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2730:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2731:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2732:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
2733:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2734:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2735:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2736:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Enter UART mute mode (means UART actually enters mute mode).
2737:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note  To exit from mute mode, HAL_MultiProcessor_DisableMuteMode() API must be called.
2738:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
2739:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2740:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2741:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** void HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
2742:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2743:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_MUTE_MODE_REQUEST);
2744:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2745:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2747:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Enable the UART transmitter and disable the UART receiver.
2748:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2749:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
2750:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2751:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
2752:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2753:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
2754:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2755:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2756:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Clear TE and RE bits */
2757:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
2758:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2759:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
2760:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_TE);
2761:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2762:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2763:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2764:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2765:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2766:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
2767:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2768:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2769:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
ARM GAS  /tmp/ccwHIqYH.s 			page 50


2770:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Enable the UART receiver and disable the UART transmitter.
2771:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2772:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status.
2773:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2774:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
2775:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2776:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
2777:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2778:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2779:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Clear TE and RE bits */
2780:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
2781:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2782:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
2783:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_RE);
2784:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2785:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2786:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2787:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2789:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
2790:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2791:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2792:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2793:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2794:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Transmit break characters.
2795:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2796:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
2797:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2798:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
2799:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2800:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the parameters */
2801:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
2802:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2803:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
2804:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2805:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2806:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2807:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Send break characters */
2808:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_SENDBREAK_REQUEST);
2809:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2810:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2811:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2812:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2813:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2814:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
2815:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2816:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2817:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2818:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @}
2819:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2820:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2821:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group4 Peripheral State and Error functions
2822:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *  @brief   UART Peripheral State functions
2823:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *
2824:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** @verbatim
2825:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   ==============================================================================
2826:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             ##### Peripheral State and Error functions #####
ARM GAS  /tmp/ccwHIqYH.s 			page 51


2827:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   ==============================================================================
2828:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
2829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     This subsection provides functions allowing to :
2830:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (+) Return the UART handle state.
2831:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (+) Return the UART handle error code
2832:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2833:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** @endverbatim
2834:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
2835:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2836:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2837:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2838:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Return the UART handle state.
2839:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2840:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *               the configuration information for the specified UART.
2841:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL state
2842:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2843:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
2844:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2845:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t temp1;
2846:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t temp2;
2847:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   temp1 = huart->gState;
2848:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   temp2 = huart->RxState;
2849:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2850:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return (HAL_UART_StateTypeDef)(temp1 | temp2);
2851:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2852:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2853:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2854:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Return the UART handle error code.
2855:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2856:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *               the configuration information for the specified UART.
2857:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval UART Error Code
2858:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2859:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
2860:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2861:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return huart->ErrorCode;
2862:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2863:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2864:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @}
2865:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2866:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2867:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2868:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @}
2869:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2870:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2871:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @defgroup UART_Private_Functions UART Private Functions
2872:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
2873:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2874:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2875:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2876:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Initialize the callbacks to their default values.
2877:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2878:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval none
2879:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2880:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2881:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
2882:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2883:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Init the UART Callback settings */
ARM GAS  /tmp/ccwHIqYH.s 			page 52


2884:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltC
2885:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallb
2886:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltC
2887:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallb
2888:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallba
2889:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCa
2890:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransm
2891:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiv
2892:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if defined(USART_CR1_UESM)
2893:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if defined(USART_CR3_WUFIE)
2894:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallb
2895:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USART_CR3_WUFIE */
2896:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USART_CR1_UESM */
2897:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCall
2898:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2899:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2900:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2901:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2902:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2903:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Configure the UART peripheral.
2904:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
2905:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
2906:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2907:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
2908:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2909:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t tmpreg;
2910:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t brrtemp;
2911:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_ClockSourceTypeDef clocksource;
2912:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t usartdiv;
2913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_StatusTypeDef ret               = HAL_OK;
2914:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t pclk;
2915:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2916:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the parameters */
2917:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
2918:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
2919:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
2920:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
2921:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2922:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_PARITY(huart->Init.Parity));
2923:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_MODE(huart->Init.Mode));
2924:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
2925:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
2926:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2927:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2928:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Clear M, PCE, PS, TE, RE and OVER8 bits and configure
2929:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *  the UART Word Length, Parity, Mode and oversampling:
2930:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *  set the M bits according to huart->Init.WordLength value
2931:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *  set PCE and PS bits according to huart->Init.Parity value
2932:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *  set TE and RE bits according to huart->Init.Mode value
2933:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *  set OVER8 bit according to huart->Init.OverSampling value */
2934:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.O
2935:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
2936:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2937:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*-------------------------- USART CR2 Configuration -----------------------*/
2938:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Configure the UART Stop Bits: Set STOP[13:12] bits according
2939:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * to huart->Init.StopBits value */
2940:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
ARM GAS  /tmp/ccwHIqYH.s 			page 53


2941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2942:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
2943:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Configure
2944:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * - UART HardWare Flow Control: set CTSE and RTSE bits according
2945:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *   to huart->Init.HwFlowCtl value
2946:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * - one-bit sampling method versus three samples' majority rule according
2947:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
2948:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.HwFlowCtl;
2949:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2950:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   tmpreg |= huart->Init.OneBitSampling;
2951:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
2952:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2953:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2954:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*-------------------------- USART BRR Configuration -----------------------*/
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_GETCLOCKSOURCE(huart, clocksource);
2956:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2957:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
2958:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2959:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     switch (clocksource)
2960:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2961:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK1:
2962:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pclk = HAL_RCC_GetPCLK1Freq();
2963:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2964:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK2:
2965:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pclk = HAL_RCC_GetPCLK2Freq();
2966:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2967:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
2968:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pclk = (uint32_t) HSI_VALUE;
2969:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2970:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_SYSCLK:
2971:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pclk = HAL_RCC_GetSysClockFreq();
2972:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2973:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_LSE:
2974:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pclk = (uint32_t) LSE_VALUE;
2975:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2976:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       default:
2977:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pclk = 0U;
2978:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         ret = HAL_ERROR;
2979:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2980:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2981:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2982:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* USARTDIV must be greater than or equal to 0d16 */
2983:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (pclk != 0U)
2984:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2985:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
2986:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
2987:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
2988:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
2989:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
2990:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->Instance->BRR = brrtemp;
2991:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
2992:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       else
2993:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
2994:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         ret = HAL_ERROR;
2995:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
2996:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2997:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
ARM GAS  /tmp/ccwHIqYH.s 			page 54


2998:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
2999:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3000:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     switch (clocksource)
3001:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3002:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK1:
3003:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pclk = HAL_RCC_GetPCLK1Freq();
3004:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
3005:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK2:
3006:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pclk = HAL_RCC_GetPCLK2Freq();
3007:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
3008:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
3009:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pclk = (uint32_t) HSI_VALUE;
3010:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
3011:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_SYSCLK:
3012:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pclk = HAL_RCC_GetSysClockFreq();
3013:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
3014:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_LSE:
3015:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pclk = (uint32_t) LSE_VALUE;
3016:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
3017:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       default:
3018:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pclk = 0U;
3019:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         ret = HAL_ERROR;
3020:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
3021:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3022:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3023:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (pclk != 0U)
3024:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3025:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* USARTDIV must be greater than or equal to 0d16 */
3026:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
3027:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3028:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
3029:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->Instance->BRR = usartdiv;
3030:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
3031:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       else
3032:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
3033:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         ret = HAL_ERROR;
3034:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
3035:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3036:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3037:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3038:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3039:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Clear ISR function pointers */
3040:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxISR = NULL;
3041:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxISR = NULL;
3042:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3043:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return ret;
3044:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3045:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3046:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3047:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Configure the UART peripheral advanced features.
3048:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
3049:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3050:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3051:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
3052:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3053:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check whether the set of advanced features to configure is properly set */
3054:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
ARM GAS  /tmp/ccwHIqYH.s 			page 55


3055:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3056:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* if required, configure TX pin active level inversion */
3057:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
3058:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3059:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
3060:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
3061:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3062:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3063:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* if required, configure RX pin active level inversion */
3064:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
3065:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3066:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
3067:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
3068:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3069:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3070:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* if required, configure data inversion */
3071:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
3072:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3073:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
3074:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
3075:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3076:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3077:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* if required, configure RX/TX pins swap */
3078:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
3079:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3080:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
3081:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
3082:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3083:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3084:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* if required, configure RX overrun detection disabling */
3085:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
3086:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3087:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
3088:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
3089:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3090:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3091:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* if required, configure DMA disabling on reception error */
3092:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
3093:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3094:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
3095:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
3096:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3097:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3098:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* if required, configure auto Baud rate detection scheme */
3099:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
3100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3101:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
3102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
3103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
3104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* set auto Baudrate detection parameters if detection is enabled */
3105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
3106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
3108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
3109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3110:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccwHIqYH.s 			page 56


3112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* if required, configure MSB first on communication line */
3113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
3114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
3116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
3117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Check the UART Idle State.
3122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
3123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
3124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
3126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t tickstart;
3128:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Initialize the UART ErrorCode */
3130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
3131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Init tickstart for timeout management */
3133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   tickstart = HAL_GetTick();
3134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check if the Transmitter is enabled */
3136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3137:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Wait until TEACK flag is set */
3139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALU
3140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Timeout occurred */
3142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return HAL_TIMEOUT;
3143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if defined(USART_ISR_REACK)
3146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check if the Receiver is enabled */
3148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
3149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Wait until REACK flag is set */
3151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALU
3152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Timeout occurred */
3154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return HAL_TIMEOUT;
3155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3156:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif
3158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Initialize the UART State */
3160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
3161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
3162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
3165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
3167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3168:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccwHIqYH.s 			page 57


3169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3170:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Handle UART Communication Timeout.
3171:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart     UART handle.
3172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Flag      Specifies the UART flag to check
3173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Status    Flag status (SET or RESET)
3174:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Tickstart Tick start value
3175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Timeout   Timeout duration
3176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
3177:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus 
3179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                                               uint32_t Tickstart, uint32_t Timeout)
3180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3181:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Wait until flag is set */
3182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Check for the Timeout */
3185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (Timeout != HAL_MAX_DELAY)
3186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3187:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
3189:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
3190:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            interrupts for the interrupt process */
3191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
3192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->gState = HAL_UART_STATE_READY;
3195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
3196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         __HAL_UNLOCK(huart);
3198:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         return HAL_TIMEOUT;
3200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
3201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
3203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
3204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
3205:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
3206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Clear Receiver Timeout flag*/
3207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3209:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
3210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****              interrupts for the interrupt process */
3211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
3212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->gState = HAL_UART_STATE_READY;
3215:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
3216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_RTO;
3217:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Process Unlocked */
3219:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           __HAL_UNLOCK(huart);
3220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           return HAL_TIMEOUT;
3222:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
3223:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
3224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
ARM GAS  /tmp/ccwHIqYH.s 			page 58


3226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
3227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3228:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3229:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3230:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Start Receive operation in interrupt mode.
3231:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This function could be called by all HAL UART API providing reception in Interrupt mode
3232:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   When calling this function, parameters validity is considered as already checked,
3233:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         i.e. Rx State, buffer address, ...
3234:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         UART Handle is assumed as Locked.
3235:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
3236:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
3237:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
3238:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
3239:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
3241:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->pRxBuffPtr  = pData;
3243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferSize  = Size;
3244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = Size;
3245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxISR       = NULL;
3246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Computation of UART mask to apply to RDR register */
3248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_MASK_COMPUTATION(huart);
3249:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3250:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
3251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_BUSY_RX;
3252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
3255:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3256:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Set the Rx ISR function pointer according to the data word length */
3257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxISR = UART_RxISR_16BIT;
3260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
3262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxISR = UART_RxISR_8BIT;
3264:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3266:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
3267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3268:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
3269:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
3270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
3271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Start Receive operation in DMA mode.
3275:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This function could be called by all HAL UART API providing reception in DMA mode.
3276:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   When calling this function, parameters validity is considered as already checked,
3277:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         i.e. Rx State, buffer address, ...
3278:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         UART Handle is assumed as Locked.
3279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
3280:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  pData Pointer to data buffer (u8 or u16 data elements).
3281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  Size  Amount of data elements (u8 or u16) to be received.
3282:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
ARM GAS  /tmp/ccwHIqYH.s 			page 59


3283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3284:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
3285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->pRxBuffPtr = pData;
3287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferSize = Size;
3288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
3290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_BUSY_RX;
3291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->hdmarx != NULL)
3293:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
3295:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
3296:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
3298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
3299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Set the DMA error callback */
3301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->hdmarx->XferErrorCallback = UART_DMAError;
3302:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Set the DMA abort callback */
3304:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->hdmarx->XferAbortCallback = NULL;
3305:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Enable the DMA channel */
3307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPt
3308:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set error code to DMA */
3310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->ErrorCode = HAL_UART_ERROR_DMA;
3311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       __HAL_UNLOCK(huart);
3313:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Restore huart->gState to ready */
3315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_READY;
3316:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return HAL_ERROR;
3318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3319:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3320:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
3321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Enable the UART Parity Error Interrupt */
3323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
3324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
3327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3328:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Enable the DMA transfer for the receiver request by setting the DMAR bit
3329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   in the UART CR3 register */
3330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
3331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
3333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3334:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3336:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit compl
3338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
3339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
ARM GAS  /tmp/ccwHIqYH.s 			page 60


3340:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
3342:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
  26              		.loc 1 3342 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
3343:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
3344:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
  32              		.loc 1 3344 0
  33 0000 0268     		ldr	r2, [r0]
  34 0002 1368     		ldr	r3, [r2]
  35 0004 23F0C003 		bic	r3, r3, #192
  36 0008 1360     		str	r3, [r2]
3345:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* At end of Tx process, restore huart->gState to Ready */
3347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
  37              		.loc 1 3347 0
  38 000a 2023     		movs	r3, #32
  39 000c 8367     		str	r3, [r0, #120]
  40 000e 7047     		bx	lr
  41              		.cfi_endproc
  42              	.LFE191:
  44              		.section	.text.UART_EndRxTransfer,"ax",%progbits
  45              		.align	1
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  49              		.fpu fpv5-d16
  51              	UART_EndRxTransfer:
  52              	.LFB192:
3348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3349:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3351:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3352:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception comp
3353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
3354:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3356:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
3357:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
  53              		.loc 1 3357 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
  58              	.LVL1:
3358:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
3359:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  59              		.loc 1 3359 0
  60 0000 0268     		ldr	r2, [r0]
  61 0002 1368     		ldr	r3, [r2]
  62 0004 23F49073 		bic	r3, r3, #288
  63 0008 1360     		str	r3, [r2]
3360:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
ARM GAS  /tmp/ccwHIqYH.s 			page 61


  64              		.loc 1 3360 0
  65 000a 0268     		ldr	r2, [r0]
  66 000c 9368     		ldr	r3, [r2, #8]
  67 000e 23F00103 		bic	r3, r3, #1
  68 0012 9360     		str	r3, [r2, #8]
3361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3362:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
3363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
  69              		.loc 1 3363 0
  70 0014 036E     		ldr	r3, [r0, #96]
  71 0016 012B     		cmp	r3, #1
  72 0018 05D0     		beq	.L4
  73              	.L3:
3364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
3366:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* At end of Rx process, restore huart->RxState to Ready */
3369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
  74              		.loc 1 3369 0
  75 001a 2023     		movs	r3, #32
  76 001c C367     		str	r3, [r0, #124]
3370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
  77              		.loc 1 3370 0
  78 001e 0023     		movs	r3, #0
  79 0020 0366     		str	r3, [r0, #96]
3371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Reset RxIsr function pointer */
3373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxISR = NULL;
  80              		.loc 1 3373 0
  81 0022 4366     		str	r3, [r0, #100]
  82 0024 7047     		bx	lr
  83              	.L4:
3365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
  84              		.loc 1 3365 0
  85 0026 0268     		ldr	r2, [r0]
  86 0028 1368     		ldr	r3, [r2]
  87 002a 23F01003 		bic	r3, r3, #16
  88 002e 1360     		str	r3, [r2]
  89 0030 F3E7     		b	.L3
  90              		.cfi_endproc
  91              	.LFE192:
  93              		.section	.text.UART_TxISR_8BIT,"ax",%progbits
  94              		.align	1
  95              		.syntax unified
  96              		.thumb
  97              		.thumb_func
  98              		.fpu fpv5-d16
 100              	UART_TxISR_8BIT:
 101              	.LFB203:
3374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3377:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3378:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief DMA UART transmit process complete callback.
3379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param hdma DMA handle.
3380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
ARM GAS  /tmp/ccwHIqYH.s 			page 62


3381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3382:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
3383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3386:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* DMA Normal mode */
3387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (hdma->Init.Mode != DMA_CIRCULAR)
3388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = 0U;
3390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3391:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Disable the DMA transfer for transmit request by resetting the DMAT bit
3392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****        in the UART CR3 register */
3393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
3394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3395:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Enable the UART Transmit Complete Interrupt */
3396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
3397:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* DMA Circular mode */
3399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
3400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /*Call registered Tx complete callback*/
3403:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxCpltCallback(huart);
3404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /*Call legacy weak Tx complete callback*/
3406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UART_TxCpltCallback(huart);
3407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3409:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3411:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief DMA UART transmit process half complete callback.
3413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param hdma DMA handle.
3414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3415:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
3417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3418:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call registered Tx Half complete callback*/
3422:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxHalfCpltCallback(huart);
3423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call legacy weak Tx Half complete callback*/
3425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_TxHalfCpltCallback(huart);
3426:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3429:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief DMA UART receive process complete callback.
3431:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param hdma DMA handle.
3432:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
3435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccwHIqYH.s 			page 63


3438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* DMA Normal mode */
3439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (hdma->Init.Mode != DMA_CIRCULAR)
3440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount = 0U;
3442:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
3444:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
3445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3446:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
3448:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****        in the UART CR3 register */
3449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
3450:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
3452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
3453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
3455:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
3456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
3458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3460:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3461:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check current reception Mode :
3462:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      If Reception till IDLE event has been selected : use Rx Event callback */
3463:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
3464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3465:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3466:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /*Call registered Rx Event callback*/
3467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxEventCallback(huart, huart->RxXferSize);
3468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /*Call legacy weak Rx Event callback*/
3470:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
3471:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3472:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
3474:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3475:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* In other cases : use Rx Complete callback */
3476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3477:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /*Call registered Rx complete callback*/
3478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxCpltCallback(huart);
3479:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /*Call legacy weak Rx complete callback*/
3481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UART_RxCpltCallback(huart);
3482:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3483:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3484:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3486:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief DMA UART receive process half complete callback.
3488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param hdma DMA handle.
3489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3490:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3491:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
3492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3493:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3494:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccwHIqYH.s 			page 64


3495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check current reception Mode :
3496:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      If Reception till IDLE event has been selected : use Rx Event callback */
3497:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
3498:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3499:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3500:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /*Call registered Rx Event callback*/
3501:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxEventCallback(huart, huart->RxXferSize / 2U);
3502:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /*Call legacy weak Rx Event callback*/
3504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
3505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3506:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3507:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
3508:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3509:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* In other cases : use Rx Half Complete callback */
3510:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /*Call registered Rx Half complete callback*/
3512:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxHalfCpltCallback(huart);
3513:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3514:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /*Call legacy weak Rx Half complete callback*/
3515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UART_RxHalfCpltCallback(huart);
3516:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3517:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3518:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3519:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3520:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3521:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief DMA UART communication error callback.
3522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param hdma DMA handle.
3523:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3524:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma)
3526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3528:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef gstate = huart->gState;
3530:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
3531:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3532:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
3533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
3534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
3535:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3536:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = 0U;
3537:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_EndTxTransfer(huart);
3538:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3540:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
3541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
3542:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
3543:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount = 0U;
3545:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_EndRxTransfer(huart);
3546:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3547:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3548:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCode |= HAL_UART_ERROR_DMA;
3549:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3550:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3551:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call registered error callback*/
ARM GAS  /tmp/ccwHIqYH.s 			page 65


3552:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCallback(huart);
3553:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3554:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call legacy weak error callback*/
3555:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
3556:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3557:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3558:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3559:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3560:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  DMA UART communication abort callback, when initiated by HAL services on Error
3561:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
3562:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  hdma DMA handle.
3563:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3564:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3565:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
3566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3567:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3568:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
3569:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxXferCount = 0U;
3570:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3571:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3572:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call registered error callback*/
3573:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCallback(huart);
3574:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3575:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call legacy weak error callback*/
3576:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
3577:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3578:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3579:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3580:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3581:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user
3582:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
3583:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
3584:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         Abort still ongoing for Rx DMA Handle.
3585:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  hdma DMA handle.
3586:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3587:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3588:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
3589:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3590:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3591:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3592:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->hdmatx->XferAbortCallback = NULL;
3593:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3594:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
3595:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->hdmarx != NULL)
3596:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3597:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmarx->XferAbortCallback != NULL)
3598:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3599:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return;
3600:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3601:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3602:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3603:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
3604:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxXferCount = 0U;
3605:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
3606:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3607:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Reset errorCode */
3608:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
ARM GAS  /tmp/ccwHIqYH.s 			page 66


3609:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3610:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
3611:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
3612:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3613:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3614:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
3615:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
3616:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
3617:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3618:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3619:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call user Abort complete callback */
3620:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3621:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call registered Abort complete callback */
3622:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
3623:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3624:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
3625:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
3626:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3627:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3628:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3629:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3630:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3631:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user
3632:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
3633:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
3634:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         Abort still ongoing for Tx DMA Handle.
3635:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  hdma DMA handle.
3636:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3637:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
3639:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3640:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3641:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3642:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->hdmarx->XferAbortCallback = NULL;
3643:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
3645:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->hdmatx != NULL)
3646:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3647:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmatx->XferAbortCallback != NULL)
3648:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3649:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return;
3650:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3651:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3652:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3653:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
3654:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxXferCount = 0U;
3655:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
3656:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3657:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Reset errorCode */
3658:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
3659:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3660:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
3661:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
3662:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3663:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Discard the received data */
3664:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
3665:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccwHIqYH.s 			page 67


3666:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
3667:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
3668:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
3669:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3670:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3671:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call user Abort complete callback */
3672:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3673:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call registered Abort complete callback */
3674:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
3675:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3676:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
3677:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
3678:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3680:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3681:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3682:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3683:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user by a call to
3684:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         HAL_UART_AbortTransmit_IT API (Abort only Tx transfer)
3685:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         (This callback is executed at end of DMA Tx Abort procedure following user abort reques
3686:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         and leads to user Tx Abort Complete callback execution).
3687:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  hdma DMA handle.
3688:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3689:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3690:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
3691:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3692:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3693:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3694:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxXferCount = 0U;
3695:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3696:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3697:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Restore huart->gState to Ready */
3698:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
3699:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3700:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call user Abort complete callback */
3701:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3702:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call registered Abort Transmit Complete Callback */
3703:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->AbortTransmitCpltCallback(huart);
3704:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3705:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call legacy weak Abort Transmit Complete Callback */
3706:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_AbortTransmitCpltCallback(huart);
3707:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3708:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3709:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3710:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3711:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user by a call to
3712:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         HAL_UART_AbortReceive_IT API (Abort only Rx transfer)
3713:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         (This callback is executed at end of DMA Rx Abort procedure following user abort reques
3714:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         and leads to user Rx Abort Complete callback execution).
3715:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  hdma DMA handle.
3716:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3717:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3718:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
3719:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3720:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
3721:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3722:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
ARM GAS  /tmp/ccwHIqYH.s 			page 68


3723:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3724:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
3725:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
3726:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3727:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Discard the received data */
3728:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
3729:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3730:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
3731:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
3732:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3733:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3734:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call user Abort complete callback */
3735:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3736:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call registered Abort Receive Complete Callback */
3737:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->AbortReceiveCpltCallback(huart);
3738:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3739:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call legacy weak Abort Receive Complete Callback */
3740:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_AbortReceiveCpltCallback(huart);
3741:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3742:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3743:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3744:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3745:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief TX interrupt handler for 7 or 8 bits data word length .
3746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   Function is called under interruption only, once
3747:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Transmit_IT().
3748:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
3749:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3750:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3751:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
3752:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 102              		.loc 1 3752 0
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 0
 105              		@ frame_needed = 0, uses_anonymous_args = 0
 106              		@ link register save eliminated.
 107              	.LVL2:
3753:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
3754:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 108              		.loc 1 3754 0
 109 0000 836F     		ldr	r3, [r0, #120]
 110 0002 212B     		cmp	r3, #33
 111 0004 00D0     		beq	.L8
 112              	.L5:
 113 0006 7047     		bx	lr
 114              	.L8:
3755:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3756:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->TxXferCount == 0U)
 115              		.loc 1 3756 0
 116 0008 B0F85230 		ldrh	r3, [r0, #82]
 117 000c 9BB2     		uxth	r3, r3
 118 000e 73B1     		cbz	r3, .L9
3757:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3758:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Disable the UART Transmit Data Register Empty Interrupt */
3759:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
3760:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3761:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Enable the UART Transmit Complete Interrupt */
3762:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
ARM GAS  /tmp/ccwHIqYH.s 			page 69


3763:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3764:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
3765:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3766:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 119              		.loc 1 3766 0
 120 0010 0368     		ldr	r3, [r0]
 121 0012 C26C     		ldr	r2, [r0, #76]
 122 0014 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 123 0016 9A62     		str	r2, [r3, #40]
3767:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->pTxBuffPtr++;
 124              		.loc 1 3767 0
 125 0018 C36C     		ldr	r3, [r0, #76]
 126 001a 0133     		adds	r3, r3, #1
 127 001c C364     		str	r3, [r0, #76]
3768:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->TxXferCount--;
 128              		.loc 1 3768 0
 129 001e B0F85230 		ldrh	r3, [r0, #82]
 130 0022 9BB2     		uxth	r3, r3
 131 0024 013B     		subs	r3, r3, #1
 132 0026 9BB2     		uxth	r3, r3
 133 0028 A0F85230 		strh	r3, [r0, #82]	@ movhi
3769:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3770:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3771:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 134              		.loc 1 3771 0
 135 002c EBE7     		b	.L5
 136              	.L9:
3759:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 137              		.loc 1 3759 0
 138 002e 0268     		ldr	r2, [r0]
 139 0030 1368     		ldr	r3, [r2]
 140 0032 23F08003 		bic	r3, r3, #128
 141 0036 1360     		str	r3, [r2]
3762:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 142              		.loc 1 3762 0
 143 0038 0268     		ldr	r2, [r0]
 144 003a 1368     		ldr	r3, [r2]
 145 003c 43F04003 		orr	r3, r3, #64
 146 0040 1360     		str	r3, [r2]
 147 0042 7047     		bx	lr
 148              		.cfi_endproc
 149              	.LFE203:
 151              		.section	.text.UART_TxISR_16BIT,"ax",%progbits
 152              		.align	1
 153              		.syntax unified
 154              		.thumb
 155              		.thumb_func
 156              		.fpu fpv5-d16
 158              	UART_TxISR_16BIT:
 159              	.LFB204:
3772:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3773:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3774:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief TX interrupt handler for 9 bits data word length.
3775:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   Function is called under interruption only, once
3776:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Transmit_IT().
3777:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
3778:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
ARM GAS  /tmp/ccwHIqYH.s 			page 70


3779:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3780:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
3781:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 160              		.loc 1 3781 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164              		@ link register save eliminated.
 165              	.LVL3:
3782:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t *tmp;
3783:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3784:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
3785:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 166              		.loc 1 3785 0
 167 0000 836F     		ldr	r3, [r0, #120]
 168 0002 212B     		cmp	r3, #33
 169 0004 00D0     		beq	.L13
 170              	.L10:
 171 0006 7047     		bx	lr
 172              	.L13:
3786:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3787:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->TxXferCount == 0U)
 173              		.loc 1 3787 0
 174 0008 B0F85230 		ldrh	r3, [r0, #82]
 175 000c 9BB2     		uxth	r3, r3
 176 000e 83B1     		cbz	r3, .L14
3788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3789:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Disable the UART Transmit Data Register Empty Interrupt */
3790:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
3791:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3792:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Enable the UART Transmit Complete Interrupt */
3793:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
3794:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3795:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
3796:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3797:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       tmp = (uint16_t *) huart->pTxBuffPtr;
 177              		.loc 1 3797 0
 178 0010 C36C     		ldr	r3, [r0, #76]
 179              	.LVL4:
3798:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 180              		.loc 1 3798 0
 181 0012 0268     		ldr	r2, [r0]
 182 0014 1B88     		ldrh	r3, [r3]
 183              	.LVL5:
 184 0016 C3F30803 		ubfx	r3, r3, #0, #9
 185 001a 9362     		str	r3, [r2, #40]
 186              	.LVL6:
3799:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->pTxBuffPtr += 2U;
 187              		.loc 1 3799 0
 188 001c C36C     		ldr	r3, [r0, #76]
 189 001e 0233     		adds	r3, r3, #2
 190 0020 C364     		str	r3, [r0, #76]
3800:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->TxXferCount--;
 191              		.loc 1 3800 0
 192 0022 B0F85230 		ldrh	r3, [r0, #82]
 193 0026 9BB2     		uxth	r3, r3
 194 0028 013B     		subs	r3, r3, #1
ARM GAS  /tmp/ccwHIqYH.s 			page 71


 195 002a 9BB2     		uxth	r3, r3
 196 002c A0F85230 		strh	r3, [r0, #82]	@ movhi
3801:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3802:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3803:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 197              		.loc 1 3803 0
 198 0030 E9E7     		b	.L10
 199              	.L14:
3790:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 200              		.loc 1 3790 0
 201 0032 0268     		ldr	r2, [r0]
 202 0034 1368     		ldr	r3, [r2]
 203 0036 23F08003 		bic	r3, r3, #128
 204 003a 1360     		str	r3, [r2]
3793:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 205              		.loc 1 3793 0
 206 003c 0268     		ldr	r2, [r0]
 207 003e 1368     		ldr	r3, [r2]
 208 0040 43F04003 		orr	r3, r3, #64
 209 0044 1360     		str	r3, [r2]
 210 0046 7047     		bx	lr
 211              		.cfi_endproc
 212              	.LFE204:
 214              		.section	.text.HAL_UART_MspInit,"ax",%progbits
 215              		.align	1
 216              		.weak	HAL_UART_MspInit
 217              		.syntax unified
 218              		.thumb
 219              		.thumb_func
 220              		.fpu fpv5-d16
 222              	HAL_UART_MspInit:
 223              	.LFB146:
 653:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 224              		.loc 1 653 0
 225              		.cfi_startproc
 226              		@ args = 0, pretend = 0, frame = 0
 227              		@ frame_needed = 0, uses_anonymous_args = 0
 228              		@ link register save eliminated.
 229              	.LVL7:
 230 0000 7047     		bx	lr
 231              		.cfi_endproc
 232              	.LFE146:
 234              		.section	.text.HAL_UART_MspDeInit,"ax",%progbits
 235              		.align	1
 236              		.weak	HAL_UART_MspDeInit
 237              		.syntax unified
 238              		.thumb
 239              		.thumb_func
 240              		.fpu fpv5-d16
 242              	HAL_UART_MspDeInit:
 243              	.LFB147:
 668:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 244              		.loc 1 668 0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 0
 247              		@ frame_needed = 0, uses_anonymous_args = 0
 248              		@ link register save eliminated.
ARM GAS  /tmp/ccwHIqYH.s 			page 72


 249              	.LVL8:
 250 0000 7047     		bx	lr
 251              		.cfi_endproc
 252              	.LFE147:
 254              		.section	.text.HAL_UART_DeInit,"ax",%progbits
 255              		.align	1
 256              		.global	HAL_UART_DeInit
 257              		.syntax unified
 258              		.thumb
 259              		.thumb_func
 260              		.fpu fpv5-d16
 262              	HAL_UART_DeInit:
 263              	.LFB145:
 607:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 264              		.loc 1 607 0
 265              		.cfi_startproc
 266              		@ args = 0, pretend = 0, frame = 0
 267              		@ frame_needed = 0, uses_anonymous_args = 0
 268              	.LVL9:
 609:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 269              		.loc 1 609 0
 270 0000 D0B1     		cbz	r0, .L19
 607:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 271              		.loc 1 607 0
 272 0002 38B5     		push	{r3, r4, r5, lr}
 273              	.LCFI0:
 274              		.cfi_def_cfa_offset 16
 275              		.cfi_offset 3, -16
 276              		.cfi_offset 4, -12
 277              		.cfi_offset 5, -8
 278              		.cfi_offset 14, -4
 279 0004 0446     		mov	r4, r0
 617:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 280              		.loc 1 617 0
 281 0006 2423     		movs	r3, #36
 282 0008 8367     		str	r3, [r0, #120]
 619:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 283              		.loc 1 619 0
 284 000a 0268     		ldr	r2, [r0]
 285 000c 1368     		ldr	r3, [r2]
 286 000e 23F00103 		bic	r3, r3, #1
 287 0012 1360     		str	r3, [r2]
 621:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->Instance->CR2 = 0x0U;
 288              		.loc 1 621 0
 289 0014 0368     		ldr	r3, [r0]
 290 0016 0025     		movs	r5, #0
 291 0018 1D60     		str	r5, [r3]
 622:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->Instance->CR3 = 0x0U;
 292              		.loc 1 622 0
 293 001a 0368     		ldr	r3, [r0]
 294 001c 5D60     		str	r5, [r3, #4]
 623:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 295              		.loc 1 623 0
 296 001e 0368     		ldr	r3, [r0]
 297 0020 9D60     		str	r5, [r3, #8]
 634:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 298              		.loc 1 634 0
ARM GAS  /tmp/ccwHIqYH.s 			page 73


 299 0022 FFF7FEFF 		bl	HAL_UART_MspDeInit
 300              	.LVL10:
 637:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_RESET;
 301              		.loc 1 637 0
 302 0026 C4F88050 		str	r5, [r4, #128]
 638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_RESET;
 303              		.loc 1 638 0
 304 002a A567     		str	r5, [r4, #120]
 639:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 305              		.loc 1 639 0
 306 002c E567     		str	r5, [r4, #124]
 640:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 307              		.loc 1 640 0
 308 002e 2566     		str	r5, [r4, #96]
 642:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 309              		.loc 1 642 0
 310 0030 84F87450 		strb	r5, [r4, #116]
 644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 311              		.loc 1 644 0
 312 0034 2846     		mov	r0, r5
 313 0036 38BD     		pop	{r3, r4, r5, pc}
 314              	.LVL11:
 315              	.L19:
 316              	.LCFI1:
 317              		.cfi_def_cfa_offset 0
 318              		.cfi_restore 3
 319              		.cfi_restore 4
 320              		.cfi_restore 5
 321              		.cfi_restore 14
 611:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 322              		.loc 1 611 0
 323 0038 0120     		movs	r0, #1
 324              	.LVL12:
 325 003a 7047     		bx	lr
 326              		.cfi_endproc
 327              	.LFE145:
 329              		.section	.text.HAL_UART_Transmit_IT,"ax",%progbits
 330              		.align	1
 331              		.global	HAL_UART_Transmit_IT
 332              		.syntax unified
 333              		.thumb
 334              		.thumb_func
 335              		.fpu fpv5-d16
 337              	HAL_UART_Transmit_IT:
 338              	.LFB150:
1265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 339              		.loc 1 1265 0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343              		@ link register save eliminated.
 344              	.LVL13:
1267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 345              		.loc 1 1267 0
 346 0000 836F     		ldr	r3, [r0, #120]
 347 0002 202B     		cmp	r3, #32
 348 0004 01D0     		beq	.L31
ARM GAS  /tmp/ccwHIqYH.s 			page 74


1303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 349              		.loc 1 1303 0
 350 0006 0220     		movs	r0, #2
 351              	.LVL14:
 352 0008 7047     		bx	lr
 353              	.LVL15:
 354              	.L31:
1269:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 355              		.loc 1 1269 0
 356 000a 002A     		cmp	r2, #0
 357 000c 18BF     		it	ne
 358 000e 0029     		cmpne	r1, #0
 359 0010 27D0     		beq	.L29
1274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 360              		.loc 1 1274 0
 361 0012 90F87430 		ldrb	r3, [r0, #116]	@ zero_extendqisi2
 362 0016 012B     		cmp	r3, #1
 363 0018 25D0     		beq	.L30
1274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 364              		.loc 1 1274 0 is_stmt 0 discriminator 2
 365 001a 0123     		movs	r3, #1
 366 001c 80F87430 		strb	r3, [r0, #116]
1276:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferSize  = Size;
 367              		.loc 1 1276 0 is_stmt 1 discriminator 2
 368 0020 C164     		str	r1, [r0, #76]
1277:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = Size;
 369              		.loc 1 1277 0 discriminator 2
 370 0022 A0F85020 		strh	r2, [r0, #80]	@ movhi
1278:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxISR       = NULL;
 371              		.loc 1 1278 0 discriminator 2
 372 0026 A0F85220 		strh	r2, [r0, #82]	@ movhi
1279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 373              		.loc 1 1279 0 discriminator 2
 374 002a 0023     		movs	r3, #0
 375 002c 8366     		str	r3, [r0, #104]
1281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 376              		.loc 1 1281 0 discriminator 2
 377 002e C0F88030 		str	r3, [r0, #128]
1282:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 378              		.loc 1 1282 0 discriminator 2
 379 0032 2123     		movs	r3, #33
 380 0034 8367     		str	r3, [r0, #120]
1285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 381              		.loc 1 1285 0 discriminator 2
 382 0036 8368     		ldr	r3, [r0, #8]
 383 0038 B3F5805F 		cmp	r3, #4096
 384 003c 0BD0     		beq	.L32
 385              	.L26:
1291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 386              		.loc 1 1291 0
 387 003e 0B4B     		ldr	r3, .L33
 388 0040 8366     		str	r3, [r0, #104]
 389              	.L27:
1294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 390              		.loc 1 1294 0
 391 0042 0023     		movs	r3, #0
 392 0044 80F87430 		strb	r3, [r0, #116]
ARM GAS  /tmp/ccwHIqYH.s 			page 75


1297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 393              		.loc 1 1297 0
 394 0048 0168     		ldr	r1, [r0]
 395              	.LVL16:
 396 004a 0A68     		ldr	r2, [r1]
 397              	.LVL17:
 398 004c 42F08002 		orr	r2, r2, #128
 399 0050 0A60     		str	r2, [r1]
 400              	.LVL18:
1299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 401              		.loc 1 1299 0
 402 0052 1846     		mov	r0, r3
 403              	.LVL19:
 404 0054 7047     		bx	lr
 405              	.LVL20:
 406              	.L32:
1285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 407              		.loc 1 1285 0 discriminator 1
 408 0056 0369     		ldr	r3, [r0, #16]
 409 0058 002B     		cmp	r3, #0
 410 005a F0D1     		bne	.L26
1287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 411              		.loc 1 1287 0
 412 005c 044B     		ldr	r3, .L33+4
 413 005e 8366     		str	r3, [r0, #104]
 414 0060 EFE7     		b	.L27
 415              	.L29:
1271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 416              		.loc 1 1271 0
 417 0062 0120     		movs	r0, #1
 418              	.LVL21:
 419 0064 7047     		bx	lr
 420              	.LVL22:
 421              	.L30:
1274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 422              		.loc 1 1274 0
 423 0066 0220     		movs	r0, #2
 424              	.LVL23:
1305:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 425              		.loc 1 1305 0
 426 0068 7047     		bx	lr
 427              	.L34:
 428 006a 00BF     		.align	2
 429              	.L33:
 430 006c 00000000 		.word	UART_TxISR_8BIT
 431 0070 00000000 		.word	UART_TxISR_16BIT
 432              		.cfi_endproc
 433              	.LFE150:
 435              		.section	.text.HAL_UART_Transmit_DMA,"ax",%progbits
 436              		.align	1
 437              		.global	HAL_UART_Transmit_DMA
 438              		.syntax unified
 439              		.thumb
 440              		.thumb_func
 441              		.fpu fpv5-d16
 443              	HAL_UART_Transmit_DMA:
 444              	.LFB152:
ARM GAS  /tmp/ccwHIqYH.s 			page 76


1358:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 445              		.loc 1 1358 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 0
 448              		@ frame_needed = 0, uses_anonymous_args = 0
 449              	.LVL24:
 450 0000 10B5     		push	{r4, lr}
 451              	.LCFI2:
 452              		.cfi_def_cfa_offset 8
 453              		.cfi_offset 4, -8
 454              		.cfi_offset 14, -4
1360:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 455              		.loc 1 1360 0
 456 0002 846F     		ldr	r4, [r0, #120]
 457 0004 202C     		cmp	r4, #32
 458 0006 01D0     		beq	.L42
1417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 459              		.loc 1 1417 0
 460 0008 0220     		movs	r0, #2
 461              	.LVL25:
 462 000a 10BD     		pop	{r4, pc}
 463              	.LVL26:
 464              	.L42:
1362:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 465              		.loc 1 1362 0
 466 000c 002A     		cmp	r2, #0
 467 000e 18BF     		it	ne
 468 0010 0029     		cmpne	r1, #0
 469 0012 3CD0     		beq	.L39
1367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 470              		.loc 1 1367 0
 471 0014 90F87430 		ldrb	r3, [r0, #116]	@ zero_extendqisi2
 472 0018 012B     		cmp	r3, #1
 473 001a 3AD0     		beq	.L40
 474 001c 1346     		mov	r3, r2
 475 001e 0446     		mov	r4, r0
1367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 476              		.loc 1 1367 0 is_stmt 0 discriminator 2
 477 0020 0122     		movs	r2, #1
 478              	.LVL27:
 479 0022 80F87420 		strb	r2, [r0, #116]
1369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferSize  = Size;
 480              		.loc 1 1369 0 is_stmt 1 discriminator 2
 481 0026 C164     		str	r1, [r0, #76]
1370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = Size;
 482              		.loc 1 1370 0 discriminator 2
 483 0028 A0F85030 		strh	r3, [r0, #80]	@ movhi
1371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 484              		.loc 1 1371 0 discriminator 2
 485 002c A0F85230 		strh	r3, [r0, #82]	@ movhi
1373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 486              		.loc 1 1373 0 discriminator 2
 487 0030 0022     		movs	r2, #0
 488 0032 C0F88020 		str	r2, [r0, #128]
1374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 489              		.loc 1 1374 0 discriminator 2
 490 0036 2122     		movs	r2, #33
ARM GAS  /tmp/ccwHIqYH.s 			page 77


 491 0038 8267     		str	r2, [r0, #120]
1376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 492              		.loc 1 1376 0 discriminator 2
 493 003a C26E     		ldr	r2, [r0, #108]
 494 003c 8AB1     		cbz	r2, .L37
1379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 495              		.loc 1 1379 0
 496 003e 1649     		ldr	r1, .L44
 497              	.LVL28:
 498 0040 D163     		str	r1, [r2, #60]
 499              	.LVL29:
1382:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 500              		.loc 1 1382 0
 501 0042 C26E     		ldr	r2, [r0, #108]
 502 0044 1549     		ldr	r1, .L44+4
 503 0046 1164     		str	r1, [r2, #64]
1385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 504              		.loc 1 1385 0
 505 0048 C26E     		ldr	r2, [r0, #108]
 506 004a 1549     		ldr	r1, .L44+8
 507 004c D164     		str	r1, [r2, #76]
1388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 508              		.loc 1 1388 0
 509 004e C26E     		ldr	r2, [r0, #108]
 510 0050 0021     		movs	r1, #0
 511 0052 1165     		str	r1, [r2, #80]
1391:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 512              		.loc 1 1391 0
 513 0054 0268     		ldr	r2, [r0]
 514 0056 2832     		adds	r2, r2, #40
 515 0058 C16C     		ldr	r1, [r0, #76]
 516 005a C06E     		ldr	r0, [r0, #108]
 517              	.LVL30:
 518 005c FFF7FEFF 		bl	HAL_DMA_Start_IT
 519              	.LVL31:
 520 0060 58B9     		cbnz	r0, .L43
 521              	.L37:
1405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 522              		.loc 1 1405 0
 523 0062 2368     		ldr	r3, [r4]
 524 0064 4022     		movs	r2, #64
 525 0066 1A62     		str	r2, [r3, #32]
1407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 526              		.loc 1 1407 0
 527 0068 0020     		movs	r0, #0
 528 006a 84F87400 		strb	r0, [r4, #116]
1411:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 529              		.loc 1 1411 0
 530 006e 2268     		ldr	r2, [r4]
 531 0070 9368     		ldr	r3, [r2, #8]
 532 0072 43F08003 		orr	r3, r3, #128
 533 0076 9360     		str	r3, [r2, #8]
1413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 534              		.loc 1 1413 0
 535 0078 10BD     		pop	{r4, pc}
 536              	.LVL32:
 537              	.L43:
ARM GAS  /tmp/ccwHIqYH.s 			page 78


1394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 538              		.loc 1 1394 0
 539 007a 1023     		movs	r3, #16
 540 007c C4F88030 		str	r3, [r4, #128]
1396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 541              		.loc 1 1396 0
 542 0080 0023     		movs	r3, #0
 543 0082 84F87430 		strb	r3, [r4, #116]
1399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 544              		.loc 1 1399 0
 545 0086 2023     		movs	r3, #32
 546 0088 A367     		str	r3, [r4, #120]
1401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 547              		.loc 1 1401 0
 548 008a 0120     		movs	r0, #1
 549 008c 10BD     		pop	{r4, pc}
 550              	.LVL33:
 551              	.L39:
1364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 552              		.loc 1 1364 0
 553 008e 0120     		movs	r0, #1
 554              	.LVL34:
 555 0090 10BD     		pop	{r4, pc}
 556              	.LVL35:
 557              	.L40:
1367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 558              		.loc 1 1367 0
 559 0092 0220     		movs	r0, #2
 560              	.LVL36:
1419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 561              		.loc 1 1419 0
 562 0094 10BD     		pop	{r4, pc}
 563              	.L45:
 564 0096 00BF     		.align	2
 565              	.L44:
 566 0098 00000000 		.word	UART_DMATransmitCplt
 567 009c 00000000 		.word	UART_DMATxHalfCplt
 568 00a0 00000000 		.word	UART_DMAError
 569              		.cfi_endproc
 570              	.LFE152:
 572              		.section	.text.HAL_UART_DMAPause,"ax",%progbits
 573              		.align	1
 574              		.global	HAL_UART_DMAPause
 575              		.syntax unified
 576              		.thumb
 577              		.thumb_func
 578              		.fpu fpv5-d16
 580              	HAL_UART_DMAPause:
 581              	.LFB154:
1469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef gstate = huart->gState;
 582              		.loc 1 1469 0
 583              		.cfi_startproc
 584              		@ args = 0, pretend = 0, frame = 0
 585              		@ frame_needed = 0, uses_anonymous_args = 0
 586              		@ link register save eliminated.
 587              	.LVL37:
1470:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
ARM GAS  /tmp/ccwHIqYH.s 			page 79


 588              		.loc 1 1470 0
 589 0000 816F     		ldr	r1, [r0, #120]
 590              	.LVL38:
1471:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 591              		.loc 1 1471 0
 592 0002 C26F     		ldr	r2, [r0, #124]
 593              	.LVL39:
1473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 594              		.loc 1 1473 0
 595 0004 90F87430 		ldrb	r3, [r0, #116]	@ zero_extendqisi2
 596 0008 012B     		cmp	r3, #1
 597 000a 2CD0     		beq	.L50
1469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef gstate = huart->gState;
 598              		.loc 1 1469 0 discriminator 2
 599 000c 10B4     		push	{r4}
 600              	.LCFI3:
 601              		.cfi_def_cfa_offset 4
 602              		.cfi_offset 4, -4
1473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 603              		.loc 1 1473 0 discriminator 2
 604 000e 0123     		movs	r3, #1
 605 0010 80F87430 		strb	r3, [r0, #116]
1475:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
 606              		.loc 1 1475 0 discriminator 2
 607 0014 0368     		ldr	r3, [r0]
 608 0016 9C68     		ldr	r4, [r3, #8]
 609 0018 14F0800F 		tst	r4, #128
 610 001c 01D0     		beq	.L48
1475:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
 611              		.loc 1 1475 0 is_stmt 0 discriminator 1
 612 001e 2129     		cmp	r1, #33
 613 0020 0DD0     		beq	.L55
 614              	.LVL40:
 615              	.L48:
1481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
 616              		.loc 1 1481 0 is_stmt 1
 617 0022 0368     		ldr	r3, [r0]
 618 0024 9968     		ldr	r1, [r3, #8]
 619 0026 11F0400F 		tst	r1, #64
 620 002a 01D0     		beq	.L49
1481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
 621              		.loc 1 1481 0 is_stmt 0 discriminator 1
 622 002c 222A     		cmp	r2, #34
 623 002e 0BD0     		beq	.L56
 624              	.LVL41:
 625              	.L49:
1492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 626              		.loc 1 1492 0 is_stmt 1
 627 0030 0023     		movs	r3, #0
 628 0032 80F87430 		strb	r3, [r0, #116]
1494:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 629              		.loc 1 1494 0
 630 0036 1846     		mov	r0, r3
 631              	.LVL42:
1495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 632              		.loc 1 1495 0
 633 0038 5DF8044B 		ldr	r4, [sp], #4
ARM GAS  /tmp/ccwHIqYH.s 			page 80


 634              	.LCFI4:
 635              		.cfi_remember_state
 636              		.cfi_restore 4
 637              		.cfi_def_cfa_offset 0
 638 003c 7047     		bx	lr
 639              	.LVL43:
 640              	.L55:
 641              	.LCFI5:
 642              		.cfi_restore_state
1479:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 643              		.loc 1 1479 0
 644 003e 9968     		ldr	r1, [r3, #8]
 645              	.LVL44:
 646 0040 21F08001 		bic	r1, r1, #128
 647 0044 9960     		str	r1, [r3, #8]
 648 0046 ECE7     		b	.L48
 649              	.L56:
1485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 650              		.loc 1 1485 0
 651 0048 1A68     		ldr	r2, [r3]
 652              	.LVL45:
 653 004a 22F48072 		bic	r2, r2, #256
 654 004e 1A60     		str	r2, [r3]
1486:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 655              		.loc 1 1486 0
 656 0050 0268     		ldr	r2, [r0]
 657 0052 9368     		ldr	r3, [r2, #8]
 658 0054 23F00103 		bic	r3, r3, #1
 659 0058 9360     		str	r3, [r2, #8]
1489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 660              		.loc 1 1489 0
 661 005a 0268     		ldr	r2, [r0]
 662 005c 9368     		ldr	r3, [r2, #8]
 663 005e 23F04003 		bic	r3, r3, #64
 664 0062 9360     		str	r3, [r2, #8]
 665 0064 E4E7     		b	.L49
 666              	.LVL46:
 667              	.L50:
 668              	.LCFI6:
 669              		.cfi_def_cfa_offset 0
 670              		.cfi_restore 4
1473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 671              		.loc 1 1473 0
 672 0066 0220     		movs	r0, #2
 673              	.LVL47:
 674 0068 7047     		bx	lr
 675              		.cfi_endproc
 676              	.LFE154:
 678              		.section	.text.HAL_UART_DMAResume,"ax",%progbits
 679              		.align	1
 680              		.global	HAL_UART_DMAResume
 681              		.syntax unified
 682              		.thumb
 683              		.thumb_func
 684              		.fpu fpv5-d16
 686              	HAL_UART_DMAResume:
 687              	.LFB155:
ARM GAS  /tmp/ccwHIqYH.s 			page 81


1503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
 688              		.loc 1 1503 0
 689              		.cfi_startproc
 690              		@ args = 0, pretend = 0, frame = 0
 691              		@ frame_needed = 0, uses_anonymous_args = 0
 692              		@ link register save eliminated.
 693              	.LVL48:
1504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 694              		.loc 1 1504 0
 695 0000 90F87430 		ldrb	r3, [r0, #116]	@ zero_extendqisi2
 696 0004 012B     		cmp	r3, #1
 697 0006 26D0     		beq	.L61
1504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 698              		.loc 1 1504 0 is_stmt 0 discriminator 2
 699 0008 0123     		movs	r3, #1
 700 000a 80F87430 		strb	r3, [r0, #116]
1506:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 701              		.loc 1 1506 0 is_stmt 1 discriminator 2
 702 000e 836F     		ldr	r3, [r0, #120]
 703 0010 212B     		cmp	r3, #33
 704 0012 07D0     		beq	.L62
 705              	.L59:
1511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 706              		.loc 1 1511 0
 707 0014 C36F     		ldr	r3, [r0, #124]
 708 0016 222B     		cmp	r3, #34
 709 0018 0AD0     		beq	.L63
 710              	.L60:
1524:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 711              		.loc 1 1524 0
 712 001a 0023     		movs	r3, #0
 713 001c 80F87430 		strb	r3, [r0, #116]
1526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 714              		.loc 1 1526 0
 715 0020 1846     		mov	r0, r3
 716              	.LVL49:
 717 0022 7047     		bx	lr
 718              	.LVL50:
 719              	.L62:
1509:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 720              		.loc 1 1509 0
 721 0024 0268     		ldr	r2, [r0]
 722 0026 9368     		ldr	r3, [r2, #8]
 723 0028 43F08003 		orr	r3, r3, #128
 724 002c 9360     		str	r3, [r2, #8]
 725 002e F1E7     		b	.L59
 726              	.L63:
1514:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 727              		.loc 1 1514 0
 728 0030 0368     		ldr	r3, [r0]
 729 0032 0822     		movs	r2, #8
 730 0034 1A62     		str	r2, [r3, #32]
1517:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 731              		.loc 1 1517 0
 732 0036 0268     		ldr	r2, [r0]
 733 0038 1368     		ldr	r3, [r2]
 734 003a 43F48073 		orr	r3, r3, #256
ARM GAS  /tmp/ccwHIqYH.s 			page 82


 735 003e 1360     		str	r3, [r2]
1518:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 736              		.loc 1 1518 0
 737 0040 0268     		ldr	r2, [r0]
 738 0042 9368     		ldr	r3, [r2, #8]
 739 0044 43F00103 		orr	r3, r3, #1
 740 0048 9360     		str	r3, [r2, #8]
1521:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 741              		.loc 1 1521 0
 742 004a 0268     		ldr	r2, [r0]
 743 004c 9368     		ldr	r3, [r2, #8]
 744 004e 43F04003 		orr	r3, r3, #64
 745 0052 9360     		str	r3, [r2, #8]
 746 0054 E1E7     		b	.L60
 747              	.L61:
1504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 748              		.loc 1 1504 0
 749 0056 0220     		movs	r0, #2
 750              	.LVL51:
1527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 751              		.loc 1 1527 0
 752 0058 7047     		bx	lr
 753              		.cfi_endproc
 754              	.LFE155:
 756              		.section	.text.HAL_UART_DMAStop,"ax",%progbits
 757              		.align	1
 758              		.global	HAL_UART_DMAStop
 759              		.syntax unified
 760              		.thumb
 761              		.thumb_func
 762              		.fpu fpv5-d16
 764              	HAL_UART_DMAStop:
 765              	.LFB156:
1535:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* The Lock is not implemented on this API to allow the user application
 766              		.loc 1 1535 0
 767              		.cfi_startproc
 768              		@ args = 0, pretend = 0, frame = 0
 769              		@ frame_needed = 0, uses_anonymous_args = 0
 770              	.LVL52:
 771 0000 38B5     		push	{r3, r4, r5, lr}
 772              	.LCFI7:
 773              		.cfi_def_cfa_offset 16
 774              		.cfi_offset 3, -16
 775              		.cfi_offset 4, -12
 776              		.cfi_offset 5, -8
 777              		.cfi_offset 14, -4
 778 0002 0446     		mov	r4, r0
1543:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
 779              		.loc 1 1543 0
 780 0004 816F     		ldr	r1, [r0, #120]
 781              	.LVL53:
1544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 782              		.loc 1 1544 0
 783 0006 C56F     		ldr	r5, [r0, #124]
 784              	.LVL54:
1547:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
 785              		.loc 1 1547 0
ARM GAS  /tmp/ccwHIqYH.s 			page 83


 786 0008 0368     		ldr	r3, [r0]
 787 000a 9A68     		ldr	r2, [r3, #8]
 788 000c 12F0800F 		tst	r2, #128
 789 0010 01D0     		beq	.L65
1547:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
 790              		.loc 1 1547 0 is_stmt 0 discriminator 1
 791 0012 2129     		cmp	r1, #33
 792 0014 08D0     		beq	.L72
 793              	.LVL55:
 794              	.L65:
1571:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
 795              		.loc 1 1571 0 is_stmt 1
 796 0016 2368     		ldr	r3, [r4]
 797 0018 9A68     		ldr	r2, [r3, #8]
 798 001a 12F0400F 		tst	r2, #64
 799 001e 32D0     		beq	.L69
1571:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
 800              		.loc 1 1571 0 is_stmt 0 discriminator 1
 801 0020 222D     		cmp	r5, #34
 802 0022 18D0     		beq	.L73
1594:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 803              		.loc 1 1594 0 is_stmt 1
 804 0024 0020     		movs	r0, #0
1595:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 805              		.loc 1 1595 0
 806 0026 38BD     		pop	{r3, r4, r5, pc}
 807              	.LVL56:
 808              	.L72:
1550:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 809              		.loc 1 1550 0
 810 0028 9A68     		ldr	r2, [r3, #8]
 811 002a 22F08002 		bic	r2, r2, #128
 812 002e 9A60     		str	r2, [r3, #8]
1553:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 813              		.loc 1 1553 0
 814 0030 C06E     		ldr	r0, [r0, #108]
 815              	.LVL57:
 816 0032 10B1     		cbz	r0, .L66
1555:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 817              		.loc 1 1555 0
 818 0034 FFF7FEFF 		bl	HAL_DMA_Abort
 819              	.LVL58:
 820 0038 18B9     		cbnz	r0, .L74
 821              	.L66:
1567:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 822              		.loc 1 1567 0
 823 003a 2046     		mov	r0, r4
 824 003c FFF7FEFF 		bl	UART_EndTxTransfer
 825              	.LVL59:
 826 0040 E9E7     		b	.L65
 827              	.L74:
1557:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
 828              		.loc 1 1557 0
 829 0042 E06E     		ldr	r0, [r4, #108]
 830 0044 FFF7FEFF 		bl	HAL_DMA_GetError
 831              	.LVL60:
 832 0048 2028     		cmp	r0, #32
ARM GAS  /tmp/ccwHIqYH.s 			page 84


 833 004a F6D1     		bne	.L66
1560:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 834              		.loc 1 1560 0
 835 004c 1023     		movs	r3, #16
 836 004e C4F88030 		str	r3, [r4, #128]
1562:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
 837              		.loc 1 1562 0
 838 0052 0320     		movs	r0, #3
 839 0054 38BD     		pop	{r3, r4, r5, pc}
 840              	.LVL61:
 841              	.L73:
1574:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 842              		.loc 1 1574 0
 843 0056 9A68     		ldr	r2, [r3, #8]
 844 0058 22F04002 		bic	r2, r2, #64
 845 005c 9A60     		str	r2, [r3, #8]
1577:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 846              		.loc 1 1577 0
 847 005e 206F     		ldr	r0, [r4, #112]
 848 0060 10B1     		cbz	r0, .L68
1579:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 849              		.loc 1 1579 0
 850 0062 FFF7FEFF 		bl	HAL_DMA_Abort
 851              	.LVL62:
 852 0066 20B9     		cbnz	r0, .L75
 853              	.L68:
1591:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 854              		.loc 1 1591 0
 855 0068 2046     		mov	r0, r4
 856 006a FFF7FEFF 		bl	UART_EndRxTransfer
 857              	.LVL63:
1594:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 858              		.loc 1 1594 0
 859 006e 0020     		movs	r0, #0
 860 0070 38BD     		pop	{r3, r4, r5, pc}
 861              	.LVL64:
 862              	.L75:
1581:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
 863              		.loc 1 1581 0
 864 0072 206F     		ldr	r0, [r4, #112]
 865 0074 FFF7FEFF 		bl	HAL_DMA_GetError
 866              	.LVL65:
 867 0078 2028     		cmp	r0, #32
 868 007a F5D1     		bne	.L68
1584:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 869              		.loc 1 1584 0
 870 007c 1023     		movs	r3, #16
 871 007e C4F88030 		str	r3, [r4, #128]
1586:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
 872              		.loc 1 1586 0
 873 0082 0320     		movs	r0, #3
 874 0084 38BD     		pop	{r3, r4, r5, pc}
 875              	.LVL66:
 876              	.L69:
1594:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 877              		.loc 1 1594 0
 878 0086 0020     		movs	r0, #0
ARM GAS  /tmp/ccwHIqYH.s 			page 85


 879 0088 38BD     		pop	{r3, r4, r5, pc}
 880              		.cfi_endproc
 881              	.LFE156:
 883              		.section	.text.HAL_UART_Abort,"ax",%progbits
 884              		.align	1
 885              		.global	HAL_UART_Abort
 886              		.syntax unified
 887              		.thumb
 888              		.thumb_func
 889              		.fpu fpv5-d16
 891              	HAL_UART_Abort:
 892              	.LFB157:
1610:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 893              		.loc 1 1610 0
 894              		.cfi_startproc
 895              		@ args = 0, pretend = 0, frame = 0
 896              		@ frame_needed = 0, uses_anonymous_args = 0
 897              	.LVL67:
 898 0000 10B5     		push	{r4, lr}
 899              	.LCFI8:
 900              		.cfi_def_cfa_offset 8
 901              		.cfi_offset 4, -8
 902              		.cfi_offset 14, -4
 903 0002 0446     		mov	r4, r0
1612:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 904              		.loc 1 1612 0
 905 0004 0268     		ldr	r2, [r0]
 906 0006 1368     		ldr	r3, [r2]
 907 0008 23F4F073 		bic	r3, r3, #480
 908 000c 1360     		str	r3, [r2]
1613:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 909              		.loc 1 1613 0
 910 000e 0268     		ldr	r2, [r0]
 911 0010 9368     		ldr	r3, [r2, #8]
 912 0012 23F00103 		bic	r3, r3, #1
 913 0016 9360     		str	r3, [r2, #8]
1616:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 914              		.loc 1 1616 0
 915 0018 036E     		ldr	r3, [r0, #96]
 916 001a 012B     		cmp	r3, #1
 917 001c 35D0     		beq	.L82
 918              	.L77:
1622:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 919              		.loc 1 1622 0
 920 001e 2368     		ldr	r3, [r4]
 921 0020 9A68     		ldr	r2, [r3, #8]
 922 0022 12F0800F 		tst	r2, #128
 923 0026 0BD0     		beq	.L78
1624:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 924              		.loc 1 1624 0
 925 0028 9A68     		ldr	r2, [r3, #8]
 926 002a 22F08002 		bic	r2, r2, #128
 927 002e 9A60     		str	r2, [r3, #8]
1627:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 928              		.loc 1 1627 0
 929 0030 E36E     		ldr	r3, [r4, #108]
 930 0032 2BB1     		cbz	r3, .L78
ARM GAS  /tmp/ccwHIqYH.s 			page 86


1631:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 931              		.loc 1 1631 0
 932 0034 0022     		movs	r2, #0
 933 0036 1A65     		str	r2, [r3, #80]
1633:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 934              		.loc 1 1633 0
 935 0038 E06E     		ldr	r0, [r4, #108]
 936              	.LVL68:
 937 003a FFF7FEFF 		bl	HAL_DMA_Abort
 938              	.LVL69:
 939 003e 50BB     		cbnz	r0, .L83
 940              	.L78:
1647:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 941              		.loc 1 1647 0
 942 0040 2368     		ldr	r3, [r4]
 943 0042 9A68     		ldr	r2, [r3, #8]
 944 0044 12F0400F 		tst	r2, #64
 945 0048 0BD0     		beq	.L80
1649:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 946              		.loc 1 1649 0
 947 004a 9A68     		ldr	r2, [r3, #8]
 948 004c 22F04002 		bic	r2, r2, #64
 949 0050 9A60     		str	r2, [r3, #8]
1652:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 950              		.loc 1 1652 0
 951 0052 236F     		ldr	r3, [r4, #112]
 952 0054 2BB1     		cbz	r3, .L80
1656:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 953              		.loc 1 1656 0
 954 0056 0022     		movs	r2, #0
 955 0058 1A65     		str	r2, [r3, #80]
1658:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 956              		.loc 1 1658 0
 957 005a 206F     		ldr	r0, [r4, #112]
 958 005c FFF7FEFF 		bl	HAL_DMA_Abort
 959              	.LVL70:
 960 0060 18BB     		cbnz	r0, .L84
 961              	.L80:
1672:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
 962              		.loc 1 1672 0
 963 0062 0020     		movs	r0, #0
 964 0064 A4F85200 		strh	r0, [r4, #82]	@ movhi
1673:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 965              		.loc 1 1673 0
 966 0068 A4F85A00 		strh	r0, [r4, #90]	@ movhi
1676:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 967              		.loc 1 1676 0
 968 006c 2368     		ldr	r3, [r4]
 969 006e 0F22     		movs	r2, #15
 970 0070 1A62     		str	r2, [r3, #32]
1680:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 971              		.loc 1 1680 0
 972 0072 2268     		ldr	r2, [r4]
 973 0074 9369     		ldr	r3, [r2, #24]
 974 0076 43F00803 		orr	r3, r3, #8
 975 007a 9361     		str	r3, [r2, #24]
1683:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
ARM GAS  /tmp/ccwHIqYH.s 			page 87


 976              		.loc 1 1683 0
 977 007c 2023     		movs	r3, #32
 978 007e A367     		str	r3, [r4, #120]
1684:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 979              		.loc 1 1684 0
 980 0080 E367     		str	r3, [r4, #124]
1685:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 981              		.loc 1 1685 0
 982 0082 2066     		str	r0, [r4, #96]
1687:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 983              		.loc 1 1687 0
 984 0084 C4F88000 		str	r0, [r4, #128]
1690:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 985              		.loc 1 1690 0
 986 0088 10BD     		pop	{r4, pc}
 987              	.LVL71:
 988              	.L82:
1618:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 989              		.loc 1 1618 0
 990 008a 0268     		ldr	r2, [r0]
 991 008c 1368     		ldr	r3, [r2]
 992 008e 23F01003 		bic	r3, r3, #16
 993 0092 1360     		str	r3, [r2]
 994 0094 C3E7     		b	.L77
 995              	.LVL72:
 996              	.L83:
1635:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
 997              		.loc 1 1635 0
 998 0096 E06E     		ldr	r0, [r4, #108]
 999 0098 FFF7FEFF 		bl	HAL_DMA_GetError
 1000              	.LVL73:
 1001 009c 2028     		cmp	r0, #32
 1002 009e CFD1     		bne	.L78
1638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1003              		.loc 1 1638 0
 1004 00a0 1023     		movs	r3, #16
 1005 00a2 C4F88030 		str	r3, [r4, #128]
1640:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
 1006              		.loc 1 1640 0
 1007 00a6 0320     		movs	r0, #3
 1008 00a8 10BD     		pop	{r4, pc}
 1009              	.LVL74:
 1010              	.L84:
1660:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
 1011              		.loc 1 1660 0
 1012 00aa 206F     		ldr	r0, [r4, #112]
 1013 00ac FFF7FEFF 		bl	HAL_DMA_GetError
 1014              	.LVL75:
 1015 00b0 2028     		cmp	r0, #32
 1016 00b2 D6D1     		bne	.L80
1663:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1017              		.loc 1 1663 0
 1018 00b4 1023     		movs	r3, #16
 1019 00b6 C4F88030 		str	r3, [r4, #128]
1665:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
 1020              		.loc 1 1665 0
 1021 00ba 0320     		movs	r0, #3
ARM GAS  /tmp/ccwHIqYH.s 			page 88


 1022 00bc 10BD     		pop	{r4, pc}
 1023              		.cfi_endproc
 1024              	.LFE157:
 1026              		.section	.text.HAL_UART_AbortTransmit,"ax",%progbits
 1027              		.align	1
 1028              		.global	HAL_UART_AbortTransmit
 1029              		.syntax unified
 1030              		.thumb
 1031              		.thumb_func
 1032              		.fpu fpv5-d16
 1034              	HAL_UART_AbortTransmit:
 1035              	.LFB158:
1705:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
 1036              		.loc 1 1705 0
 1037              		.cfi_startproc
 1038              		@ args = 0, pretend = 0, frame = 0
 1039              		@ frame_needed = 0, uses_anonymous_args = 0
 1040              	.LVL76:
 1041 0000 10B5     		push	{r4, lr}
 1042              	.LCFI9:
 1043              		.cfi_def_cfa_offset 8
 1044              		.cfi_offset 4, -8
 1045              		.cfi_offset 14, -4
 1046 0002 0446     		mov	r4, r0
1707:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1047              		.loc 1 1707 0
 1048 0004 0268     		ldr	r2, [r0]
 1049 0006 1368     		ldr	r3, [r2]
 1050 0008 23F0C003 		bic	r3, r3, #192
 1051 000c 1360     		str	r3, [r2]
1710:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 1052              		.loc 1 1710 0
 1053 000e 0368     		ldr	r3, [r0]
 1054 0010 9A68     		ldr	r2, [r3, #8]
 1055 0012 12F0800F 		tst	r2, #128
 1056 0016 0BD0     		beq	.L86
1712:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1057              		.loc 1 1712 0
 1058 0018 9A68     		ldr	r2, [r3, #8]
 1059 001a 22F08002 		bic	r2, r2, #128
 1060 001e 9A60     		str	r2, [r3, #8]
1715:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 1061              		.loc 1 1715 0
 1062 0020 C36E     		ldr	r3, [r0, #108]
 1063 0022 2BB1     		cbz	r3, .L86
1719:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1064              		.loc 1 1719 0
 1065 0024 0022     		movs	r2, #0
 1066 0026 1A65     		str	r2, [r3, #80]
1721:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 1067              		.loc 1 1721 0
 1068 0028 C06E     		ldr	r0, [r0, #108]
 1069              	.LVL77:
 1070 002a FFF7FEFF 		bl	HAL_DMA_Abort
 1071              	.LVL78:
 1072 002e 28B9     		cbnz	r0, .L89
 1073              	.L86:
ARM GAS  /tmp/ccwHIqYH.s 			page 89


1735:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1074              		.loc 1 1735 0
 1075 0030 0020     		movs	r0, #0
 1076 0032 A4F85200 		strh	r0, [r4, #82]	@ movhi
1739:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1077              		.loc 1 1739 0
 1078 0036 2023     		movs	r3, #32
 1079 0038 A367     		str	r3, [r4, #120]
1742:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1080              		.loc 1 1742 0
 1081 003a 10BD     		pop	{r4, pc}
 1082              	.LVL79:
 1083              	.L89:
1723:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
 1084              		.loc 1 1723 0
 1085 003c E06E     		ldr	r0, [r4, #108]
 1086 003e FFF7FEFF 		bl	HAL_DMA_GetError
 1087              	.LVL80:
 1088 0042 2028     		cmp	r0, #32
 1089 0044 F4D1     		bne	.L86
1726:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1090              		.loc 1 1726 0
 1091 0046 1023     		movs	r3, #16
 1092 0048 C4F88030 		str	r3, [r4, #128]
1728:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
 1093              		.loc 1 1728 0
 1094 004c 0320     		movs	r0, #3
 1095 004e 10BD     		pop	{r4, pc}
 1096              		.cfi_endproc
 1097              	.LFE158:
 1099              		.section	.text.HAL_UART_AbortReceive,"ax",%progbits
 1100              		.align	1
 1101              		.global	HAL_UART_AbortReceive
 1102              		.syntax unified
 1103              		.thumb
 1104              		.thumb_func
 1105              		.fpu fpv5-d16
 1107              	HAL_UART_AbortReceive:
 1108              	.LFB159:
1757:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1109              		.loc 1 1757 0
 1110              		.cfi_startproc
 1111              		@ args = 0, pretend = 0, frame = 0
 1112              		@ frame_needed = 0, uses_anonymous_args = 0
 1113              	.LVL81:
 1114 0000 10B5     		push	{r4, lr}
 1115              	.LCFI10:
 1116              		.cfi_def_cfa_offset 8
 1117              		.cfi_offset 4, -8
 1118              		.cfi_offset 14, -4
 1119 0002 0446     		mov	r4, r0
1759:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1120              		.loc 1 1759 0
 1121 0004 0268     		ldr	r2, [r0]
 1122 0006 1368     		ldr	r3, [r2]
 1123 0008 23F49073 		bic	r3, r3, #288
 1124 000c 1360     		str	r3, [r2]
ARM GAS  /tmp/ccwHIqYH.s 			page 90


1760:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1125              		.loc 1 1760 0
 1126 000e 0268     		ldr	r2, [r0]
 1127 0010 9368     		ldr	r3, [r2, #8]
 1128 0012 23F00103 		bic	r3, r3, #1
 1129 0016 9360     		str	r3, [r2, #8]
1763:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 1130              		.loc 1 1763 0
 1131 0018 036E     		ldr	r3, [r0, #96]
 1132 001a 012B     		cmp	r3, #1
 1133 001c 1FD0     		beq	.L95
 1134              	.L91:
1769:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 1135              		.loc 1 1769 0
 1136 001e 2368     		ldr	r3, [r4]
 1137 0020 9A68     		ldr	r2, [r3, #8]
 1138 0022 12F0400F 		tst	r2, #64
 1139 0026 0BD0     		beq	.L92
1771:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1140              		.loc 1 1771 0
 1141 0028 9A68     		ldr	r2, [r3, #8]
 1142 002a 22F04002 		bic	r2, r2, #64
 1143 002e 9A60     		str	r2, [r3, #8]
1774:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 1144              		.loc 1 1774 0
 1145 0030 236F     		ldr	r3, [r4, #112]
 1146 0032 2BB1     		cbz	r3, .L92
1778:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1147              		.loc 1 1778 0
 1148 0034 0022     		movs	r2, #0
 1149 0036 1A65     		str	r2, [r3, #80]
1780:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 1150              		.loc 1 1780 0
 1151 0038 206F     		ldr	r0, [r4, #112]
 1152              	.LVL82:
 1153 003a FFF7FEFF 		bl	HAL_DMA_Abort
 1154              	.LVL83:
 1155 003e A0B9     		cbnz	r0, .L96
 1156              	.L92:
1794:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1157              		.loc 1 1794 0
 1158 0040 0020     		movs	r0, #0
 1159 0042 A4F85A00 		strh	r0, [r4, #90]	@ movhi
1797:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1160              		.loc 1 1797 0
 1161 0046 2368     		ldr	r3, [r4]
 1162 0048 0F22     		movs	r2, #15
 1163 004a 1A62     		str	r2, [r3, #32]
1800:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1164              		.loc 1 1800 0
 1165 004c 2268     		ldr	r2, [r4]
 1166 004e 9369     		ldr	r3, [r2, #24]
 1167 0050 43F00803 		orr	r3, r3, #8
 1168 0054 9361     		str	r3, [r2, #24]
1803:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 1169              		.loc 1 1803 0
 1170 0056 2023     		movs	r3, #32
ARM GAS  /tmp/ccwHIqYH.s 			page 91


 1171 0058 E367     		str	r3, [r4, #124]
1804:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1172              		.loc 1 1804 0
 1173 005a 2066     		str	r0, [r4, #96]
1807:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1174              		.loc 1 1807 0
 1175 005c 10BD     		pop	{r4, pc}
 1176              	.LVL84:
 1177              	.L95:
1765:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 1178              		.loc 1 1765 0
 1179 005e 0268     		ldr	r2, [r0]
 1180 0060 1368     		ldr	r3, [r2]
 1181 0062 23F01003 		bic	r3, r3, #16
 1182 0066 1360     		str	r3, [r2]
 1183 0068 D9E7     		b	.L91
 1184              	.LVL85:
 1185              	.L96:
1782:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
 1186              		.loc 1 1782 0
 1187 006a 206F     		ldr	r0, [r4, #112]
 1188 006c FFF7FEFF 		bl	HAL_DMA_GetError
 1189              	.LVL86:
 1190 0070 2028     		cmp	r0, #32
 1191 0072 E5D1     		bne	.L92
1785:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1192              		.loc 1 1785 0
 1193 0074 1023     		movs	r3, #16
 1194 0076 C4F88030 		str	r3, [r4, #128]
1787:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
 1195              		.loc 1 1787 0
 1196 007a 0320     		movs	r0, #3
 1197 007c 10BD     		pop	{r4, pc}
 1198              		.cfi_endproc
 1199              	.LFE159:
 1201              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 1202              		.align	1
 1203              		.weak	HAL_UART_TxCpltCallback
 1204              		.syntax unified
 1205              		.thumb
 1206              		.thumb_func
 1207              		.fpu fpv5-d16
 1209              	HAL_UART_TxCpltCallback:
 1210              	.LFB164:
2441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 1211              		.loc 1 2441 0
 1212              		.cfi_startproc
 1213              		@ args = 0, pretend = 0, frame = 0
 1214              		@ frame_needed = 0, uses_anonymous_args = 0
 1215              		@ link register save eliminated.
 1216              	.LVL87:
 1217 0000 7047     		bx	lr
 1218              		.cfi_endproc
 1219              	.LFE164:
 1221              		.section	.text.UART_DMATransmitCplt,"ax",%progbits
 1222              		.align	1
 1223              		.syntax unified
ARM GAS  /tmp/ccwHIqYH.s 			page 92


 1224              		.thumb
 1225              		.thumb_func
 1226              		.fpu fpv5-d16
 1228              	UART_DMATransmitCplt:
 1229              	.LFB193:
3383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 1230              		.loc 1 3383 0
 1231              		.cfi_startproc
 1232              		@ args = 0, pretend = 0, frame = 0
 1233              		@ frame_needed = 0, uses_anonymous_args = 0
 1234              	.LVL88:
3383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 1235              		.loc 1 3383 0
 1236 0000 08B5     		push	{r3, lr}
 1237              	.LCFI11:
 1238              		.cfi_def_cfa_offset 8
 1239              		.cfi_offset 3, -8
 1240              		.cfi_offset 14, -4
3384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1241              		.loc 1 3384 0
 1242 0002 836B     		ldr	r3, [r0, #56]
 1243              	.LVL89:
3387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 1244              		.loc 1 3387 0
 1245 0004 C269     		ldr	r2, [r0, #28]
 1246 0006 B2F5807F 		cmp	r2, #256
 1247 000a 0DD0     		beq	.L99
3389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1248              		.loc 1 3389 0
 1249 000c 0022     		movs	r2, #0
 1250 000e A3F85220 		strh	r2, [r3, #82]	@ movhi
3393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1251              		.loc 1 3393 0
 1252 0012 1968     		ldr	r1, [r3]
 1253 0014 8A68     		ldr	r2, [r1, #8]
 1254 0016 22F08002 		bic	r2, r2, #128
 1255 001a 8A60     		str	r2, [r1, #8]
3396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 1256              		.loc 1 3396 0
 1257 001c 1A68     		ldr	r2, [r3]
 1258 001e 1368     		ldr	r3, [r2]
 1259              	.LVL90:
 1260 0020 43F04003 		orr	r3, r3, #64
 1261 0024 1360     		str	r3, [r2]
 1262 0026 08BD     		pop	{r3, pc}
 1263              	.LVL91:
 1264              	.L99:
3406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 1265              		.loc 1 3406 0
 1266 0028 1846     		mov	r0, r3
 1267              	.LVL92:
 1268 002a FFF7FEFF 		bl	HAL_UART_TxCpltCallback
 1269              	.LVL93:
 1270 002e 08BD     		pop	{r3, pc}
 1271              		.cfi_endproc
 1272              	.LFE193:
 1274              		.section	.text.UART_EndTransmit_IT,"ax",%progbits
ARM GAS  /tmp/ccwHIqYH.s 			page 93


 1275              		.align	1
 1276              		.syntax unified
 1277              		.thumb
 1278              		.thumb_func
 1279              		.fpu fpv5-d16
 1281              	UART_EndTransmit_IT:
 1282              	.LFB205:
3804:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3805:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3806:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3807:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Wrap up transmission in non-blocking mode.
3808:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
3809:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3810:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3811:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3812:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
3813:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 1283              		.loc 1 3813 0
 1284              		.cfi_startproc
 1285              		@ args = 0, pretend = 0, frame = 0
 1286              		@ frame_needed = 0, uses_anonymous_args = 0
 1287              	.LVL94:
 1288 0000 08B5     		push	{r3, lr}
 1289              	.LCFI12:
 1290              		.cfi_def_cfa_offset 8
 1291              		.cfi_offset 3, -8
 1292              		.cfi_offset 14, -4
3814:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the UART Transmit Complete Interrupt */
3815:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 1293              		.loc 1 3815 0
 1294 0002 0168     		ldr	r1, [r0]
 1295 0004 0A68     		ldr	r2, [r1]
 1296 0006 22F04002 		bic	r2, r2, #64
 1297 000a 0A60     		str	r2, [r1]
3816:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3817:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Tx process is ended, restore huart->gState to Ready */
3818:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 1298              		.loc 1 3818 0
 1299 000c 2022     		movs	r2, #32
 1300 000e 8267     		str	r2, [r0, #120]
3819:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3820:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Cleat TxISR function pointer */
3821:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxISR = NULL;
 1301              		.loc 1 3821 0
 1302 0010 0022     		movs	r2, #0
 1303 0012 8266     		str	r2, [r0, #104]
3822:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3823:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3824:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call registered Tx complete callback*/
3825:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxCpltCallback(huart);
3826:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3827:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call legacy weak Tx complete callback*/
3828:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_TxCpltCallback(huart);
 1304              		.loc 1 3828 0
 1305 0014 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
 1306              	.LVL95:
 1307 0018 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccwHIqYH.s 			page 94


 1308              		.cfi_endproc
 1309              	.LFE205:
 1311              		.section	.text.HAL_UART_TxHalfCpltCallback,"ax",%progbits
 1312              		.align	1
 1313              		.weak	HAL_UART_TxHalfCpltCallback
 1314              		.syntax unified
 1315              		.thumb
 1316              		.thumb_func
 1317              		.fpu fpv5-d16
 1319              	HAL_UART_TxHalfCpltCallback:
 1320              	.LFB165:
2456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 1321              		.loc 1 2456 0
 1322              		.cfi_startproc
 1323              		@ args = 0, pretend = 0, frame = 0
 1324              		@ frame_needed = 0, uses_anonymous_args = 0
 1325              		@ link register save eliminated.
 1326              	.LVL96:
 1327 0000 7047     		bx	lr
 1328              		.cfi_endproc
 1329              	.LFE165:
 1331              		.section	.text.UART_DMATxHalfCplt,"ax",%progbits
 1332              		.align	1
 1333              		.syntax unified
 1334              		.thumb
 1335              		.thumb_func
 1336              		.fpu fpv5-d16
 1338              	UART_DMATxHalfCplt:
 1339              	.LFB194:
3417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 1340              		.loc 1 3417 0
 1341              		.cfi_startproc
 1342              		@ args = 0, pretend = 0, frame = 0
 1343              		@ frame_needed = 0, uses_anonymous_args = 0
 1344              	.LVL97:
3417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 1345              		.loc 1 3417 0
 1346 0000 08B5     		push	{r3, lr}
 1347              	.LCFI13:
 1348              		.cfi_def_cfa_offset 8
 1349              		.cfi_offset 3, -8
 1350              		.cfi_offset 14, -4
 1351              	.LVL98:
3425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 1352              		.loc 1 3425 0
 1353 0002 806B     		ldr	r0, [r0, #56]
 1354              	.LVL99:
 1355 0004 FFF7FEFF 		bl	HAL_UART_TxHalfCpltCallback
 1356              	.LVL100:
 1357 0008 08BD     		pop	{r3, pc}
 1358              		.cfi_endproc
 1359              	.LFE194:
 1361              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 1362              		.align	1
 1363              		.weak	HAL_UART_RxCpltCallback
 1364              		.syntax unified
 1365              		.thumb
ARM GAS  /tmp/ccwHIqYH.s 			page 95


 1366              		.thumb_func
 1367              		.fpu fpv5-d16
 1369              	HAL_UART_RxCpltCallback:
 1370              	.LFB166:
2471:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 1371              		.loc 1 2471 0
 1372              		.cfi_startproc
 1373              		@ args = 0, pretend = 0, frame = 0
 1374              		@ frame_needed = 0, uses_anonymous_args = 0
 1375              		@ link register save eliminated.
 1376              	.LVL101:
 1377 0000 7047     		bx	lr
 1378              		.cfi_endproc
 1379              	.LFE166:
 1381              		.section	.text.HAL_UART_RxHalfCpltCallback,"ax",%progbits
 1382              		.align	1
 1383              		.weak	HAL_UART_RxHalfCpltCallback
 1384              		.syntax unified
 1385              		.thumb
 1386              		.thumb_func
 1387              		.fpu fpv5-d16
 1389              	HAL_UART_RxHalfCpltCallback:
 1390              	.LFB167:
2486:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 1391              		.loc 1 2486 0
 1392              		.cfi_startproc
 1393              		@ args = 0, pretend = 0, frame = 0
 1394              		@ frame_needed = 0, uses_anonymous_args = 0
 1395              		@ link register save eliminated.
 1396              	.LVL102:
 1397 0000 7047     		bx	lr
 1398              		.cfi_endproc
 1399              	.LFE167:
 1401              		.section	.text.HAL_UART_ErrorCallback,"ax",%progbits
 1402              		.align	1
 1403              		.weak	HAL_UART_ErrorCallback
 1404              		.syntax unified
 1405              		.thumb
 1406              		.thumb_func
 1407              		.fpu fpv5-d16
 1409              	HAL_UART_ErrorCallback:
 1410              	.LFB168:
2501:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 1411              		.loc 1 2501 0
 1412              		.cfi_startproc
 1413              		@ args = 0, pretend = 0, frame = 0
 1414              		@ frame_needed = 0, uses_anonymous_args = 0
 1415              		@ link register save eliminated.
 1416              	.LVL103:
 1417 0000 7047     		bx	lr
 1418              		.cfi_endproc
 1419              	.LFE168:
 1421              		.section	.text.UART_DMAError,"ax",%progbits
 1422              		.align	1
 1423              		.syntax unified
 1424              		.thumb
 1425              		.thumb_func
ARM GAS  /tmp/ccwHIqYH.s 			page 96


 1426              		.fpu fpv5-d16
 1428              	UART_DMAError:
 1429              	.LFB197:
3526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 1430              		.loc 1 3526 0
 1431              		.cfi_startproc
 1432              		@ args = 0, pretend = 0, frame = 0
 1433              		@ frame_needed = 0, uses_anonymous_args = 0
 1434              	.LVL104:
3526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 1435              		.loc 1 3526 0
 1436 0000 38B5     		push	{r3, r4, r5, lr}
 1437              	.LCFI14:
 1438              		.cfi_def_cfa_offset 16
 1439              		.cfi_offset 3, -16
 1440              		.cfi_offset 4, -12
 1441              		.cfi_offset 5, -8
 1442              		.cfi_offset 14, -4
3527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1443              		.loc 1 3527 0
 1444 0002 846B     		ldr	r4, [r0, #56]
 1445              	.LVL105:
3529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
 1446              		.loc 1 3529 0
 1447 0004 A26F     		ldr	r2, [r4, #120]
 1448              	.LVL106:
3530:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1449              		.loc 1 3530 0
 1450 0006 E56F     		ldr	r5, [r4, #124]
 1451              	.LVL107:
3533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
 1452              		.loc 1 3533 0
 1453 0008 2368     		ldr	r3, [r4]
 1454 000a 9B68     		ldr	r3, [r3, #8]
 1455 000c 13F0800F 		tst	r3, #128
 1456 0010 01D0     		beq	.L111
3533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
 1457              		.loc 1 3533 0 is_stmt 0 discriminator 1
 1458 0012 212A     		cmp	r2, #33
 1459 0014 10D0     		beq	.L114
 1460              	.LVL108:
 1461              	.L111:
3541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
 1462              		.loc 1 3541 0 is_stmt 1
 1463 0016 2368     		ldr	r3, [r4]
 1464 0018 9B68     		ldr	r3, [r3, #8]
 1465 001a 13F0400F 		tst	r3, #64
 1466 001e 01D0     		beq	.L112
3541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
 1467              		.loc 1 3541 0 is_stmt 0 discriminator 1
 1468 0020 222D     		cmp	r5, #34
 1469 0022 10D0     		beq	.L115
 1470              	.L112:
3548:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1471              		.loc 1 3548 0 is_stmt 1
 1472 0024 D4F88030 		ldr	r3, [r4, #128]
 1473 0028 43F01003 		orr	r3, r3, #16
ARM GAS  /tmp/ccwHIqYH.s 			page 97


 1474 002c C4F88030 		str	r3, [r4, #128]
3555:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 1475              		.loc 1 3555 0
 1476 0030 2046     		mov	r0, r4
 1477 0032 FFF7FEFF 		bl	HAL_UART_ErrorCallback
 1478              	.LVL109:
 1479 0036 38BD     		pop	{r3, r4, r5, pc}
 1480              	.LVL110:
 1481              	.L114:
3536:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 1482              		.loc 1 3536 0
 1483 0038 0023     		movs	r3, #0
 1484 003a A4F85230 		strh	r3, [r4, #82]	@ movhi
3537:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 1485              		.loc 1 3537 0
 1486 003e 2046     		mov	r0, r4
 1487              	.LVL111:
 1488 0040 FFF7FEFF 		bl	UART_EndTxTransfer
 1489              	.LVL112:
 1490 0044 E7E7     		b	.L111
 1491              	.L115:
3544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 1492              		.loc 1 3544 0
 1493 0046 0023     		movs	r3, #0
 1494 0048 A4F85A30 		strh	r3, [r4, #90]	@ movhi
3545:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 1495              		.loc 1 3545 0
 1496 004c 2046     		mov	r0, r4
 1497 004e FFF7FEFF 		bl	UART_EndRxTransfer
 1498              	.LVL113:
 1499 0052 E7E7     		b	.L112
 1500              		.cfi_endproc
 1501              	.LFE197:
 1503              		.section	.text.UART_DMAAbortOnError,"ax",%progbits
 1504              		.align	1
 1505              		.syntax unified
 1506              		.thumb
 1507              		.thumb_func
 1508              		.fpu fpv5-d16
 1510              	UART_DMAAbortOnError:
 1511              	.LFB198:
3566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 1512              		.loc 1 3566 0
 1513              		.cfi_startproc
 1514              		@ args = 0, pretend = 0, frame = 0
 1515              		@ frame_needed = 0, uses_anonymous_args = 0
 1516              	.LVL114:
 1517 0000 08B5     		push	{r3, lr}
 1518              	.LCFI15:
 1519              		.cfi_def_cfa_offset 8
 1520              		.cfi_offset 3, -8
 1521              		.cfi_offset 14, -4
3567:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
 1522              		.loc 1 3567 0
 1523 0002 806B     		ldr	r0, [r0, #56]
 1524              	.LVL115:
3568:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxXferCount = 0U;
ARM GAS  /tmp/ccwHIqYH.s 			page 98


 1525              		.loc 1 3568 0
 1526 0004 0023     		movs	r3, #0
 1527 0006 A0F85A30 		strh	r3, [r0, #90]	@ movhi
3569:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1528              		.loc 1 3569 0
 1529 000a A0F85230 		strh	r3, [r0, #82]	@ movhi
3576:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 1530              		.loc 1 3576 0
 1531 000e FFF7FEFF 		bl	HAL_UART_ErrorCallback
 1532              	.LVL116:
 1533 0012 08BD     		pop	{r3, pc}
 1534              		.cfi_endproc
 1535              	.LFE198:
 1537              		.section	.text.HAL_UART_AbortCpltCallback,"ax",%progbits
 1538              		.align	1
 1539              		.weak	HAL_UART_AbortCpltCallback
 1540              		.syntax unified
 1541              		.thumb
 1542              		.thumb_func
 1543              		.fpu fpv5-d16
 1545              	HAL_UART_AbortCpltCallback:
 1546              	.LFB169:
2516:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 1547              		.loc 1 2516 0
 1548              		.cfi_startproc
 1549              		@ args = 0, pretend = 0, frame = 0
 1550              		@ frame_needed = 0, uses_anonymous_args = 0
 1551              		@ link register save eliminated.
 1552              	.LVL117:
 1553 0000 7047     		bx	lr
 1554              		.cfi_endproc
 1555              	.LFE169:
 1557              		.section	.text.HAL_UART_Abort_IT,"ax",%progbits
 1558              		.align	1
 1559              		.global	HAL_UART_Abort_IT
 1560              		.syntax unified
 1561              		.thumb
 1562              		.thumb_func
 1563              		.fpu fpv5-d16
 1565              	HAL_UART_Abort_IT:
 1566              	.LFB160:
1824:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t abortcplt = 1U;
 1567              		.loc 1 1824 0
 1568              		.cfi_startproc
 1569              		@ args = 0, pretend = 0, frame = 0
 1570              		@ frame_needed = 0, uses_anonymous_args = 0
 1571              	.LVL118:
1824:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t abortcplt = 1U;
 1572              		.loc 1 1824 0
 1573 0000 10B5     		push	{r4, lr}
 1574              	.LCFI16:
 1575              		.cfi_def_cfa_offset 8
 1576              		.cfi_offset 4, -8
 1577              		.cfi_offset 14, -4
 1578 0002 0446     		mov	r4, r0
 1579              	.LVL119:
1828:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
ARM GAS  /tmp/ccwHIqYH.s 			page 99


 1580              		.loc 1 1828 0
 1581 0004 0268     		ldr	r2, [r0]
 1582 0006 1368     		ldr	r3, [r2]
 1583 0008 23F4F073 		bic	r3, r3, #480
 1584 000c 1360     		str	r3, [r2]
1829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1585              		.loc 1 1829 0
 1586 000e 0268     		ldr	r2, [r0]
 1587 0010 9368     		ldr	r3, [r2, #8]
 1588 0012 23F00103 		bic	r3, r3, #1
 1589 0016 9360     		str	r3, [r2, #8]
1832:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 1590              		.loc 1 1832 0
 1591 0018 036E     		ldr	r3, [r0, #96]
 1592 001a 012B     		cmp	r3, #1
 1593 001c 24D0     		beq	.L133
 1594              	.L120:
1840:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 1595              		.loc 1 1840 0
 1596 001e E36E     		ldr	r3, [r4, #108]
 1597 0020 33B1     		cbz	r3, .L121
1844:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 1598              		.loc 1 1844 0
 1599 0022 2268     		ldr	r2, [r4]
 1600 0024 9268     		ldr	r2, [r2, #8]
 1601 0026 12F0800F 		tst	r2, #128
 1602 002a 23D0     		beq	.L122
1846:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 1603              		.loc 1 1846 0
 1604 002c 2F4A     		ldr	r2, .L135
 1605 002e 1A65     		str	r2, [r3, #80]
 1606              	.L121:
1854:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 1607              		.loc 1 1854 0
 1608 0030 236F     		ldr	r3, [r4, #112]
 1609 0032 33B1     		cbz	r3, .L123
1858:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 1610              		.loc 1 1858 0
 1611 0034 2268     		ldr	r2, [r4]
 1612 0036 9268     		ldr	r2, [r2, #8]
 1613 0038 12F0400F 		tst	r2, #64
 1614 003c 1DD0     		beq	.L124
1860:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 1615              		.loc 1 1860 0
 1616 003e 2C4A     		ldr	r2, .L135+4
 1617 0040 1A65     		str	r2, [r3, #80]
 1618              	.L123:
1869:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 1619              		.loc 1 1869 0
 1620 0042 2368     		ldr	r3, [r4]
 1621 0044 9A68     		ldr	r2, [r3, #8]
 1622 0046 12F0800F 		tst	r2, #128
 1623 004a 19D0     		beq	.L128
1872:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1624              		.loc 1 1872 0
 1625 004c 9A68     		ldr	r2, [r3, #8]
 1626 004e 22F08002 		bic	r2, r2, #128
ARM GAS  /tmp/ccwHIqYH.s 			page 100


 1627 0052 9A60     		str	r2, [r3, #8]
1875:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 1628              		.loc 1 1875 0
 1629 0054 E06E     		ldr	r0, [r4, #108]
 1630              	.LVL120:
 1631 0056 48B3     		cbz	r0, .L129
1881:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 1632              		.loc 1 1881 0
 1633 0058 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 1634              	.LVL121:
 1635 005c 40B3     		cbz	r0, .L130
1883:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 1636              		.loc 1 1883 0
 1637 005e E36E     		ldr	r3, [r4, #108]
 1638 0060 0022     		movs	r2, #0
 1639 0062 1A65     		str	r2, [r3, #80]
1825:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1640              		.loc 1 1825 0
 1641 0064 0122     		movs	r2, #1
 1642 0066 0CE0     		b	.L125
 1643              	.LVL122:
 1644              	.L133:
1834:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 1645              		.loc 1 1834 0
 1646 0068 0268     		ldr	r2, [r0]
 1647 006a 1368     		ldr	r3, [r2]
 1648 006c 23F01003 		bic	r3, r3, #16
 1649 0070 1360     		str	r3, [r2]
 1650 0072 D4E7     		b	.L120
 1651              	.L122:
1850:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 1652              		.loc 1 1850 0
 1653 0074 0022     		movs	r2, #0
 1654 0076 1A65     		str	r2, [r3, #80]
 1655 0078 DAE7     		b	.L121
 1656              	.L124:
1864:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 1657              		.loc 1 1864 0
 1658 007a 0022     		movs	r2, #0
 1659 007c 1A65     		str	r2, [r3, #80]
 1660 007e E0E7     		b	.L123
 1661              	.L128:
1825:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1662              		.loc 1 1825 0
 1663 0080 0122     		movs	r2, #1
 1664              	.LVL123:
 1665              	.L125:
1893:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 1666              		.loc 1 1893 0
 1667 0082 2368     		ldr	r3, [r4]
 1668 0084 9968     		ldr	r1, [r3, #8]
 1669 0086 11F0400F 		tst	r1, #64
 1670 008a 0CD0     		beq	.L126
1895:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1671              		.loc 1 1895 0
 1672 008c 9968     		ldr	r1, [r3, #8]
 1673 008e 21F04001 		bic	r1, r1, #64
ARM GAS  /tmp/ccwHIqYH.s 			page 101


 1674 0092 9960     		str	r1, [r3, #8]
1898:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 1675              		.loc 1 1898 0
 1676 0094 206F     		ldr	r0, [r4, #112]
 1677 0096 30B1     		cbz	r0, .L126
1904:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 1678              		.loc 1 1904 0
 1679 0098 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 1680              	.LVL124:
 1681 009c 50B1     		cbz	r0, .L131
1906:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         abortcplt = 1U;
 1682              		.loc 1 1906 0
 1683 009e 236F     		ldr	r3, [r4, #112]
 1684 00a0 0022     		movs	r2, #0
 1685 00a2 1A65     		str	r2, [r3, #80]
 1686              	.LVL125:
1907:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 1687              		.loc 1 1907 0
 1688 00a4 0122     		movs	r2, #1
 1689              	.LVL126:
 1690              	.L126:
1917:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 1691              		.loc 1 1917 0
 1692 00a6 3AB9     		cbnz	r2, .L134
 1693              	.LVL127:
 1694              	.L127:
1953:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1695              		.loc 1 1953 0
 1696 00a8 0020     		movs	r0, #0
 1697 00aa 10BD     		pop	{r4, pc}
 1698              	.LVL128:
 1699              	.L129:
1825:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1700              		.loc 1 1825 0
 1701 00ac 0122     		movs	r2, #1
 1702 00ae E8E7     		b	.L125
 1703              	.L130:
1887:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 1704              		.loc 1 1887 0
 1705 00b0 0022     		movs	r2, #0
 1706 00b2 E6E7     		b	.L125
 1707              	.LVL129:
 1708              	.L131:
1911:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 1709              		.loc 1 1911 0
 1710 00b4 0022     		movs	r2, #0
 1711 00b6 F6E7     		b	.L126
 1712              	.LVL130:
 1713              	.L134:
1920:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount = 0U;
 1714              		.loc 1 1920 0
 1715 00b8 0023     		movs	r3, #0
 1716 00ba A4F85230 		strh	r3, [r4, #82]	@ movhi
1921:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1717              		.loc 1 1921 0
 1718 00be A4F85A30 		strh	r3, [r4, #90]	@ movhi
1924:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxISR = NULL;
ARM GAS  /tmp/ccwHIqYH.s 			page 102


 1719              		.loc 1 1924 0
 1720 00c2 6366     		str	r3, [r4, #100]
1925:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1721              		.loc 1 1925 0
 1722 00c4 A366     		str	r3, [r4, #104]
1928:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1723              		.loc 1 1928 0
 1724 00c6 C4F88030 		str	r3, [r4, #128]
1931:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1725              		.loc 1 1931 0
 1726 00ca 2268     		ldr	r2, [r4]
 1727              	.LVL131:
 1728 00cc 0F21     		movs	r1, #15
 1729 00ce 1162     		str	r1, [r2, #32]
1935:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1730              		.loc 1 1935 0
 1731 00d0 2168     		ldr	r1, [r4]
 1732 00d2 8A69     		ldr	r2, [r1, #24]
 1733 00d4 42F00802 		orr	r2, r2, #8
 1734 00d8 8A61     		str	r2, [r1, #24]
1938:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 1735              		.loc 1 1938 0
 1736 00da 2022     		movs	r2, #32
 1737 00dc A267     		str	r2, [r4, #120]
1939:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 1738              		.loc 1 1939 0
 1739 00de E267     		str	r2, [r4, #124]
1940:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1740              		.loc 1 1940 0
 1741 00e0 2366     		str	r3, [r4, #96]
1948:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 1742              		.loc 1 1948 0
 1743 00e2 2046     		mov	r0, r4
 1744 00e4 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 1745              	.LVL132:
 1746 00e8 DEE7     		b	.L127
 1747              	.L136:
 1748 00ea 00BF     		.align	2
 1749              	.L135:
 1750 00ec 00000000 		.word	UART_DMATxAbortCallback
 1751 00f0 00000000 		.word	UART_DMARxAbortCallback
 1752              		.cfi_endproc
 1753              	.LFE160:
 1755              		.section	.text.UART_DMARxAbortCallback,"ax",%progbits
 1756              		.align	1
 1757              		.syntax unified
 1758              		.thumb
 1759              		.thumb_func
 1760              		.fpu fpv5-d16
 1762              	UART_DMARxAbortCallback:
 1763              	.LFB200:
3639:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 1764              		.loc 1 3639 0
 1765              		.cfi_startproc
 1766              		@ args = 0, pretend = 0, frame = 0
 1767              		@ frame_needed = 0, uses_anonymous_args = 0
 1768              	.LVL133:
ARM GAS  /tmp/ccwHIqYH.s 			page 103


 1769 0000 08B5     		push	{r3, lr}
 1770              	.LCFI17:
 1771              		.cfi_def_cfa_offset 8
 1772              		.cfi_offset 3, -8
 1773              		.cfi_offset 14, -4
3640:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1774              		.loc 1 3640 0
 1775 0002 806B     		ldr	r0, [r0, #56]
 1776              	.LVL134:
3642:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1777              		.loc 1 3642 0
 1778 0004 036F     		ldr	r3, [r0, #112]
 1779 0006 0022     		movs	r2, #0
 1780 0008 1A65     		str	r2, [r3, #80]
3645:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 1781              		.loc 1 3645 0
 1782 000a C36E     		ldr	r3, [r0, #108]
 1783 000c 13B1     		cbz	r3, .L138
3647:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 1784              		.loc 1 3647 0
 1785 000e 1B6D     		ldr	r3, [r3, #80]
 1786 0010 03B1     		cbz	r3, .L138
 1787              	.LVL135:
 1788              	.L137:
 1789 0012 08BD     		pop	{r3, pc}
 1790              	.LVL136:
 1791              	.L138:
3654:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
 1792              		.loc 1 3654 0
 1793 0014 0023     		movs	r3, #0
 1794 0016 A0F85230 		strh	r3, [r0, #82]	@ movhi
3655:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1795              		.loc 1 3655 0
 1796 001a A0F85A30 		strh	r3, [r0, #90]	@ movhi
3658:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1797              		.loc 1 3658 0
 1798 001e C0F88030 		str	r3, [r0, #128]
3661:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1799              		.loc 1 3661 0
 1800 0022 0268     		ldr	r2, [r0]
 1801 0024 0F21     		movs	r1, #15
 1802 0026 1162     		str	r1, [r2, #32]
3664:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1803              		.loc 1 3664 0
 1804 0028 0168     		ldr	r1, [r0]
 1805 002a 8A69     		ldr	r2, [r1, #24]
 1806 002c 42F00802 		orr	r2, r2, #8
 1807 0030 8A61     		str	r2, [r1, #24]
3667:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 1808              		.loc 1 3667 0
 1809 0032 2022     		movs	r2, #32
 1810 0034 8267     		str	r2, [r0, #120]
3668:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 1811              		.loc 1 3668 0
 1812 0036 C267     		str	r2, [r0, #124]
3669:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1813              		.loc 1 3669 0
ARM GAS  /tmp/ccwHIqYH.s 			page 104


 1814 0038 0366     		str	r3, [r0, #96]
3677:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 1815              		.loc 1 3677 0
 1816 003a FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 1817              	.LVL137:
 1818 003e E8E7     		b	.L137
 1819              		.cfi_endproc
 1820              	.LFE200:
 1822              		.section	.text.UART_DMATxAbortCallback,"ax",%progbits
 1823              		.align	1
 1824              		.syntax unified
 1825              		.thumb
 1826              		.thumb_func
 1827              		.fpu fpv5-d16
 1829              	UART_DMATxAbortCallback:
 1830              	.LFB199:
3589:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 1831              		.loc 1 3589 0
 1832              		.cfi_startproc
 1833              		@ args = 0, pretend = 0, frame = 0
 1834              		@ frame_needed = 0, uses_anonymous_args = 0
 1835              	.LVL138:
 1836 0000 08B5     		push	{r3, lr}
 1837              	.LCFI18:
 1838              		.cfi_def_cfa_offset 8
 1839              		.cfi_offset 3, -8
 1840              		.cfi_offset 14, -4
3590:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1841              		.loc 1 3590 0
 1842 0002 806B     		ldr	r0, [r0, #56]
 1843              	.LVL139:
3592:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1844              		.loc 1 3592 0
 1845 0004 C36E     		ldr	r3, [r0, #108]
 1846 0006 0022     		movs	r2, #0
 1847 0008 1A65     		str	r2, [r3, #80]
3595:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 1848              		.loc 1 3595 0
 1849 000a 036F     		ldr	r3, [r0, #112]
 1850 000c 13B1     		cbz	r3, .L142
3597:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 1851              		.loc 1 3597 0
 1852 000e 1B6D     		ldr	r3, [r3, #80]
 1853 0010 03B1     		cbz	r3, .L142
 1854              	.LVL140:
 1855              	.L141:
 1856 0012 08BD     		pop	{r3, pc}
 1857              	.LVL141:
 1858              	.L142:
3604:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
 1859              		.loc 1 3604 0
 1860 0014 0023     		movs	r3, #0
 1861 0016 A0F85230 		strh	r3, [r0, #82]	@ movhi
3605:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1862              		.loc 1 3605 0
 1863 001a A0F85A30 		strh	r3, [r0, #90]	@ movhi
3608:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccwHIqYH.s 			page 105


 1864              		.loc 1 3608 0
 1865 001e C0F88030 		str	r3, [r0, #128]
3611:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1866              		.loc 1 3611 0
 1867 0022 0268     		ldr	r2, [r0]
 1868 0024 0F21     		movs	r1, #15
 1869 0026 1162     		str	r1, [r2, #32]
3615:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 1870              		.loc 1 3615 0
 1871 0028 2022     		movs	r2, #32
 1872 002a 8267     		str	r2, [r0, #120]
3616:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 1873              		.loc 1 3616 0
 1874 002c C267     		str	r2, [r0, #124]
3617:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1875              		.loc 1 3617 0
 1876 002e 0366     		str	r3, [r0, #96]
3625:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 1877              		.loc 1 3625 0
 1878 0030 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 1879              	.LVL142:
 1880 0034 EDE7     		b	.L141
 1881              		.cfi_endproc
 1882              	.LFE199:
 1884              		.section	.text.HAL_UART_AbortTransmitCpltCallback,"ax",%progbits
 1885              		.align	1
 1886              		.weak	HAL_UART_AbortTransmitCpltCallback
 1887              		.syntax unified
 1888              		.thumb
 1889              		.thumb_func
 1890              		.fpu fpv5-d16
 1892              	HAL_UART_AbortTransmitCpltCallback:
 1893              	.LFB170:
2531:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 1894              		.loc 1 2531 0
 1895              		.cfi_startproc
 1896              		@ args = 0, pretend = 0, frame = 0
 1897              		@ frame_needed = 0, uses_anonymous_args = 0
 1898              		@ link register save eliminated.
 1899              	.LVL143:
 1900 0000 7047     		bx	lr
 1901              		.cfi_endproc
 1902              	.LFE170:
 1904              		.section	.text.HAL_UART_AbortTransmit_IT,"ax",%progbits
 1905              		.align	1
 1906              		.global	HAL_UART_AbortTransmit_IT
 1907              		.syntax unified
 1908              		.thumb
 1909              		.thumb_func
 1910              		.fpu fpv5-d16
 1912              	HAL_UART_AbortTransmit_IT:
 1913              	.LFB161:
1970:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable interrupts */
 1914              		.loc 1 1970 0
 1915              		.cfi_startproc
 1916              		@ args = 0, pretend = 0, frame = 0
 1917              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccwHIqYH.s 			page 106


 1918              	.LVL144:
1970:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable interrupts */
 1919              		.loc 1 1970 0
 1920 0000 10B5     		push	{r4, lr}
 1921              	.LCFI19:
 1922              		.cfi_def_cfa_offset 8
 1923              		.cfi_offset 4, -8
 1924              		.cfi_offset 14, -4
 1925 0002 0446     		mov	r4, r0
1972:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1926              		.loc 1 1972 0
 1927 0004 0268     		ldr	r2, [r0]
 1928 0006 1368     		ldr	r3, [r2]
 1929 0008 23F0C003 		bic	r3, r3, #192
 1930 000c 1360     		str	r3, [r2]
1975:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 1931              		.loc 1 1975 0
 1932 000e 0368     		ldr	r3, [r0]
 1933 0010 9A68     		ldr	r2, [r3, #8]
 1934 0012 12F0800F 		tst	r2, #128
 1935 0016 1AD0     		beq	.L147
1977:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1936              		.loc 1 1977 0
 1937 0018 9A68     		ldr	r2, [r3, #8]
 1938 001a 22F08002 		bic	r2, r2, #128
 1939 001e 9A60     		str	r2, [r3, #8]
1980:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 1940              		.loc 1 1980 0
 1941 0020 C36E     		ldr	r3, [r0, #108]
 1942 0022 5BB1     		cbz	r3, .L148
1984:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1943              		.loc 1 1984 0
 1944 0024 0E4A     		ldr	r2, .L152
 1945 0026 1A65     		str	r2, [r3, #80]
1987:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 1946              		.loc 1 1987 0
 1947 0028 C06E     		ldr	r0, [r0, #108]
 1948              	.LVL145:
 1949 002a FFF7FEFF 		bl	HAL_DMA_Abort_IT
 1950              	.LVL146:
 1951 002e 08B9     		cbnz	r0, .L151
 1952              	.L149:
2037:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1953              		.loc 1 2037 0
 1954 0030 0020     		movs	r0, #0
 1955 0032 10BD     		pop	{r4, pc}
 1956              	.LVL147:
 1957              	.L151:
1990:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 1958              		.loc 1 1990 0
 1959 0034 E06E     		ldr	r0, [r4, #108]
 1960 0036 036D     		ldr	r3, [r0, #80]
 1961 0038 9847     		blx	r3
 1962              	.LVL148:
 1963 003a F9E7     		b	.L149
 1964              	.LVL149:
 1965              	.L148:
ARM GAS  /tmp/ccwHIqYH.s 			page 107


1996:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1966              		.loc 1 1996 0
 1967 003c 0023     		movs	r3, #0
 1968 003e A0F85230 		strh	r3, [r0, #82]	@ movhi
1999:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1969              		.loc 1 1999 0
 1970 0042 8366     		str	r3, [r0, #104]
2002:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1971              		.loc 1 2002 0
 1972 0044 2023     		movs	r3, #32
 1973 0046 8367     		str	r3, [r0, #120]
2010:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 1974              		.loc 1 2010 0
 1975 0048 FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 1976              	.LVL150:
 1977 004c F0E7     		b	.L149
 1978              	.LVL151:
 1979              	.L147:
2017:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1980              		.loc 1 2017 0
 1981 004e 0023     		movs	r3, #0
 1982 0050 A0F85230 		strh	r3, [r0, #82]	@ movhi
2020:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1983              		.loc 1 2020 0
 1984 0054 8366     		str	r3, [r0, #104]
2024:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1985              		.loc 1 2024 0
 1986 0056 2023     		movs	r3, #32
 1987 0058 8367     		str	r3, [r0, #120]
2032:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 1988              		.loc 1 2032 0
 1989 005a FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 1990              	.LVL152:
 1991 005e E7E7     		b	.L149
 1992              	.L153:
 1993              		.align	2
 1994              	.L152:
 1995 0060 00000000 		.word	UART_DMATxOnlyAbortCallback
 1996              		.cfi_endproc
 1997              	.LFE161:
 1999              		.section	.text.UART_DMATxOnlyAbortCallback,"ax",%progbits
 2000              		.align	1
 2001              		.syntax unified
 2002              		.thumb
 2003              		.thumb_func
 2004              		.fpu fpv5-d16
 2006              	UART_DMATxOnlyAbortCallback:
 2007              	.LFB201:
3691:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 2008              		.loc 1 3691 0
 2009              		.cfi_startproc
 2010              		@ args = 0, pretend = 0, frame = 0
 2011              		@ frame_needed = 0, uses_anonymous_args = 0
 2012              	.LVL153:
 2013 0000 08B5     		push	{r3, lr}
 2014              	.LCFI20:
 2015              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccwHIqYH.s 			page 108


 2016              		.cfi_offset 3, -8
 2017              		.cfi_offset 14, -4
3692:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2018              		.loc 1 3692 0
 2019 0002 806B     		ldr	r0, [r0, #56]
 2020              	.LVL154:
3694:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2021              		.loc 1 3694 0
 2022 0004 0023     		movs	r3, #0
 2023 0006 A0F85230 		strh	r3, [r0, #82]	@ movhi
3698:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2024              		.loc 1 3698 0
 2025 000a 2023     		movs	r3, #32
 2026 000c 8367     		str	r3, [r0, #120]
3706:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2027              		.loc 1 3706 0
 2028 000e FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 2029              	.LVL155:
 2030 0012 08BD     		pop	{r3, pc}
 2031              		.cfi_endproc
 2032              	.LFE201:
 2034              		.section	.text.HAL_UART_AbortReceiveCpltCallback,"ax",%progbits
 2035              		.align	1
 2036              		.weak	HAL_UART_AbortReceiveCpltCallback
 2037              		.syntax unified
 2038              		.thumb
 2039              		.thumb_func
 2040              		.fpu fpv5-d16
 2042              	HAL_UART_AbortReceiveCpltCallback:
 2043              	.LFB171:
2546:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 2044              		.loc 1 2546 0
 2045              		.cfi_startproc
 2046              		@ args = 0, pretend = 0, frame = 0
 2047              		@ frame_needed = 0, uses_anonymous_args = 0
 2048              		@ link register save eliminated.
 2049              	.LVL156:
 2050 0000 7047     		bx	lr
 2051              		.cfi_endproc
 2052              	.LFE171:
 2054              		.section	.text.HAL_UART_AbortReceive_IT,"ax",%progbits
 2055              		.align	1
 2056              		.global	HAL_UART_AbortReceive_IT
 2057              		.syntax unified
 2058              		.thumb
 2059              		.thumb_func
 2060              		.fpu fpv5-d16
 2062              	HAL_UART_AbortReceive_IT:
 2063              	.LFB162:
2054:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 2064              		.loc 1 2054 0
 2065              		.cfi_startproc
 2066              		@ args = 0, pretend = 0, frame = 0
 2067              		@ frame_needed = 0, uses_anonymous_args = 0
 2068              	.LVL157:
2054:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 2069              		.loc 1 2054 0
ARM GAS  /tmp/ccwHIqYH.s 			page 109


 2070 0000 10B5     		push	{r4, lr}
 2071              	.LCFI21:
 2072              		.cfi_def_cfa_offset 8
 2073              		.cfi_offset 4, -8
 2074              		.cfi_offset 14, -4
 2075 0002 0446     		mov	r4, r0
2056:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2076              		.loc 1 2056 0
 2077 0004 0268     		ldr	r2, [r0]
 2078 0006 1368     		ldr	r3, [r2]
 2079 0008 23F49073 		bic	r3, r3, #288
 2080 000c 1360     		str	r3, [r2]
2057:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2081              		.loc 1 2057 0
 2082 000e 0268     		ldr	r2, [r0]
 2083 0010 9368     		ldr	r3, [r2, #8]
 2084 0012 23F00103 		bic	r3, r3, #1
 2085 0016 9360     		str	r3, [r2, #8]
2060:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2086              		.loc 1 2060 0
 2087 0018 036E     		ldr	r3, [r0, #96]
 2088 001a 012B     		cmp	r3, #1
 2089 001c 12D0     		beq	.L163
 2090              	.L158:
2066:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2091              		.loc 1 2066 0
 2092 001e 2368     		ldr	r3, [r4]
 2093 0020 9A68     		ldr	r2, [r3, #8]
 2094 0022 12F0400F 		tst	r2, #64
 2095 0026 2AD0     		beq	.L159
2068:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2096              		.loc 1 2068 0
 2097 0028 9A68     		ldr	r2, [r3, #8]
 2098 002a 22F04002 		bic	r2, r2, #64
 2099 002e 9A60     		str	r2, [r3, #8]
2071:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2100              		.loc 1 2071 0
 2101 0030 236F     		ldr	r3, [r4, #112]
 2102 0032 8BB1     		cbz	r3, .L160
2075:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2103              		.loc 1 2075 0
 2104 0034 184A     		ldr	r2, .L165
 2105 0036 1A65     		str	r2, [r3, #80]
2078:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 2106              		.loc 1 2078 0
 2107 0038 206F     		ldr	r0, [r4, #112]
 2108              	.LVL158:
 2109 003a FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2110              	.LVL159:
 2111 003e 38B9     		cbnz	r0, .L164
 2112              	.L161:
2138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2113              		.loc 1 2138 0
 2114 0040 0020     		movs	r0, #0
 2115 0042 10BD     		pop	{r4, pc}
 2116              	.LVL160:
 2117              	.L163:
ARM GAS  /tmp/ccwHIqYH.s 			page 110


2062:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 2118              		.loc 1 2062 0
 2119 0044 0268     		ldr	r2, [r0]
 2120 0046 1368     		ldr	r3, [r2]
 2121 0048 23F01003 		bic	r3, r3, #16
 2122 004c 1360     		str	r3, [r2]
 2123 004e E6E7     		b	.L158
 2124              	.LVL161:
 2125              	.L164:
2081:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 2126              		.loc 1 2081 0
 2127 0050 206F     		ldr	r0, [r4, #112]
 2128 0052 036D     		ldr	r3, [r0, #80]
 2129 0054 9847     		blx	r3
 2130              	.LVL162:
 2131 0056 F3E7     		b	.L161
 2132              	.LVL163:
 2133              	.L160:
2087:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2134              		.loc 1 2087 0
 2135 0058 0023     		movs	r3, #0
 2136 005a A4F85A30 		strh	r3, [r4, #90]	@ movhi
2090:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2137              		.loc 1 2090 0
 2138 005e 6365     		str	r3, [r4, #84]
2093:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2139              		.loc 1 2093 0
 2140 0060 2268     		ldr	r2, [r4]
 2141 0062 0F21     		movs	r1, #15
 2142 0064 1162     		str	r1, [r2, #32]
2096:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2143              		.loc 1 2096 0
 2144 0066 2168     		ldr	r1, [r4]
 2145 0068 8A69     		ldr	r2, [r1, #24]
 2146 006a 42F00802 		orr	r2, r2, #8
 2147 006e 8A61     		str	r2, [r1, #24]
2099:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 2148              		.loc 1 2099 0
 2149 0070 2022     		movs	r2, #32
 2150 0072 E267     		str	r2, [r4, #124]
2100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2151              		.loc 1 2100 0
 2152 0074 2366     		str	r3, [r4, #96]
2108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2153              		.loc 1 2108 0
 2154 0076 2046     		mov	r0, r4
 2155              	.LVL164:
 2156 0078 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 2157              	.LVL165:
 2158 007c E0E7     		b	.L161
 2159              	.LVL166:
 2160              	.L159:
2115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2161              		.loc 1 2115 0
 2162 007e 0022     		movs	r2, #0
 2163 0080 A4F85A20 		strh	r2, [r4, #90]	@ movhi
2118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccwHIqYH.s 			page 111


 2164              		.loc 1 2118 0
 2165 0084 6265     		str	r2, [r4, #84]
2121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2166              		.loc 1 2121 0
 2167 0086 0F21     		movs	r1, #15
 2168 0088 1962     		str	r1, [r3, #32]
2124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 2169              		.loc 1 2124 0
 2170 008a 2023     		movs	r3, #32
 2171 008c E367     		str	r3, [r4, #124]
2125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2172              		.loc 1 2125 0
 2173 008e 2266     		str	r2, [r4, #96]
2133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2174              		.loc 1 2133 0
 2175 0090 2046     		mov	r0, r4
 2176              	.LVL167:
 2177 0092 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 2178              	.LVL168:
 2179 0096 D3E7     		b	.L161
 2180              	.L166:
 2181              		.align	2
 2182              	.L165:
 2183 0098 00000000 		.word	UART_DMARxOnlyAbortCallback
 2184              		.cfi_endproc
 2185              	.LFE162:
 2187              		.section	.text.UART_DMARxOnlyAbortCallback,"ax",%progbits
 2188              		.align	1
 2189              		.syntax unified
 2190              		.thumb
 2191              		.thumb_func
 2192              		.fpu fpv5-d16
 2194              	UART_DMARxOnlyAbortCallback:
 2195              	.LFB202:
3719:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2196              		.loc 1 3719 0
 2197              		.cfi_startproc
 2198              		@ args = 0, pretend = 0, frame = 0
 2199              		@ frame_needed = 0, uses_anonymous_args = 0
 2200              	.LVL169:
 2201 0000 08B5     		push	{r3, lr}
 2202              	.LCFI22:
 2203              		.cfi_def_cfa_offset 8
 2204              		.cfi_offset 3, -8
 2205              		.cfi_offset 14, -4
3720:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2206              		.loc 1 3720 0
 2207 0002 806B     		ldr	r0, [r0, #56]
 2208              	.LVL170:
3722:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2209              		.loc 1 3722 0
 2210 0004 0022     		movs	r2, #0
 2211 0006 A0F85A20 		strh	r2, [r0, #90]	@ movhi
3725:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2212              		.loc 1 3725 0
 2213 000a 0368     		ldr	r3, [r0]
 2214 000c 0F21     		movs	r1, #15
ARM GAS  /tmp/ccwHIqYH.s 			page 112


 2215 000e 1962     		str	r1, [r3, #32]
3728:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2216              		.loc 1 3728 0
 2217 0010 0168     		ldr	r1, [r0]
 2218 0012 8B69     		ldr	r3, [r1, #24]
 2219 0014 43F00803 		orr	r3, r3, #8
 2220 0018 8B61     		str	r3, [r1, #24]
3731:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 2221              		.loc 1 3731 0
 2222 001a 2023     		movs	r3, #32
 2223 001c C367     		str	r3, [r0, #124]
3732:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2224              		.loc 1 3732 0
 2225 001e 0266     		str	r2, [r0, #96]
3740:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2226              		.loc 1 3740 0
 2227 0020 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 2228              	.LVL171:
 2229 0024 08BD     		pop	{r3, pc}
 2230              		.cfi_endproc
 2231              	.LFE202:
 2233              		.section	.text.HAL_UARTEx_RxEventCallback,"ax",%progbits
 2234              		.align	1
 2235              		.weak	HAL_UARTEx_RxEventCallback
 2236              		.syntax unified
 2237              		.thumb
 2238              		.thumb_func
 2239              		.fpu fpv5-d16
 2241              	HAL_UARTEx_RxEventCallback:
 2242              	.LFB172:
2563:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 2243              		.loc 1 2563 0
 2244              		.cfi_startproc
 2245              		@ args = 0, pretend = 0, frame = 0
 2246              		@ frame_needed = 0, uses_anonymous_args = 0
 2247              		@ link register save eliminated.
 2248              	.LVL172:
 2249 0000 7047     		bx	lr
 2250              		.cfi_endproc
 2251              	.LFE172:
 2253              		.section	.text.UART_RxISR_8BIT,"ax",%progbits
 2254              		.align	1
 2255              		.syntax unified
 2256              		.thumb
 2257              		.thumb_func
 2258              		.fpu fpv5-d16
 2260              	UART_RxISR_8BIT:
 2261              	.LFB206:
3829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3830:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3831:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3832:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3833:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief RX interrupt handler for 7 or 8 bits data word length .
3834:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
3835:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3836:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3837:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
ARM GAS  /tmp/ccwHIqYH.s 			page 113


3838:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 2262              		.loc 1 3838 0
 2263              		.cfi_startproc
 2264              		@ args = 0, pretend = 0, frame = 0
 2265              		@ frame_needed = 0, uses_anonymous_args = 0
 2266              	.LVL173:
3839:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t uhMask = huart->Mask;
 2267              		.loc 1 3839 0
 2268 0000 B0F85C30 		ldrh	r3, [r0, #92]
 2269              	.LVL174:
3840:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t  uhdata;
3841:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3842:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
3843:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 2270              		.loc 1 3843 0
 2271 0004 C26F     		ldr	r2, [r0, #124]
 2272 0006 222A     		cmp	r2, #34
 2273 0008 05D0     		beq	.L179
3844:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3845:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
3846:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
3847:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->pRxBuffPtr++;
3848:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount--;
3849:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3850:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->RxXferCount == 0U)
3851:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3852:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Disable the UART Parity Error Interrupt and RXNE interrupts */
3853:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
3854:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3855:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3856:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3857:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3858:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Rx process is completed, restore huart->RxState to Ready */
3859:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
3860:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3861:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Clear RxISR function pointer */
3862:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxISR = NULL;
3863:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3864:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Check current reception Mode :
3865:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          If Reception till IDLE event has been selected : */
3866:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
3867:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
3868:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Disable IDLE interrupt */
3869:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
3870:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3871:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3872:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /*Call registered Rx Event callback*/
3873:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxEventCallback(huart, huart->RxXferSize);
3874:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3875:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /*Call legacy weak Rx Event callback*/
3876:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
3877:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
3878:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
3879:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       else
3880:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
3881:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Standard reception API called */
3882:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
ARM GAS  /tmp/ccwHIqYH.s 			page 114


3883:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /*Call registered Rx complete callback*/
3884:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxCpltCallback(huart);
3885:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3886:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /*Call legacy weak Rx complete callback*/
3887:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         HAL_UART_RxCpltCallback(huart);
3888:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3889:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
3890:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3891:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3892:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3893:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
3894:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3895:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear RXNE interrupt flag */
3896:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 2274              		.loc 1 3896 0
 2275 000a 0268     		ldr	r2, [r0]
 2276 000c 9369     		ldr	r3, [r2, #24]
 2277              	.LVL175:
 2278 000e 43F00803 		orr	r3, r3, #8
 2279 0012 9361     		str	r3, [r2, #24]
 2280              	.LVL176:
3897:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3898:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 2281              		.loc 1 3898 0
 2282 0014 7047     		bx	lr
 2283              	.LVL177:
 2284              	.L179:
3845:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 2285              		.loc 1 3845 0
 2286 0016 0268     		ldr	r2, [r0]
 2287 0018 516A     		ldr	r1, [r2, #36]
 2288              	.LVL178:
3846:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->pRxBuffPtr++;
 2289              		.loc 1 3846 0
 2290 001a 426D     		ldr	r2, [r0, #84]
 2291 001c DBB2     		uxtb	r3, r3
 2292              	.LVL179:
 2293 001e 0B40     		ands	r3, r3, r1
 2294 0020 1370     		strb	r3, [r2]
 2295              	.LVL180:
3847:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount--;
 2296              		.loc 1 3847 0
 2297 0022 436D     		ldr	r3, [r0, #84]
 2298 0024 0133     		adds	r3, r3, #1
 2299 0026 4365     		str	r3, [r0, #84]
3848:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2300              		.loc 1 3848 0
 2301 0028 B0F85A30 		ldrh	r3, [r0, #90]
 2302 002c 9BB2     		uxth	r3, r3
 2303 002e 013B     		subs	r3, r3, #1
 2304 0030 9BB2     		uxth	r3, r3
 2305 0032 A0F85A30 		strh	r3, [r0, #90]	@ movhi
3850:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2306              		.loc 1 3850 0
 2307 0036 B0F85A30 		ldrh	r3, [r0, #90]
 2308 003a 9BB2     		uxth	r3, r3
 2309 003c 0BBB     		cbnz	r3, .L176
ARM GAS  /tmp/ccwHIqYH.s 			page 115


3838:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t uhMask = huart->Mask;
 2310              		.loc 1 3838 0
 2311 003e 10B5     		push	{r4, lr}
 2312              	.LCFI23:
 2313              		.cfi_def_cfa_offset 8
 2314              		.cfi_offset 4, -8
 2315              		.cfi_offset 14, -4
 2316 0040 0446     		mov	r4, r0
3853:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2317              		.loc 1 3853 0
 2318 0042 0268     		ldr	r2, [r0]
 2319 0044 1368     		ldr	r3, [r2]
 2320 0046 23F49073 		bic	r3, r3, #288
 2321 004a 1360     		str	r3, [r2]
3856:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2322              		.loc 1 3856 0
 2323 004c 0268     		ldr	r2, [r0]
 2324 004e 9368     		ldr	r3, [r2, #8]
 2325 0050 23F00103 		bic	r3, r3, #1
 2326 0054 9360     		str	r3, [r2, #8]
3859:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2327              		.loc 1 3859 0
 2328 0056 2023     		movs	r3, #32
 2329 0058 C367     		str	r3, [r0, #124]
3862:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2330              		.loc 1 3862 0
 2331 005a 0023     		movs	r3, #0
 2332 005c 4366     		str	r3, [r0, #100]
3866:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 2333              		.loc 1 3866 0
 2334 005e 036E     		ldr	r3, [r0, #96]
 2335 0060 012B     		cmp	r3, #1
 2336 0062 04D0     		beq	.L180
3887:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2337              		.loc 1 3887 0
 2338 0064 FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 2339              	.LVL181:
 2340              	.L174:
3890:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 2341              		.loc 1 3890 0
 2342 0068 0023     		movs	r3, #0
 2343 006a 2366     		str	r3, [r4, #96]
 2344 006c 10BD     		pop	{r4, pc}
 2345              	.LVL182:
 2346              	.L180:
3869:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2347              		.loc 1 3869 0
 2348 006e 0268     		ldr	r2, [r0]
 2349 0070 1368     		ldr	r3, [r2]
 2350 0072 23F01003 		bic	r3, r3, #16
 2351 0076 1360     		str	r3, [r2]
3876:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 2352              		.loc 1 3876 0
 2353 0078 B0F85810 		ldrh	r1, [r0, #88]
 2354              	.LVL183:
 2355 007c FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
 2356              	.LVL184:
ARM GAS  /tmp/ccwHIqYH.s 			page 116


 2357 0080 F2E7     		b	.L174
 2358              	.LVL185:
 2359              	.L176:
 2360              	.LCFI24:
 2361              		.cfi_def_cfa_offset 0
 2362              		.cfi_restore 4
 2363              		.cfi_restore 14
 2364 0082 7047     		bx	lr
 2365              		.cfi_endproc
 2366              	.LFE206:
 2368              		.section	.text.UART_RxISR_16BIT,"ax",%progbits
 2369              		.align	1
 2370              		.syntax unified
 2371              		.thumb
 2372              		.thumb_func
 2373              		.fpu fpv5-d16
 2375              	UART_RxISR_16BIT:
 2376              	.LFB207:
3899:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3900:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3901:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief RX interrupt handler for 9 bits data word length .
3902:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   Function is called under interruption only, once
3903:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Receive_IT()
3904:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
3905:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3906:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3907:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
3908:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 2377              		.loc 1 3908 0
 2378              		.cfi_startproc
 2379              		@ args = 0, pretend = 0, frame = 0
 2380              		@ frame_needed = 0, uses_anonymous_args = 0
 2381              	.LVL186:
3909:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t *tmp;
3910:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t uhMask = huart->Mask;
 2382              		.loc 1 3910 0
 2383 0000 B0F85C20 		ldrh	r2, [r0, #92]
 2384              	.LVL187:
3911:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t  uhdata;
3912:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
3914:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 2385              		.loc 1 3914 0
 2386 0004 C36F     		ldr	r3, [r0, #124]
 2387 0006 222B     		cmp	r3, #34
 2388 0008 05D0     		beq	.L190
3915:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3916:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
3917:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     tmp = (uint16_t *) huart->pRxBuffPtr ;
3918:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     *tmp = (uint16_t)(uhdata & uhMask);
3919:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->pRxBuffPtr += 2U;
3920:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount--;
3921:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3922:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->RxXferCount == 0U)
3923:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3924:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
3925:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
ARM GAS  /tmp/ccwHIqYH.s 			page 117


3926:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3927:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3928:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3929:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3930:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Rx process is completed, restore huart->RxState to Ready */
3931:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
3932:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3933:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Clear RxISR function pointer */
3934:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxISR = NULL;
3935:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3936:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Check current reception Mode :
3937:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          If Reception till IDLE event has been selected : */
3938:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
3939:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
3940:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Disable IDLE interrupt */
3941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
3942:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3943:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3944:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /*Call registered Rx Event callback*/
3945:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxEventCallback(huart, huart->RxXferSize);
3946:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3947:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /*Call legacy weak Rx Event callback*/
3948:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
3949:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
3950:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
3951:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       else
3952:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
3953:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Standard reception API called */
3954:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /*Call registered Rx complete callback*/
3956:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxCpltCallback(huart);
3957:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3958:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /*Call legacy weak Rx complete callback*/
3959:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         HAL_UART_RxCpltCallback(huart);
3960:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3961:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
3962:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3963:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3964:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3965:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
3966:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3967:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear RXNE interrupt flag */
3968:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 2389              		.loc 1 3968 0
 2390 000a 0268     		ldr	r2, [r0]
 2391              	.LVL188:
 2392 000c 9369     		ldr	r3, [r2, #24]
 2393 000e 43F00803 		orr	r3, r3, #8
 2394 0012 9361     		str	r3, [r2, #24]
 2395              	.LVL189:
3969:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3970:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 2396              		.loc 1 3970 0
 2397 0014 7047     		bx	lr
 2398              	.LVL190:
 2399              	.L190:
3916:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     tmp = (uint16_t *) huart->pRxBuffPtr ;
ARM GAS  /tmp/ccwHIqYH.s 			page 118


 2400              		.loc 1 3916 0
 2401 0016 0368     		ldr	r3, [r0]
 2402 0018 5B6A     		ldr	r3, [r3, #36]
 2403              	.LVL191:
3917:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     *tmp = (uint16_t)(uhdata & uhMask);
 2404              		.loc 1 3917 0
 2405 001a 416D     		ldr	r1, [r0, #84]
 2406              	.LVL192:
3918:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->pRxBuffPtr += 2U;
 2407              		.loc 1 3918 0
 2408 001c 1A40     		ands	r2, r2, r3
 2409              	.LVL193:
 2410 001e 0A80     		strh	r2, [r1]	@ movhi
 2411              	.LVL194:
3919:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount--;
 2412              		.loc 1 3919 0
 2413 0020 436D     		ldr	r3, [r0, #84]
 2414              	.LVL195:
 2415 0022 0233     		adds	r3, r3, #2
 2416 0024 4365     		str	r3, [r0, #84]
3920:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2417              		.loc 1 3920 0
 2418 0026 B0F85A30 		ldrh	r3, [r0, #90]
 2419 002a 9BB2     		uxth	r3, r3
 2420 002c 013B     		subs	r3, r3, #1
 2421 002e 9BB2     		uxth	r3, r3
 2422 0030 A0F85A30 		strh	r3, [r0, #90]	@ movhi
3922:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2423              		.loc 1 3922 0
 2424 0034 B0F85A30 		ldrh	r3, [r0, #90]
 2425 0038 9BB2     		uxth	r3, r3
 2426 003a 0BBB     		cbnz	r3, .L187
3908:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t *tmp;
 2427              		.loc 1 3908 0
 2428 003c 10B5     		push	{r4, lr}
 2429              	.LCFI25:
 2430              		.cfi_def_cfa_offset 8
 2431              		.cfi_offset 4, -8
 2432              		.cfi_offset 14, -4
 2433 003e 0446     		mov	r4, r0
3925:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2434              		.loc 1 3925 0
 2435 0040 0268     		ldr	r2, [r0]
 2436 0042 1368     		ldr	r3, [r2]
 2437 0044 23F49073 		bic	r3, r3, #288
 2438 0048 1360     		str	r3, [r2]
3928:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2439              		.loc 1 3928 0
 2440 004a 0268     		ldr	r2, [r0]
 2441 004c 9368     		ldr	r3, [r2, #8]
 2442 004e 23F00103 		bic	r3, r3, #1
 2443 0052 9360     		str	r3, [r2, #8]
3931:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2444              		.loc 1 3931 0
 2445 0054 2023     		movs	r3, #32
 2446 0056 C367     		str	r3, [r0, #124]
3934:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccwHIqYH.s 			page 119


 2447              		.loc 1 3934 0
 2448 0058 0023     		movs	r3, #0
 2449 005a 4366     		str	r3, [r0, #100]
3938:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 2450              		.loc 1 3938 0
 2451 005c 036E     		ldr	r3, [r0, #96]
 2452 005e 012B     		cmp	r3, #1
 2453 0060 04D0     		beq	.L191
3959:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2454              		.loc 1 3959 0
 2455 0062 FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 2456              	.LVL196:
 2457              	.L185:
3962:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 2458              		.loc 1 3962 0
 2459 0066 0023     		movs	r3, #0
 2460 0068 2366     		str	r3, [r4, #96]
 2461 006a 10BD     		pop	{r4, pc}
 2462              	.LVL197:
 2463              	.L191:
3941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2464              		.loc 1 3941 0
 2465 006c 0268     		ldr	r2, [r0]
 2466 006e 1368     		ldr	r3, [r2]
 2467 0070 23F01003 		bic	r3, r3, #16
 2468 0074 1360     		str	r3, [r2]
3948:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 2469              		.loc 1 3948 0
 2470 0076 B0F85810 		ldrh	r1, [r0, #88]
 2471              	.LVL198:
 2472 007a FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
 2473              	.LVL199:
 2474 007e F2E7     		b	.L185
 2475              	.LVL200:
 2476              	.L187:
 2477              	.LCFI26:
 2478              		.cfi_def_cfa_offset 0
 2479              		.cfi_restore 4
 2480              		.cfi_restore 14
 2481 0080 7047     		bx	lr
 2482              		.cfi_endproc
 2483              	.LFE207:
 2485              		.section	.text.UART_DMARxHalfCplt,"ax",%progbits
 2486              		.align	1
 2487              		.syntax unified
 2488              		.thumb
 2489              		.thumb_func
 2490              		.fpu fpv5-d16
 2492              	UART_DMARxHalfCplt:
 2493              	.LFB196:
3492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 2494              		.loc 1 3492 0
 2495              		.cfi_startproc
 2496              		@ args = 0, pretend = 0, frame = 0
 2497              		@ frame_needed = 0, uses_anonymous_args = 0
 2498              	.LVL201:
 2499 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/ccwHIqYH.s 			page 120


 2500              	.LCFI27:
 2501              		.cfi_def_cfa_offset 8
 2502              		.cfi_offset 3, -8
 2503              		.cfi_offset 14, -4
3493:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2504              		.loc 1 3493 0
 2505 0002 806B     		ldr	r0, [r0, #56]
 2506              	.LVL202:
3497:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2507              		.loc 1 3497 0
 2508 0004 036E     		ldr	r3, [r0, #96]
 2509 0006 012B     		cmp	r3, #1
 2510 0008 02D0     		beq	.L196
3515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2511              		.loc 1 3515 0
 2512 000a FFF7FEFF 		bl	HAL_UART_RxHalfCpltCallback
 2513              	.LVL203:
 2514 000e 08BD     		pop	{r3, pc}
 2515              	.LVL204:
 2516              	.L196:
3504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2517              		.loc 1 3504 0
 2518 0010 B0F85810 		ldrh	r1, [r0, #88]
 2519 0014 4908     		lsrs	r1, r1, #1
 2520 0016 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
 2521              	.LVL205:
 2522 001a 08BD     		pop	{r3, pc}
 2523              		.cfi_endproc
 2524              	.LFE196:
 2526              		.section	.text.UART_DMAReceiveCplt,"ax",%progbits
 2527              		.align	1
 2528              		.syntax unified
 2529              		.thumb
 2530              		.thumb_func
 2531              		.fpu fpv5-d16
 2533              	UART_DMAReceiveCplt:
 2534              	.LFB195:
3435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 2535              		.loc 1 3435 0
 2536              		.cfi_startproc
 2537              		@ args = 0, pretend = 0, frame = 0
 2538              		@ frame_needed = 0, uses_anonymous_args = 0
 2539              	.LVL206:
 2540 0000 08B5     		push	{r3, lr}
 2541              	.LCFI28:
 2542              		.cfi_def_cfa_offset 8
 2543              		.cfi_offset 3, -8
 2544              		.cfi_offset 14, -4
3436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2545              		.loc 1 3436 0
 2546 0002 836B     		ldr	r3, [r0, #56]
 2547              	.LVL207:
3439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2548              		.loc 1 3439 0
 2549 0004 C269     		ldr	r2, [r0, #28]
 2550 0006 B2F5807F 		cmp	r2, #256
 2551 000a 16D0     		beq	.L198
ARM GAS  /tmp/ccwHIqYH.s 			page 121


3441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2552              		.loc 1 3441 0
 2553 000c 0022     		movs	r2, #0
 2554 000e A3F85A20 		strh	r2, [r3, #90]	@ movhi
3444:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2555              		.loc 1 3444 0
 2556 0012 1968     		ldr	r1, [r3]
 2557 0014 0A68     		ldr	r2, [r1]
 2558 0016 22F48072 		bic	r2, r2, #256
 2559 001a 0A60     		str	r2, [r1]
3445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2560              		.loc 1 3445 0
 2561 001c 1968     		ldr	r1, [r3]
 2562 001e 8A68     		ldr	r2, [r1, #8]
 2563 0020 22F00102 		bic	r2, r2, #1
 2564 0024 8A60     		str	r2, [r1, #8]
3449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2565              		.loc 1 3449 0
 2566 0026 1968     		ldr	r1, [r3]
 2567 0028 8A68     		ldr	r2, [r1, #8]
 2568 002a 22F04002 		bic	r2, r2, #64
 2569 002e 8A60     		str	r2, [r1, #8]
3452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2570              		.loc 1 3452 0
 2571 0030 2022     		movs	r2, #32
 2572 0032 DA67     		str	r2, [r3, #124]
3455:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2573              		.loc 1 3455 0
 2574 0034 1A6E     		ldr	r2, [r3, #96]
 2575 0036 012A     		cmp	r2, #1
 2576 0038 06D0     		beq	.L202
 2577              	.L198:
3463:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2578              		.loc 1 3463 0
 2579 003a 1A6E     		ldr	r2, [r3, #96]
 2580 003c 012A     		cmp	r2, #1
 2581 003e 09D0     		beq	.L203
3481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2582              		.loc 1 3481 0
 2583 0040 1846     		mov	r0, r3
 2584              	.LVL208:
 2585 0042 FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 2586              	.LVL209:
 2587 0046 08BD     		pop	{r3, pc}
 2588              	.LVL210:
 2589              	.L202:
3457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 2590              		.loc 1 3457 0
 2591 0048 1968     		ldr	r1, [r3]
 2592 004a 0A68     		ldr	r2, [r1]
 2593 004c 22F01002 		bic	r2, r2, #16
 2594 0050 0A60     		str	r2, [r1]
 2595 0052 F2E7     		b	.L198
 2596              	.L203:
3470:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2597              		.loc 1 3470 0
 2598 0054 B3F85810 		ldrh	r1, [r3, #88]
ARM GAS  /tmp/ccwHIqYH.s 			page 122


 2599 0058 1846     		mov	r0, r3
 2600              	.LVL211:
 2601 005a FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
 2602              	.LVL212:
 2603 005e 08BD     		pop	{r3, pc}
 2604              		.cfi_endproc
 2605              	.LFE195:
 2607              		.section	.text.HAL_UARTEx_WakeupCallback,"ax",%progbits
 2608              		.align	1
 2609              		.weak	HAL_UARTEx_WakeupCallback
 2610              		.syntax unified
 2611              		.thumb
 2612              		.thumb_func
 2613              		.fpu fpv5-d16
 2615              	HAL_UARTEx_WakeupCallback:
 2616              	.LFB173:
2580:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 2617              		.loc 1 2580 0
 2618              		.cfi_startproc
 2619              		@ args = 0, pretend = 0, frame = 0
 2620              		@ frame_needed = 0, uses_anonymous_args = 0
 2621              		@ link register save eliminated.
 2622              	.LVL213:
 2623 0000 7047     		bx	lr
 2624              		.cfi_endproc
 2625              	.LFE173:
 2627              		.section	.text.HAL_UART_IRQHandler,"ax",%progbits
 2628              		.align	1
 2629              		.global	HAL_UART_IRQHandler
 2630              		.syntax unified
 2631              		.thumb
 2632              		.thumb_func
 2633              		.fpu fpv5-d16
 2635              	HAL_UART_IRQHandler:
 2636              	.LFB163:
2146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 2637              		.loc 1 2146 0
 2638              		.cfi_startproc
 2639              		@ args = 0, pretend = 0, frame = 0
 2640              		@ frame_needed = 0, uses_anonymous_args = 0
 2641              	.LVL214:
2146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 2642              		.loc 1 2146 0
 2643 0000 70B5     		push	{r4, r5, r6, lr}
 2644              	.LCFI29:
 2645              		.cfi_def_cfa_offset 16
 2646              		.cfi_offset 4, -16
 2647              		.cfi_offset 5, -12
 2648              		.cfi_offset 6, -8
 2649              		.cfi_offset 14, -4
 2650 0002 0446     		mov	r4, r0
2147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 2651              		.loc 1 2147 0
 2652 0004 0168     		ldr	r1, [r0]
 2653 0006 CB69     		ldr	r3, [r1, #28]
 2654              	.LVL215:
2148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
ARM GAS  /tmp/ccwHIqYH.s 			page 123


 2655              		.loc 1 2148 0
 2656 0008 0868     		ldr	r0, [r1]
 2657              	.LVL216:
2149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2658              		.loc 1 2149 0
 2659 000a 8D68     		ldr	r5, [r1, #8]
 2660              	.LVL217:
2155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (errorflags == 0U)
 2661              		.loc 1 2155 0
 2662 000c 40F60F02 		movw	r2, #2063
 2663              	.LVL218:
2156:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2664              		.loc 1 2156 0
 2665 0010 1A40     		ands	r2, r3, r2
 2666              	.LVL219:
 2667 0012 0CD1     		bne	.L206
2159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         && ((cr1its & USART_CR1_RXNEIE) != 0U))
 2668              		.loc 1 2159 0
 2669 0014 13F0200F 		tst	r3, #32
 2670 0018 09D0     		beq	.L206
2160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2671              		.loc 1 2160 0
 2672 001a 10F0200F 		tst	r0, #32
 2673 001e 06D0     		beq	.L206
2162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 2674              		.loc 1 2162 0
 2675 0020 636E     		ldr	r3, [r4, #100]
 2676              	.LVL220:
 2677 0022 002B     		cmp	r3, #0
 2678 0024 00F01C81 		beq	.L205
2164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 2679              		.loc 1 2164 0
 2680 0028 2046     		mov	r0, r4
 2681              	.LVL221:
 2682 002a 9847     		blx	r3
 2683              	.LVL222:
 2684 002c 70BD     		pop	{r4, r5, r6, pc}
 2685              	.LVL223:
 2686              	.L206:
2171:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       && (((cr3its & USART_CR3_EIE) != 0U)
 2687              		.loc 1 2171 0
 2688 002e 002A     		cmp	r2, #0
 2689 0030 00F08F80 		beq	.L208
2172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 2690              		.loc 1 2172 0
 2691 0034 15F00102 		ands	r2, r5, #1
 2692              	.LVL224:
 2693 0038 03D1     		bne	.L209
2173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2694              		.loc 1 2173 0
 2695 003a 8C4E     		ldr	r6, .L230
 2696 003c 3042     		tst	r0, r6
 2697 003e 00F08880 		beq	.L208
 2698              	.L209:
2176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2699              		.loc 1 2176 0
 2700 0042 13F0010F 		tst	r3, #1
ARM GAS  /tmp/ccwHIqYH.s 			page 124


 2701 0046 09D0     		beq	.L210
2176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2702              		.loc 1 2176 0 is_stmt 0 discriminator 1
 2703 0048 10F4807F 		tst	r0, #256
 2704 004c 06D0     		beq	.L210
2178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2705              		.loc 1 2178 0 is_stmt 1
 2706 004e 0125     		movs	r5, #1
 2707              	.LVL225:
 2708 0050 0D62     		str	r5, [r1, #32]
2180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 2709              		.loc 1 2180 0
 2710 0052 D4F88010 		ldr	r1, [r4, #128]
 2711 0056 2943     		orrs	r1, r1, r5
 2712 0058 C4F88010 		str	r1, [r4, #128]
 2713              	.L210:
2184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2714              		.loc 1 2184 0
 2715 005c 13F0020F 		tst	r3, #2
 2716 0060 09D0     		beq	.L211
2184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2717              		.loc 1 2184 0 is_stmt 0 discriminator 1
 2718 0062 42B1     		cbz	r2, .L211
2186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2719              		.loc 1 2186 0 is_stmt 1
 2720 0064 2168     		ldr	r1, [r4]
 2721 0066 0225     		movs	r5, #2
 2722 0068 0D62     		str	r5, [r1, #32]
2188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 2723              		.loc 1 2188 0
 2724 006a D4F88010 		ldr	r1, [r4, #128]
 2725 006e 41F00401 		orr	r1, r1, #4
 2726 0072 C4F88010 		str	r1, [r4, #128]
 2727              	.L211:
2192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2728              		.loc 1 2192 0
 2729 0076 13F0040F 		tst	r3, #4
 2730 007a 09D0     		beq	.L212
2192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2731              		.loc 1 2192 0 is_stmt 0 discriminator 1
 2732 007c 42B1     		cbz	r2, .L212
2194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2733              		.loc 1 2194 0 is_stmt 1
 2734 007e 2168     		ldr	r1, [r4]
 2735 0080 0425     		movs	r5, #4
 2736 0082 0D62     		str	r5, [r1, #32]
2196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 2737              		.loc 1 2196 0
 2738 0084 D4F88010 		ldr	r1, [r4, #128]
 2739 0088 41F00201 		orr	r1, r1, #2
 2740 008c C4F88010 		str	r1, [r4, #128]
 2741              	.L212:
2200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 2742              		.loc 1 2200 0
 2743 0090 13F0080F 		tst	r3, #8
 2744 0094 0BD0     		beq	.L213
2201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             ((cr3its & USART_CR3_EIE) != 0U)))
ARM GAS  /tmp/ccwHIqYH.s 			page 125


 2745              		.loc 1 2201 0
 2746 0096 10F0200F 		tst	r0, #32
 2747 009a 00D1     		bne	.L214
2201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             ((cr3its & USART_CR3_EIE) != 0U)))
 2748              		.loc 1 2201 0 is_stmt 0 discriminator 1
 2749 009c 3AB1     		cbz	r2, .L213
 2750              	.L214:
2204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2751              		.loc 1 2204 0 is_stmt 1
 2752 009e 2268     		ldr	r2, [r4]
 2753 00a0 0821     		movs	r1, #8
 2754 00a2 1162     		str	r1, [r2, #32]
2206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 2755              		.loc 1 2206 0
 2756 00a4 D4F88020 		ldr	r2, [r4, #128]
 2757 00a8 0A43     		orrs	r2, r2, r1
 2758 00aa C4F88020 		str	r2, [r4, #128]
 2759              	.L213:
2210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2760              		.loc 1 2210 0
 2761 00ae 13F4006F 		tst	r3, #2048
 2762 00b2 0CD0     		beq	.L215
2210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2763              		.loc 1 2210 0 is_stmt 0 discriminator 1
 2764 00b4 10F0806F 		tst	r0, #67108864
 2765 00b8 09D0     		beq	.L215
2212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2766              		.loc 1 2212 0 is_stmt 1
 2767 00ba 2268     		ldr	r2, [r4]
 2768 00bc 4FF40061 		mov	r1, #2048
 2769 00c0 1162     		str	r1, [r2, #32]
2214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 2770              		.loc 1 2214 0
 2771 00c2 D4F88020 		ldr	r2, [r4, #128]
 2772 00c6 42F02002 		orr	r2, r2, #32
 2773 00ca C4F88020 		str	r2, [r4, #128]
 2774              	.L215:
2218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2775              		.loc 1 2218 0
 2776 00ce D4F88020 		ldr	r2, [r4, #128]
 2777 00d2 002A     		cmp	r2, #0
 2778 00d4 00F0C480 		beq	.L205
2221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           && ((cr1its & USART_CR1_RXNEIE) != 0U))
 2779              		.loc 1 2221 0
 2780 00d8 13F0200F 		tst	r3, #32
 2781 00dc 06D0     		beq	.L216
2222:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 2782              		.loc 1 2222 0
 2783 00de 10F0200F 		tst	r0, #32
 2784 00e2 03D0     		beq	.L216
2224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
 2785              		.loc 1 2224 0
 2786 00e4 636E     		ldr	r3, [r4, #100]
 2787              	.LVL226:
 2788 00e6 0BB1     		cbz	r3, .L216
2226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
 2789              		.loc 1 2226 0
ARM GAS  /tmp/ccwHIqYH.s 			page 126


 2790 00e8 2046     		mov	r0, r4
 2791              	.LVL227:
 2792 00ea 9847     		blx	r3
 2793              	.LVL228:
 2794              	.L216:
2235:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 2795              		.loc 1 2235 0
 2796 00ec D4F88020 		ldr	r2, [r4, #128]
 2797              	.LVL229:
2236:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 2798              		.loc 1 2236 0
 2799 00f0 2368     		ldr	r3, [r4]
 2800 00f2 9B68     		ldr	r3, [r3, #8]
 2801 00f4 13F0400F 		tst	r3, #64
 2802 00f8 02D1     		bne	.L217
2236:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 2803              		.loc 1 2236 0 is_stmt 0 discriminator 1
 2804 00fa 12F0280F 		tst	r2, #40
 2805 00fe 21D0     		beq	.L218
 2806              	.L217:
2242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2807              		.loc 1 2242 0 is_stmt 1
 2808 0100 2046     		mov	r0, r4
 2809 0102 FFF7FEFF 		bl	UART_EndRxTransfer
 2810              	.LVL230:
2245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
 2811              		.loc 1 2245 0
 2812 0106 2368     		ldr	r3, [r4]
 2813 0108 9A68     		ldr	r2, [r3, #8]
 2814 010a 12F0400F 		tst	r2, #64
 2815 010e 15D0     		beq	.L219
2247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2816              		.loc 1 2247 0
 2817 0110 9A68     		ldr	r2, [r3, #8]
 2818 0112 22F04002 		bic	r2, r2, #64
 2819 0116 9A60     		str	r2, [r3, #8]
2250:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           {
 2820              		.loc 1 2250 0
 2821 0118 236F     		ldr	r3, [r4, #112]
 2822 011a 5BB1     		cbz	r3, .L220
2254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2823              		.loc 1 2254 0
 2824 011c 544A     		ldr	r2, .L230+4
 2825 011e 1A65     		str	r2, [r3, #80]
2257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             {
 2826              		.loc 1 2257 0
 2827 0120 206F     		ldr	r0, [r4, #112]
 2828 0122 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2829              	.LVL231:
 2830 0126 0028     		cmp	r0, #0
 2831 0128 00F09A80 		beq	.L205
2260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             }
 2832              		.loc 1 2260 0
 2833 012c 206F     		ldr	r0, [r4, #112]
 2834 012e 036D     		ldr	r3, [r0, #80]
 2835 0130 9847     		blx	r3
 2836              	.LVL232:
ARM GAS  /tmp/ccwHIqYH.s 			page 127


 2837 0132 70BD     		pop	{r4, r5, r6, pc}
 2838              	.LVL233:
 2839              	.L220:
2271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2840              		.loc 1 2271 0
 2841 0134 2046     		mov	r0, r4
 2842 0136 FFF7FEFF 		bl	HAL_UART_ErrorCallback
 2843              	.LVL234:
 2844 013a 70BD     		pop	{r4, r5, r6, pc}
 2845              	.LVL235:
 2846              	.L219:
2284:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2847              		.loc 1 2284 0
 2848 013c 2046     		mov	r0, r4
 2849 013e FFF7FEFF 		bl	HAL_UART_ErrorCallback
 2850              	.LVL236:
 2851 0142 70BD     		pop	{r4, r5, r6, pc}
 2852              	.LVL237:
 2853              	.L218:
2297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2854              		.loc 1 2297 0
 2855 0144 2046     		mov	r0, r4
 2856 0146 FFF7FEFF 		bl	HAL_UART_ErrorCallback
 2857              	.LVL238:
2299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 2858              		.loc 1 2299 0
 2859 014a 0023     		movs	r3, #0
 2860 014c C4F88030 		str	r3, [r4, #128]
 2861 0150 70BD     		pop	{r4, r5, r6, pc}
 2862              	.LVL239:
 2863              	.L208:
2308:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       && ((isrflags & USART_ISR_IDLE) != 0U)
 2864              		.loc 1 2308 0
 2865 0152 226E     		ldr	r2, [r4, #96]
 2866 0154 012A     		cmp	r2, #1
 2867 0156 11D0     		beq	.L227
 2868              	.L221:
2396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2869              		.loc 1 2396 0
 2870 0158 13F4801F 		tst	r3, #1048576
 2871 015c 02D0     		beq	.L224
2396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2872              		.loc 1 2396 0 is_stmt 0 discriminator 1
 2873 015e 15F4800F 		tst	r5, #4194304
 2874 0162 70D1     		bne	.L228
 2875              	.L224:
2416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       && ((cr1its & USART_CR1_TXEIE) != 0U))
 2876              		.loc 1 2416 0 is_stmt 1
 2877 0164 13F0800F 		tst	r3, #128
 2878 0168 74D0     		beq	.L225
2417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2879              		.loc 1 2417 0
 2880 016a 10F0800F 		tst	r0, #128
 2881 016e 71D0     		beq	.L225
2419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2882              		.loc 1 2419 0
 2883 0170 A36E     		ldr	r3, [r4, #104]
ARM GAS  /tmp/ccwHIqYH.s 			page 128


 2884              	.LVL240:
 2885 0172 002B     		cmp	r3, #0
 2886 0174 74D0     		beq	.L205
2421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 2887              		.loc 1 2421 0
 2888 0176 2046     		mov	r0, r4
 2889              	.LVL241:
 2890 0178 9847     		blx	r3
 2891              	.LVL242:
 2892 017a 70BD     		pop	{r4, r5, r6, pc}
 2893              	.LVL243:
 2894              	.L227:
2309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       && ((cr1its & USART_ISR_IDLE) != 0U))
 2895              		.loc 1 2309 0
 2896 017c 13F0100F 		tst	r3, #16
 2897 0180 EAD0     		beq	.L221
2310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2898              		.loc 1 2310 0
 2899 0182 10F0100F 		tst	r0, #16
 2900 0186 E7D0     		beq	.L221
2312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2901              		.loc 1 2312 0
 2902 0188 1023     		movs	r3, #16
 2903              	.LVL244:
 2904 018a 0B62     		str	r3, [r1, #32]
2315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2905              		.loc 1 2315 0
 2906 018c 2268     		ldr	r2, [r4]
 2907 018e 9368     		ldr	r3, [r2, #8]
 2908 0190 13F0400F 		tst	r3, #64
 2909 0194 34D0     		beq	.L222
 2910              	.LBB2:
2321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if ((nb_remaining_rx_data > 0U)
 2911              		.loc 1 2321 0
 2912 0196 216F     		ldr	r1, [r4, #112]
 2913 0198 0B68     		ldr	r3, [r1]
 2914 019a 5B68     		ldr	r3, [r3, #4]
 2915 019c 9BB2     		uxth	r3, r3
 2916              	.LVL245:
2322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           && (nb_remaining_rx_data < huart->RxXferSize))
 2917              		.loc 1 2322 0
 2918 019e 002B     		cmp	r3, #0
 2919 01a0 5ED0     		beq	.L205
2323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 2920              		.loc 1 2323 0
 2921 01a2 B4F85800 		ldrh	r0, [r4, #88]
 2922              	.LVL246:
 2923 01a6 8342     		cmp	r3, r0
 2924 01a8 5AD2     		bcs	.L205
2326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2925              		.loc 1 2326 0
 2926 01aa A4F85A30 		strh	r3, [r4, #90]	@ movhi
2329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
 2927              		.loc 1 2329 0
 2928 01ae CB69     		ldr	r3, [r1, #28]
 2929              	.LVL247:
 2930 01b0 B3F5807F 		cmp	r3, #256
ARM GAS  /tmp/ccwHIqYH.s 			page 129


 2931 01b4 19D0     		beq	.L223
2332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2932              		.loc 1 2332 0
 2933 01b6 1368     		ldr	r3, [r2]
 2934 01b8 23F48073 		bic	r3, r3, #256
 2935 01bc 1360     		str	r3, [r2]
 2936              	.LVL248:
2333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2937              		.loc 1 2333 0
 2938 01be 2268     		ldr	r2, [r4]
 2939 01c0 9368     		ldr	r3, [r2, #8]
 2940 01c2 23F00103 		bic	r3, r3, #1
 2941 01c6 9360     		str	r3, [r2, #8]
2337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2942              		.loc 1 2337 0
 2943 01c8 2268     		ldr	r2, [r4]
 2944 01ca 9368     		ldr	r3, [r2, #8]
 2945 01cc 23F04003 		bic	r3, r3, #64
 2946 01d0 9360     		str	r3, [r2, #8]
2340:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 2947              		.loc 1 2340 0
 2948 01d2 2023     		movs	r3, #32
 2949 01d4 E367     		str	r3, [r4, #124]
2341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2950              		.loc 1 2341 0
 2951 01d6 0023     		movs	r3, #0
 2952 01d8 2366     		str	r3, [r4, #96]
2343:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2953              		.loc 1 2343 0
 2954 01da 2268     		ldr	r2, [r4]
 2955 01dc 1368     		ldr	r3, [r2]
 2956 01de 23F01003 		bic	r3, r3, #16
 2957 01e2 1360     		str	r3, [r2]
2346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
 2958              		.loc 1 2346 0
 2959 01e4 206F     		ldr	r0, [r4, #112]
 2960 01e6 FFF7FEFF 		bl	HAL_DMA_Abort
 2961              	.LVL249:
 2962              	.L223:
2353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 2963              		.loc 1 2353 0
 2964 01ea B4F85810 		ldrh	r1, [r4, #88]
 2965 01ee B4F85A30 		ldrh	r3, [r4, #90]
 2966 01f2 9BB2     		uxth	r3, r3
 2967 01f4 C91A     		subs	r1, r1, r3
 2968 01f6 89B2     		uxth	r1, r1
 2969 01f8 2046     		mov	r0, r4
 2970 01fa FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
 2971              	.LVL250:
 2972 01fe 70BD     		pop	{r4, r5, r6, pc}
 2973              	.LVL251:
 2974              	.L222:
 2975              	.LBE2:
 2976              	.LBB3:
2363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if ((huart->RxXferCount > 0U)
 2977              		.loc 1 2363 0
 2978 0200 B4F85810 		ldrh	r1, [r4, #88]
ARM GAS  /tmp/ccwHIqYH.s 			page 130


 2979 0204 B4F85A30 		ldrh	r3, [r4, #90]
 2980 0208 9BB2     		uxth	r3, r3
 2981 020a C91A     		subs	r1, r1, r3
 2982 020c 89B2     		uxth	r1, r1
 2983              	.LVL252:
2364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           && (nb_rx_data > 0U))
 2984              		.loc 1 2364 0
 2985 020e B4F85A30 		ldrh	r3, [r4, #90]
 2986 0212 9BB2     		uxth	r3, r3
 2987 0214 23B3     		cbz	r3, .L205
2365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 2988              		.loc 1 2365 0
 2989 0216 19B3     		cbz	r1, .L205
2368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2990              		.loc 1 2368 0
 2991 0218 1368     		ldr	r3, [r2]
 2992 021a 23F49073 		bic	r3, r3, #288
 2993 021e 1360     		str	r3, [r2]
2371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2994              		.loc 1 2371 0
 2995 0220 2268     		ldr	r2, [r4]
 2996 0222 9368     		ldr	r3, [r2, #8]
 2997 0224 23F00103 		bic	r3, r3, #1
 2998 0228 9360     		str	r3, [r2, #8]
2374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 2999              		.loc 1 2374 0
 3000 022a 2023     		movs	r3, #32
 3001 022c E367     		str	r3, [r4, #124]
2375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3002              		.loc 1 2375 0
 3003 022e 0023     		movs	r3, #0
 3004 0230 2366     		str	r3, [r4, #96]
2378:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3005              		.loc 1 2378 0
 3006 0232 6366     		str	r3, [r4, #100]
2380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 3007              		.loc 1 2380 0
 3008 0234 2268     		ldr	r2, [r4]
 3009 0236 1368     		ldr	r3, [r2]
 3010 0238 23F01003 		bic	r3, r3, #16
 3011 023c 1360     		str	r3, [r2]
2386:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 3012              		.loc 1 2386 0
 3013 023e 2046     		mov	r0, r4
 3014              	.LVL253:
 3015 0240 FFF7FEFF 		bl	HAL_UARTEx_RxEventCallback
 3016              	.LVL254:
 3017 0244 70BD     		pop	{r4, r5, r6, pc}
 3018              	.LVL255:
 3019              	.L228:
 3020              	.LBE3:
2398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3021              		.loc 1 2398 0
 3022 0246 4FF48013 		mov	r3, #1048576
 3023              	.LVL256:
 3024 024a 0B62     		str	r3, [r1, #32]
2408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
ARM GAS  /tmp/ccwHIqYH.s 			page 131


 3025              		.loc 1 2408 0
 3026 024c 2046     		mov	r0, r4
 3027              	.LVL257:
 3028 024e FFF7FEFF 		bl	HAL_UARTEx_WakeupCallback
 3029              	.LVL258:
2410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 3030              		.loc 1 2410 0
 3031 0252 70BD     		pop	{r4, r5, r6, pc}
 3032              	.LVL259:
 3033              	.L225:
2427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 3034              		.loc 1 2427 0
 3035 0254 13F0400F 		tst	r3, #64
 3036 0258 02D0     		beq	.L205
2427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 3037              		.loc 1 2427 0 is_stmt 0 discriminator 1
 3038 025a 10F0400F 		tst	r0, #64
 3039 025e 00D1     		bne	.L229
 3040              	.LVL260:
 3041              	.L205:
 3042 0260 70BD     		pop	{r4, r5, r6, pc}
 3043              	.LVL261:
 3044              	.L229:
2429:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return;
 3045              		.loc 1 2429 0 is_stmt 1
 3046 0262 2046     		mov	r0, r4
 3047              	.LVL262:
 3048 0264 FFF7FEFF 		bl	UART_EndTransmit_IT
 3049              	.LVL263:
2430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 3050              		.loc 1 2430 0
 3051 0268 FAE7     		b	.L205
 3052              	.L231:
 3053 026a 00BF     		.align	2
 3054              	.L230:
 3055 026c 20010004 		.word	67109152
 3056 0270 00000000 		.word	UART_DMAAbortOnError
 3057              		.cfi_endproc
 3058              	.LFE163:
 3060              		.section	.text.HAL_UART_ReceiverTimeout_Config,"ax",%progbits
 3061              		.align	1
 3062              		.global	HAL_UART_ReceiverTimeout_Config
 3063              		.syntax unified
 3064              		.thumb
 3065              		.thumb_func
 3066              		.fpu fpv5-d16
 3068              	HAL_UART_ReceiverTimeout_Config:
 3069              	.LFB174:
2628:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
 3070              		.loc 1 2628 0
 3071              		.cfi_startproc
 3072              		@ args = 0, pretend = 0, frame = 0
 3073              		@ frame_needed = 0, uses_anonymous_args = 0
 3074              		@ link register save eliminated.
 3075              	.LVL264:
2630:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 3076              		.loc 1 2630 0
ARM GAS  /tmp/ccwHIqYH.s 			page 132


 3077 0000 0268     		ldr	r2, [r0]
 3078 0002 5369     		ldr	r3, [r2, #20]
 3079 0004 03F07F43 		and	r3, r3, #-16777216
 3080 0008 1943     		orrs	r1, r1, r3
 3081              	.LVL265:
 3082 000a 5161     		str	r1, [r2, #20]
 3083 000c 7047     		bx	lr
 3084              		.cfi_endproc
 3085              	.LFE174:
 3087              		.section	.text.HAL_UART_EnableReceiverTimeout,"ax",%progbits
 3088              		.align	1
 3089              		.global	HAL_UART_EnableReceiverTimeout
 3090              		.syntax unified
 3091              		.thumb
 3092              		.thumb_func
 3093              		.fpu fpv5-d16
 3095              	HAL_UART_EnableReceiverTimeout:
 3096              	.LFB175:
2640:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 3097              		.loc 1 2640 0
 3098              		.cfi_startproc
 3099              		@ args = 0, pretend = 0, frame = 0
 3100              		@ frame_needed = 0, uses_anonymous_args = 0
 3101              		@ link register save eliminated.
 3102              	.LVL266:
2641:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 3103              		.loc 1 2641 0
 3104 0000 836F     		ldr	r3, [r0, #120]
 3105 0002 202B     		cmp	r3, #32
 3106 0004 01D0     		beq	.L237
2660:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 3107              		.loc 1 2660 0
 3108 0006 0220     		movs	r0, #2
 3109              	.LVL267:
 3110 0008 7047     		bx	lr
 3111              	.LVL268:
 3112              	.L237:
2644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3113              		.loc 1 2644 0
 3114 000a 90F87430 		ldrb	r3, [r0, #116]	@ zero_extendqisi2
 3115 000e 012B     		cmp	r3, #1
 3116 0010 10D0     		beq	.L236
2644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3117              		.loc 1 2644 0 is_stmt 0 discriminator 2
 3118 0012 0123     		movs	r3, #1
 3119 0014 80F87430 		strb	r3, [r0, #116]
2646:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3120              		.loc 1 2646 0 is_stmt 1 discriminator 2
 3121 0018 2423     		movs	r3, #36
 3122 001a 8367     		str	r3, [r0, #120]
2649:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3123              		.loc 1 2649 0 discriminator 2
 3124 001c 0268     		ldr	r2, [r0]
 3125 001e 5368     		ldr	r3, [r2, #4]
 3126 0020 43F40003 		orr	r3, r3, #8388608
 3127 0024 5360     		str	r3, [r2, #4]
2651:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccwHIqYH.s 			page 133


 3128              		.loc 1 2651 0 discriminator 2
 3129 0026 2023     		movs	r3, #32
 3130 0028 8367     		str	r3, [r0, #120]
2654:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3131              		.loc 1 2654 0 discriminator 2
 3132 002a 0023     		movs	r3, #0
 3133 002c 80F87430 		strb	r3, [r0, #116]
2656:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 3134              		.loc 1 2656 0 discriminator 2
 3135 0030 1846     		mov	r0, r3
 3136              	.LVL269:
 3137 0032 7047     		bx	lr
 3138              	.LVL270:
 3139              	.L236:
2644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3140              		.loc 1 2644 0
 3141 0034 0220     		movs	r0, #2
 3142              	.LVL271:
2662:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3143              		.loc 1 2662 0
 3144 0036 7047     		bx	lr
 3145              		.cfi_endproc
 3146              	.LFE175:
 3148              		.section	.text.HAL_UART_DisableReceiverTimeout,"ax",%progbits
 3149              		.align	1
 3150              		.global	HAL_UART_DisableReceiverTimeout
 3151              		.syntax unified
 3152              		.thumb
 3153              		.thumb_func
 3154              		.fpu fpv5-d16
 3156              	HAL_UART_DisableReceiverTimeout:
 3157              	.LFB176:
2671:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 3158              		.loc 1 2671 0
 3159              		.cfi_startproc
 3160              		@ args = 0, pretend = 0, frame = 0
 3161              		@ frame_needed = 0, uses_anonymous_args = 0
 3162              		@ link register save eliminated.
 3163              	.LVL272:
2672:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 3164              		.loc 1 2672 0
 3165 0000 836F     		ldr	r3, [r0, #120]
 3166 0002 202B     		cmp	r3, #32
 3167 0004 01D0     		beq	.L242
2691:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 3168              		.loc 1 2691 0
 3169 0006 0220     		movs	r0, #2
 3170              	.LVL273:
 3171 0008 7047     		bx	lr
 3172              	.LVL274:
 3173              	.L242:
2675:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3174              		.loc 1 2675 0
 3175 000a 90F87430 		ldrb	r3, [r0, #116]	@ zero_extendqisi2
 3176 000e 012B     		cmp	r3, #1
 3177 0010 10D0     		beq	.L241
2675:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccwHIqYH.s 			page 134


 3178              		.loc 1 2675 0 is_stmt 0 discriminator 2
 3179 0012 0123     		movs	r3, #1
 3180 0014 80F87430 		strb	r3, [r0, #116]
2677:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3181              		.loc 1 2677 0 is_stmt 1 discriminator 2
 3182 0018 2423     		movs	r3, #36
 3183 001a 8367     		str	r3, [r0, #120]
2680:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3184              		.loc 1 2680 0 discriminator 2
 3185 001c 0268     		ldr	r2, [r0]
 3186 001e 5368     		ldr	r3, [r2, #4]
 3187 0020 23F40003 		bic	r3, r3, #8388608
 3188 0024 5360     		str	r3, [r2, #4]
2682:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3189              		.loc 1 2682 0 discriminator 2
 3190 0026 2023     		movs	r3, #32
 3191 0028 8367     		str	r3, [r0, #120]
2685:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3192              		.loc 1 2685 0 discriminator 2
 3193 002a 0023     		movs	r3, #0
 3194 002c 80F87430 		strb	r3, [r0, #116]
2687:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 3195              		.loc 1 2687 0 discriminator 2
 3196 0030 1846     		mov	r0, r3
 3197              	.LVL275:
 3198 0032 7047     		bx	lr
 3199              	.LVL276:
 3200              	.L241:
2675:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3201              		.loc 1 2675 0
 3202 0034 0220     		movs	r0, #2
 3203              	.LVL277:
2693:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3204              		.loc 1 2693 0
 3205 0036 7047     		bx	lr
 3206              		.cfi_endproc
 3207              	.LFE176:
 3209              		.section	.text.HAL_MultiProcessor_EnterMuteMode,"ax",%progbits
 3210              		.align	1
 3211              		.global	HAL_MultiProcessor_EnterMuteMode
 3212              		.syntax unified
 3213              		.thumb
 3214              		.thumb_func
 3215              		.fpu fpv5-d16
 3217              	HAL_MultiProcessor_EnterMuteMode:
 3218              	.LFB179:
2742:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_MUTE_MODE_REQUEST);
 3219              		.loc 1 2742 0
 3220              		.cfi_startproc
 3221              		@ args = 0, pretend = 0, frame = 0
 3222              		@ frame_needed = 0, uses_anonymous_args = 0
 3223              		@ link register save eliminated.
 3224              	.LVL278:
2743:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 3225              		.loc 1 2743 0
 3226 0000 0268     		ldr	r2, [r0]
 3227 0002 9369     		ldr	r3, [r2, #24]
ARM GAS  /tmp/ccwHIqYH.s 			page 135


 3228 0004 43F00403 		orr	r3, r3, #4
 3229 0008 9361     		str	r3, [r2, #24]
 3230 000a 7047     		bx	lr
 3231              		.cfi_endproc
 3232              	.LFE179:
 3234              		.section	.text.HAL_HalfDuplex_EnableTransmitter,"ax",%progbits
 3235              		.align	1
 3236              		.global	HAL_HalfDuplex_EnableTransmitter
 3237              		.syntax unified
 3238              		.thumb
 3239              		.thumb_func
 3240              		.fpu fpv5-d16
 3242              	HAL_HalfDuplex_EnableTransmitter:
 3243              	.LFB180:
2752:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
 3244              		.loc 1 2752 0
 3245              		.cfi_startproc
 3246              		@ args = 0, pretend = 0, frame = 0
 3247              		@ frame_needed = 0, uses_anonymous_args = 0
 3248              		@ link register save eliminated.
 3249              	.LVL279:
2753:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3250              		.loc 1 2753 0
 3251 0000 90F87430 		ldrb	r3, [r0, #116]	@ zero_extendqisi2
 3252 0004 012B     		cmp	r3, #1
 3253 0006 15D0     		beq	.L246
2753:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3254              		.loc 1 2753 0 is_stmt 0 discriminator 2
 3255 0008 0123     		movs	r3, #1
 3256 000a 80F87430 		strb	r3, [r0, #116]
2754:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3257              		.loc 1 2754 0 is_stmt 1 discriminator 2
 3258 000e 2423     		movs	r3, #36
 3259 0010 8367     		str	r3, [r0, #120]
2757:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3260              		.loc 1 2757 0 discriminator 2
 3261 0012 0268     		ldr	r2, [r0]
 3262 0014 1368     		ldr	r3, [r2]
 3263 0016 23F00C03 		bic	r3, r3, #12
 3264 001a 1360     		str	r3, [r2]
2760:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3265              		.loc 1 2760 0 discriminator 2
 3266 001c 0268     		ldr	r2, [r0]
 3267 001e 1368     		ldr	r3, [r2]
 3268 0020 43F00803 		orr	r3, r3, #8
 3269 0024 1360     		str	r3, [r2]
2762:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3270              		.loc 1 2762 0 discriminator 2
 3271 0026 2023     		movs	r3, #32
 3272 0028 8367     		str	r3, [r0, #120]
2764:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3273              		.loc 1 2764 0 discriminator 2
 3274 002a 0023     		movs	r3, #0
 3275 002c 80F87430 		strb	r3, [r0, #116]
2766:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 3276              		.loc 1 2766 0 discriminator 2
 3277 0030 1846     		mov	r0, r3
ARM GAS  /tmp/ccwHIqYH.s 			page 136


 3278              	.LVL280:
 3279 0032 7047     		bx	lr
 3280              	.LVL281:
 3281              	.L246:
2753:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3282              		.loc 1 2753 0
 3283 0034 0220     		movs	r0, #2
 3284              	.LVL282:
2767:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3285              		.loc 1 2767 0
 3286 0036 7047     		bx	lr
 3287              		.cfi_endproc
 3288              	.LFE180:
 3290              		.section	.text.HAL_HalfDuplex_EnableReceiver,"ax",%progbits
 3291              		.align	1
 3292              		.global	HAL_HalfDuplex_EnableReceiver
 3293              		.syntax unified
 3294              		.thumb
 3295              		.thumb_func
 3296              		.fpu fpv5-d16
 3298              	HAL_HalfDuplex_EnableReceiver:
 3299              	.LFB181:
2775:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
 3300              		.loc 1 2775 0
 3301              		.cfi_startproc
 3302              		@ args = 0, pretend = 0, frame = 0
 3303              		@ frame_needed = 0, uses_anonymous_args = 0
 3304              		@ link register save eliminated.
 3305              	.LVL283:
2776:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3306              		.loc 1 2776 0
 3307 0000 90F87430 		ldrb	r3, [r0, #116]	@ zero_extendqisi2
 3308 0004 012B     		cmp	r3, #1
 3309 0006 15D0     		beq	.L249
2776:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3310              		.loc 1 2776 0 is_stmt 0 discriminator 2
 3311 0008 0123     		movs	r3, #1
 3312 000a 80F87430 		strb	r3, [r0, #116]
2777:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3313              		.loc 1 2777 0 is_stmt 1 discriminator 2
 3314 000e 2423     		movs	r3, #36
 3315 0010 8367     		str	r3, [r0, #120]
2780:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3316              		.loc 1 2780 0 discriminator 2
 3317 0012 0268     		ldr	r2, [r0]
 3318 0014 1368     		ldr	r3, [r2]
 3319 0016 23F00C03 		bic	r3, r3, #12
 3320 001a 1360     		str	r3, [r2]
2783:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3321              		.loc 1 2783 0 discriminator 2
 3322 001c 0268     		ldr	r2, [r0]
 3323 001e 1368     		ldr	r3, [r2]
 3324 0020 43F00403 		orr	r3, r3, #4
 3325 0024 1360     		str	r3, [r2]
2785:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3326              		.loc 1 2785 0 discriminator 2
 3327 0026 2023     		movs	r3, #32
ARM GAS  /tmp/ccwHIqYH.s 			page 137


 3328 0028 8367     		str	r3, [r0, #120]
2787:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3329              		.loc 1 2787 0 discriminator 2
 3330 002a 0023     		movs	r3, #0
 3331 002c 80F87430 		strb	r3, [r0, #116]
2789:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 3332              		.loc 1 2789 0 discriminator 2
 3333 0030 1846     		mov	r0, r3
 3334              	.LVL284:
 3335 0032 7047     		bx	lr
 3336              	.LVL285:
 3337              	.L249:
2776:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3338              		.loc 1 2776 0
 3339 0034 0220     		movs	r0, #2
 3340              	.LVL286:
2790:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3341              		.loc 1 2790 0
 3342 0036 7047     		bx	lr
 3343              		.cfi_endproc
 3344              	.LFE181:
 3346              		.section	.text.HAL_LIN_SendBreak,"ax",%progbits
 3347              		.align	1
 3348              		.global	HAL_LIN_SendBreak
 3349              		.syntax unified
 3350              		.thumb
 3351              		.thumb_func
 3352              		.fpu fpv5-d16
 3354              	HAL_LIN_SendBreak:
 3355              	.LFB182:
2799:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the parameters */
 3356              		.loc 1 2799 0
 3357              		.cfi_startproc
 3358              		@ args = 0, pretend = 0, frame = 0
 3359              		@ frame_needed = 0, uses_anonymous_args = 0
 3360              		@ link register save eliminated.
 3361              	.LVL287:
2803:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3362              		.loc 1 2803 0
 3363 0000 90F87430 		ldrb	r3, [r0, #116]	@ zero_extendqisi2
 3364 0004 012B     		cmp	r3, #1
 3365 0006 10D0     		beq	.L252
2803:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3366              		.loc 1 2803 0 is_stmt 0 discriminator 2
 3367 0008 0123     		movs	r3, #1
 3368 000a 80F87430 		strb	r3, [r0, #116]
2805:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3369              		.loc 1 2805 0 is_stmt 1 discriminator 2
 3370 000e 2423     		movs	r3, #36
 3371 0010 8367     		str	r3, [r0, #120]
2808:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3372              		.loc 1 2808 0 discriminator 2
 3373 0012 0268     		ldr	r2, [r0]
 3374 0014 9369     		ldr	r3, [r2, #24]
 3375 0016 43F00203 		orr	r3, r3, #2
 3376 001a 9361     		str	r3, [r2, #24]
2810:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccwHIqYH.s 			page 138


 3377              		.loc 1 2810 0 discriminator 2
 3378 001c 2023     		movs	r3, #32
 3379 001e 8367     		str	r3, [r0, #120]
2812:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3380              		.loc 1 2812 0 discriminator 2
 3381 0020 0023     		movs	r3, #0
 3382 0022 80F87430 		strb	r3, [r0, #116]
2814:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 3383              		.loc 1 2814 0 discriminator 2
 3384 0026 1846     		mov	r0, r3
 3385              	.LVL288:
 3386 0028 7047     		bx	lr
 3387              	.LVL289:
 3388              	.L252:
2803:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3389              		.loc 1 2803 0
 3390 002a 0220     		movs	r0, #2
 3391              	.LVL290:
2815:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3392              		.loc 1 2815 0
 3393 002c 7047     		bx	lr
 3394              		.cfi_endproc
 3395              	.LFE182:
 3397              		.section	.text.HAL_UART_GetState,"ax",%progbits
 3398              		.align	1
 3399              		.global	HAL_UART_GetState
 3400              		.syntax unified
 3401              		.thumb
 3402              		.thumb_func
 3403              		.fpu fpv5-d16
 3405              	HAL_UART_GetState:
 3406              	.LFB183:
2844:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t temp1;
 3407              		.loc 1 2844 0
 3408              		.cfi_startproc
 3409              		@ args = 0, pretend = 0, frame = 0
 3410              		@ frame_needed = 0, uses_anonymous_args = 0
 3411              		@ link register save eliminated.
 3412              	.LVL291:
2847:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   temp2 = huart->RxState;
 3413              		.loc 1 2847 0
 3414 0000 826F     		ldr	r2, [r0, #120]
 3415              	.LVL292:
2848:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3416              		.loc 1 2848 0
 3417 0002 C06F     		ldr	r0, [r0, #124]
 3418              	.LVL293:
2851:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3419              		.loc 1 2851 0
 3420 0004 1043     		orrs	r0, r0, r2
 3421              	.LVL294:
 3422 0006 7047     		bx	lr
 3423              		.cfi_endproc
 3424              	.LFE183:
 3426              		.section	.text.HAL_UART_GetError,"ax",%progbits
 3427              		.align	1
 3428              		.global	HAL_UART_GetError
ARM GAS  /tmp/ccwHIqYH.s 			page 139


 3429              		.syntax unified
 3430              		.thumb
 3431              		.thumb_func
 3432              		.fpu fpv5-d16
 3434              	HAL_UART_GetError:
 3435              	.LFB184:
2860:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return huart->ErrorCode;
 3436              		.loc 1 2860 0
 3437              		.cfi_startproc
 3438              		@ args = 0, pretend = 0, frame = 0
 3439              		@ frame_needed = 0, uses_anonymous_args = 0
 3440              		@ link register save eliminated.
 3441              	.LVL295:
2861:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 3442              		.loc 1 2861 0
 3443 0000 D0F88000 		ldr	r0, [r0, #128]
 3444              	.LVL296:
2862:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 3445              		.loc 1 2862 0
 3446 0004 7047     		bx	lr
 3447              		.cfi_endproc
 3448              	.LFE184:
 3450              		.section	.text.UART_SetConfig,"ax",%progbits
 3451              		.align	1
 3452              		.global	UART_SetConfig
 3453              		.syntax unified
 3454              		.thumb
 3455              		.thumb_func
 3456              		.fpu fpv5-d16
 3458              	UART_SetConfig:
 3459              	.LFB185:
2908:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t tmpreg;
 3460              		.loc 1 2908 0
 3461              		.cfi_startproc
 3462              		@ args = 0, pretend = 0, frame = 0
 3463              		@ frame_needed = 0, uses_anonymous_args = 0
 3464              	.LVL297:
 3465 0000 10B5     		push	{r4, lr}
 3466              	.LCFI30:
 3467              		.cfi_def_cfa_offset 8
 3468              		.cfi_offset 4, -8
 3469              		.cfi_offset 14, -4
 3470 0002 0446     		mov	r4, r0
 3471              	.LVL298:
2934:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 3472              		.loc 1 2934 0
 3473 0004 8368     		ldr	r3, [r0, #8]
 3474 0006 0269     		ldr	r2, [r0, #16]
 3475 0008 1343     		orrs	r3, r3, r2
 3476 000a 4269     		ldr	r2, [r0, #20]
 3477 000c 1343     		orrs	r3, r3, r2
 3478 000e C269     		ldr	r2, [r0, #28]
 3479 0010 1343     		orrs	r3, r3, r2
 3480              	.LVL299:
2935:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3481              		.loc 1 2935 0
 3482 0012 0168     		ldr	r1, [r0]
ARM GAS  /tmp/ccwHIqYH.s 			page 140


 3483 0014 0868     		ldr	r0, [r1]
 3484              	.LVL300:
 3485 0016 944A     		ldr	r2, .L349
 3486 0018 0240     		ands	r2, r2, r0
 3487 001a 1343     		orrs	r3, r3, r2
 3488              	.LVL301:
 3489 001c 0B60     		str	r3, [r1]
 3490              	.LVL302:
2940:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3491              		.loc 1 2940 0
 3492 001e 2268     		ldr	r2, [r4]
 3493 0020 5368     		ldr	r3, [r2, #4]
 3494 0022 23F44053 		bic	r3, r3, #12288
 3495 0026 E168     		ldr	r1, [r4, #12]
 3496 0028 0B43     		orrs	r3, r3, r1
 3497 002a 5360     		str	r3, [r2, #4]
2948:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3498              		.loc 1 2948 0
 3499 002c A369     		ldr	r3, [r4, #24]
 3500              	.LVL303:
2950:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 3501              		.loc 1 2950 0
 3502 002e 226A     		ldr	r2, [r4, #32]
 3503 0030 1343     		orrs	r3, r3, r2
 3504              	.LVL304:
2951:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3505              		.loc 1 2951 0
 3506 0032 2168     		ldr	r1, [r4]
 3507 0034 8A68     		ldr	r2, [r1, #8]
 3508 0036 22F43062 		bic	r2, r2, #2816
 3509 003a 1343     		orrs	r3, r3, r2
 3510              	.LVL305:
 3511 003c 8B60     		str	r3, [r1, #8]
 3512              	.LVL306:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3513              		.loc 1 2955 0
 3514 003e 2368     		ldr	r3, [r4]
 3515 0040 8A4A     		ldr	r2, .L349+4
 3516 0042 9342     		cmp	r3, r2
 3517 0044 2BD0     		beq	.L334
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3518              		.loc 1 2955 0 is_stmt 0 discriminator 2
 3519 0046 8A4A     		ldr	r2, .L349+8
 3520 0048 9342     		cmp	r3, r2
 3521 004a 3BD0     		beq	.L335
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3522              		.loc 1 2955 0 discriminator 9
 3523 004c 894A     		ldr	r2, .L349+12
 3524 004e 9342     		cmp	r3, r2
 3525 0050 50D0     		beq	.L336
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3526              		.loc 1 2955 0 discriminator 16
 3527 0052 894A     		ldr	r2, .L349+16
 3528 0054 9342     		cmp	r3, r2
 3529 0056 63D0     		beq	.L337
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3530              		.loc 1 2955 0 discriminator 23
ARM GAS  /tmp/ccwHIqYH.s 			page 141


 3531 0058 884A     		ldr	r2, .L349+20
 3532 005a 9342     		cmp	r3, r2
 3533 005c 75D0     		beq	.L338
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3534              		.loc 1 2955 0 discriminator 30
 3535 005e 884A     		ldr	r2, .L349+24
 3536 0060 9342     		cmp	r3, r2
 3537 0062 00F08A80 		beq	.L339
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3538              		.loc 1 2955 0 discriminator 37
 3539 0066 874A     		ldr	r2, .L349+28
 3540 0068 9342     		cmp	r3, r2
 3541 006a 00F09E80 		beq	.L340
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3542              		.loc 1 2955 0 discriminator 44
 3543 006e 864A     		ldr	r2, .L349+32
 3544 0070 9342     		cmp	r3, r2
 3545 0072 00F0B280 		beq	.L341
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3546              		.loc 1 2955 0
 3547 0076 1023     		movs	r3, #16
 3548              	.L261:
 3549              	.LVL307:
2957:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 3550              		.loc 1 2957 0 is_stmt 1
 3551 0078 E269     		ldr	r2, [r4, #28]
 3552 007a B2F5004F 		cmp	r2, #32768
 3553 007e 00F0D480 		beq	.L342
3000:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 3554              		.loc 1 3000 0
 3555 0082 082B     		cmp	r3, #8
 3556 0084 00F23281 		bhi	.L313
 3557 0088 DFE813F0 		tbh	[pc, r3, lsl #1]
 3558              	.L315:
 3559 008c 2101     		.2byte	(.L314-.L315)/2
 3560 008e 2601     		.2byte	(.L316-.L315)/2
 3561 0090 1E01     		.2byte	(.L317-.L315)/2
 3562 0092 3001     		.2byte	(.L313-.L315)/2
 3563 0094 2B01     		.2byte	(.L318-.L315)/2
 3564 0096 3001     		.2byte	(.L313-.L315)/2
 3565 0098 3001     		.2byte	(.L313-.L315)/2
 3566 009a 3001     		.2byte	(.L313-.L315)/2
 3567 009c 3301     		.2byte	(.L331-.L315)/2
 3568              	.LVL308:
 3569              		.p2align 1
 3570              	.L334:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3571              		.loc 1 2955 0 discriminator 1
 3572 009e 7B4B     		ldr	r3, .L349+36
 3573 00a0 D3F89030 		ldr	r3, [r3, #144]
 3574 00a4 03F00303 		and	r3, r3, #3
 3575 00a8 032B     		cmp	r3, #3
 3576 00aa 09D8     		bhi	.L257
 3577 00ac DFE803F0 		tbb	[pc, r3]
 3578              	.L259:
 3579 00b0 02       		.byte	(.L258-.L259)/2
 3580 00b1 04       		.byte	(.L260-.L259)/2
ARM GAS  /tmp/ccwHIqYH.s 			page 142


 3581 00b2 AD       		.byte	(.L320-.L259)/2
 3582 00b3 06       		.byte	(.L262-.L259)/2
 3583              		.p2align 1
 3584              	.L258:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3585              		.loc 1 2955 0 is_stmt 0
 3586 00b4 0123     		movs	r3, #1
 3587 00b6 DFE7     		b	.L261
 3588              	.L260:
 3589              	.LVL309:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3590              		.loc 1 2955 0 discriminator 5
 3591 00b8 0423     		movs	r3, #4
 3592 00ba DDE7     		b	.L261
 3593              	.LVL310:
 3594              	.L262:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3595              		.loc 1 2955 0 discriminator 7
 3596 00bc 0823     		movs	r3, #8
 3597 00be DBE7     		b	.L261
 3598              	.LVL311:
 3599              	.L257:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3600              		.loc 1 2955 0 discriminator 3
 3601 00c0 1023     		movs	r3, #16
 3602 00c2 D9E7     		b	.L261
 3603              	.LVL312:
 3604              	.L335:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3605              		.loc 1 2955 0 discriminator 8
 3606 00c4 714B     		ldr	r3, .L349+36
 3607 00c6 D3F89030 		ldr	r3, [r3, #144]
 3608 00ca 03F00C03 		and	r3, r3, #12
 3609 00ce 0C2B     		cmp	r3, #12
 3610 00d0 0ED8     		bhi	.L264
 3611 00d2 DFE803F0 		tbb	[pc, r3]
 3612              	.L266:
 3613 00d6 07       		.byte	(.L265-.L266)/2
 3614 00d7 0D       		.byte	(.L264-.L266)/2
 3615 00d8 0D       		.byte	(.L264-.L266)/2
 3616 00d9 0D       		.byte	(.L264-.L266)/2
 3617 00da 09       		.byte	(.L267-.L266)/2
 3618 00db 0D       		.byte	(.L264-.L266)/2
 3619 00dc 0D       		.byte	(.L264-.L266)/2
 3620 00dd 0D       		.byte	(.L264-.L266)/2
 3621 00de 9C       		.byte	(.L321-.L266)/2
 3622 00df 0D       		.byte	(.L264-.L266)/2
 3623 00e0 0D       		.byte	(.L264-.L266)/2
 3624 00e1 0D       		.byte	(.L264-.L266)/2
 3625 00e2 0B       		.byte	(.L268-.L266)/2
 3626 00e3 00       		.p2align 1
 3627              	.L265:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3628              		.loc 1 2955 0
 3629 00e4 0023     		movs	r3, #0
 3630 00e6 C7E7     		b	.L261
 3631              	.L267:
ARM GAS  /tmp/ccwHIqYH.s 			page 143


 3632              	.LVL313:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3633              		.loc 1 2955 0 discriminator 12
 3634 00e8 0423     		movs	r3, #4
 3635 00ea C5E7     		b	.L261
 3636              	.LVL314:
 3637              	.L268:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3638              		.loc 1 2955 0 discriminator 14
 3639 00ec 0823     		movs	r3, #8
 3640 00ee C3E7     		b	.L261
 3641              	.LVL315:
 3642              	.L264:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3643              		.loc 1 2955 0 discriminator 10
 3644 00f0 1023     		movs	r3, #16
 3645 00f2 C1E7     		b	.L261
 3646              	.LVL316:
 3647              	.L336:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3648              		.loc 1 2955 0 discriminator 15
 3649 00f4 654B     		ldr	r3, .L349+36
 3650 00f6 D3F89030 		ldr	r3, [r3, #144]
 3651 00fa 03F03003 		and	r3, r3, #48
 3652 00fe 102B     		cmp	r3, #16
 3653 0100 0AD0     		beq	.L271
 3654 0102 06D9     		bls	.L343
 3655 0104 202B     		cmp	r3, #32
 3656 0106 00F08480 		beq	.L322
 3657 010a 302B     		cmp	r3, #48
 3658 010c 06D1     		bne	.L270
 3659              	.LVL317:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3660              		.loc 1 2955 0 discriminator 21
 3661 010e 0823     		movs	r3, #8
 3662 0110 B2E7     		b	.L261
 3663              	.LVL318:
 3664              	.L343:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3665              		.loc 1 2955 0 discriminator 15
 3666 0112 1BB9     		cbnz	r3, .L270
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3667              		.loc 1 2955 0
 3668 0114 0023     		movs	r3, #0
 3669 0116 AFE7     		b	.L261
 3670              	.L271:
 3671              	.LVL319:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3672              		.loc 1 2955 0 discriminator 19
 3673 0118 0423     		movs	r3, #4
 3674 011a ADE7     		b	.L261
 3675              	.LVL320:
 3676              	.L270:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3677              		.loc 1 2955 0 discriminator 17
 3678 011c 1023     		movs	r3, #16
 3679 011e ABE7     		b	.L261
ARM GAS  /tmp/ccwHIqYH.s 			page 144


 3680              	.LVL321:
 3681              	.L337:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3682              		.loc 1 2955 0 discriminator 22
 3683 0120 5A4B     		ldr	r3, .L349+36
 3684 0122 D3F89030 		ldr	r3, [r3, #144]
 3685 0126 03F0C003 		and	r3, r3, #192
 3686 012a 402B     		cmp	r3, #64
 3687 012c 09D0     		beq	.L277
 3688 012e 05D9     		bls	.L344
 3689 0130 802B     		cmp	r3, #128
 3690 0132 70D0     		beq	.L323
 3691 0134 C02B     		cmp	r3, #192
 3692 0136 06D1     		bne	.L276
 3693              	.LVL322:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3694              		.loc 1 2955 0 discriminator 28
 3695 0138 0823     		movs	r3, #8
 3696 013a 9DE7     		b	.L261
 3697              	.LVL323:
 3698              	.L344:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3699              		.loc 1 2955 0 discriminator 22
 3700 013c 1BB9     		cbnz	r3, .L276
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3701              		.loc 1 2955 0
 3702 013e 0023     		movs	r3, #0
 3703 0140 9AE7     		b	.L261
 3704              	.L277:
 3705              	.LVL324:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3706              		.loc 1 2955 0 discriminator 26
 3707 0142 0423     		movs	r3, #4
 3708 0144 98E7     		b	.L261
 3709              	.LVL325:
 3710              	.L276:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3711              		.loc 1 2955 0 discriminator 24
 3712 0146 1023     		movs	r3, #16
 3713 0148 96E7     		b	.L261
 3714              	.LVL326:
 3715              	.L338:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3716              		.loc 1 2955 0 discriminator 29
 3717 014a 504B     		ldr	r3, .L349+36
 3718 014c D3F89030 		ldr	r3, [r3, #144]
 3719 0150 03F44073 		and	r3, r3, #768
 3720 0154 B3F5807F 		cmp	r3, #256
 3721 0158 0BD0     		beq	.L283
 3722 015a 07D9     		bls	.L345
 3723 015c B3F5007F 		cmp	r3, #512
 3724 0160 5BD0     		beq	.L324
 3725 0162 B3F5407F 		cmp	r3, #768
 3726 0166 06D1     		bne	.L282
 3727              	.LVL327:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3728              		.loc 1 2955 0 discriminator 35
ARM GAS  /tmp/ccwHIqYH.s 			page 145


 3729 0168 0823     		movs	r3, #8
 3730 016a 85E7     		b	.L261
 3731              	.LVL328:
 3732              	.L345:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3733              		.loc 1 2955 0 discriminator 29
 3734 016c 1BB9     		cbnz	r3, .L282
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3735              		.loc 1 2955 0
 3736 016e 0023     		movs	r3, #0
 3737 0170 82E7     		b	.L261
 3738              	.L283:
 3739              	.LVL329:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3740              		.loc 1 2955 0 discriminator 33
 3741 0172 0423     		movs	r3, #4
 3742 0174 80E7     		b	.L261
 3743              	.LVL330:
 3744              	.L282:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3745              		.loc 1 2955 0 discriminator 31
 3746 0176 1023     		movs	r3, #16
 3747 0178 7EE7     		b	.L261
 3748              	.LVL331:
 3749              	.L339:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3750              		.loc 1 2955 0 discriminator 36
 3751 017a 444B     		ldr	r3, .L349+36
 3752 017c D3F89030 		ldr	r3, [r3, #144]
 3753 0180 03F44063 		and	r3, r3, #3072
 3754 0184 B3F5806F 		cmp	r3, #1024
 3755 0188 0BD0     		beq	.L289
 3756 018a 07D9     		bls	.L346
 3757 018c B3F5006F 		cmp	r3, #2048
 3758 0190 45D0     		beq	.L325
 3759 0192 B3F5406F 		cmp	r3, #3072
 3760 0196 06D1     		bne	.L288
 3761              	.LVL332:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3762              		.loc 1 2955 0 discriminator 42
 3763 0198 0823     		movs	r3, #8
 3764 019a 6DE7     		b	.L261
 3765              	.LVL333:
 3766              	.L346:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3767              		.loc 1 2955 0 discriminator 36
 3768 019c 1BB9     		cbnz	r3, .L288
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3769              		.loc 1 2955 0
 3770 019e 0123     		movs	r3, #1
 3771 01a0 6AE7     		b	.L261
 3772              	.L289:
 3773              	.LVL334:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3774              		.loc 1 2955 0 discriminator 40
 3775 01a2 0423     		movs	r3, #4
 3776 01a4 68E7     		b	.L261
ARM GAS  /tmp/ccwHIqYH.s 			page 146


 3777              	.LVL335:
 3778              	.L288:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3779              		.loc 1 2955 0 discriminator 38
 3780 01a6 1023     		movs	r3, #16
 3781 01a8 66E7     		b	.L261
 3782              	.LVL336:
 3783              	.L340:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3784              		.loc 1 2955 0 discriminator 43
 3785 01aa 384B     		ldr	r3, .L349+36
 3786 01ac D3F89030 		ldr	r3, [r3, #144]
 3787 01b0 03F44053 		and	r3, r3, #12288
 3788 01b4 B3F5805F 		cmp	r3, #4096
 3789 01b8 0BD0     		beq	.L295
 3790 01ba 07D9     		bls	.L347
 3791 01bc B3F5005F 		cmp	r3, #8192
 3792 01c0 2FD0     		beq	.L326
 3793 01c2 B3F5405F 		cmp	r3, #12288
 3794 01c6 06D1     		bne	.L294
 3795              	.LVL337:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3796              		.loc 1 2955 0 discriminator 49
 3797 01c8 0823     		movs	r3, #8
 3798 01ca 55E7     		b	.L261
 3799              	.LVL338:
 3800              	.L347:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3801              		.loc 1 2955 0 discriminator 43
 3802 01cc 1BB9     		cbnz	r3, .L294
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3803              		.loc 1 2955 0
 3804 01ce 0023     		movs	r3, #0
 3805 01d0 52E7     		b	.L261
 3806              	.L295:
 3807              	.LVL339:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3808              		.loc 1 2955 0 discriminator 47
 3809 01d2 0423     		movs	r3, #4
 3810 01d4 50E7     		b	.L261
 3811              	.LVL340:
 3812              	.L294:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3813              		.loc 1 2955 0 discriminator 45
 3814 01d6 1023     		movs	r3, #16
 3815 01d8 4EE7     		b	.L261
 3816              	.LVL341:
 3817              	.L341:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3818              		.loc 1 2955 0 discriminator 50
 3819 01da 2C4B     		ldr	r3, .L349+36
 3820 01dc D3F89030 		ldr	r3, [r3, #144]
 3821 01e0 03F44043 		and	r3, r3, #49152
 3822 01e4 B3F5804F 		cmp	r3, #16384
 3823 01e8 0BD0     		beq	.L300
 3824 01ea 07D9     		bls	.L348
 3825 01ec B3F5004F 		cmp	r3, #32768
ARM GAS  /tmp/ccwHIqYH.s 			page 147


 3826 01f0 19D0     		beq	.L328
 3827 01f2 B3F5404F 		cmp	r3, #49152
 3828 01f6 06D1     		bne	.L299
 3829              	.LVL342:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3830              		.loc 1 2955 0 discriminator 56
 3831 01f8 0823     		movs	r3, #8
 3832 01fa 3DE7     		b	.L261
 3833              	.LVL343:
 3834              	.L348:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3835              		.loc 1 2955 0 discriminator 50
 3836 01fc 1BB9     		cbnz	r3, .L299
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3837              		.loc 1 2955 0
 3838 01fe 0023     		movs	r3, #0
 3839 0200 3AE7     		b	.L261
 3840              	.L300:
 3841              	.LVL344:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3842              		.loc 1 2955 0 discriminator 54
 3843 0202 0423     		movs	r3, #4
 3844 0204 38E7     		b	.L261
 3845              	.LVL345:
 3846              	.L299:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3847              		.loc 1 2955 0 discriminator 52
 3848 0206 1023     		movs	r3, #16
 3849 0208 36E7     		b	.L261
 3850              	.LVL346:
 3851              	.L320:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3852              		.loc 1 2955 0
 3853 020a 0223     		movs	r3, #2
 3854 020c 34E7     		b	.L261
 3855              	.L321:
 3856 020e 0223     		movs	r3, #2
 3857 0210 32E7     		b	.L261
 3858              	.L322:
 3859 0212 0223     		movs	r3, #2
 3860 0214 30E7     		b	.L261
 3861              	.L323:
 3862 0216 0223     		movs	r3, #2
 3863 0218 2EE7     		b	.L261
 3864              	.L324:
 3865 021a 0223     		movs	r3, #2
 3866 021c 2CE7     		b	.L261
 3867              	.L325:
 3868 021e 0223     		movs	r3, #2
 3869 0220 2AE7     		b	.L261
 3870              	.L326:
 3871 0222 0223     		movs	r3, #2
 3872 0224 28E7     		b	.L261
 3873              	.L328:
 3874 0226 0223     		movs	r3, #2
 3875 0228 26E7     		b	.L261
 3876              	.LVL347:
ARM GAS  /tmp/ccwHIqYH.s 			page 148


 3877              	.L342:
2959:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 3878              		.loc 1 2959 0 is_stmt 1
 3879 022a 082B     		cmp	r3, #8
 3880 022c 18D8     		bhi	.L305
 3881 022e DFE803F0 		tbb	[pc, r3]
 3882              	.L307:
 3883 0232 08       		.byte	(.L306-.L307)/2
 3884 0233 0D       		.byte	(.L308-.L307)/2
 3885 0234 05       		.byte	(.L309-.L307)/2
 3886 0235 17       		.byte	(.L305-.L307)/2
 3887 0236 12       		.byte	(.L310-.L307)/2
 3888 0237 17       		.byte	(.L305-.L307)/2
 3889 0238 17       		.byte	(.L305-.L307)/2
 3890 0239 17       		.byte	(.L305-.L307)/2
 3891 023a 31       		.byte	(.L329-.L307)/2
 3892 023b 00       		.p2align 1
 3893              	.L309:
2968:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 3894              		.loc 1 2968 0
 3895 023c 144A     		ldr	r2, .L349+40
2913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t pclk;
 3896              		.loc 1 2913 0
 3897 023e 0020     		movs	r0, #0
 3898 0240 2BE0     		b	.L311
 3899              	.L306:
2962:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 3900              		.loc 1 2962 0
 3901 0242 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 3902              	.LVL348:
 3903 0246 0246     		mov	r2, r0
 3904              	.LVL349:
2913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t pclk;
 3905              		.loc 1 2913 0
 3906 0248 0020     		movs	r0, #0
 3907              	.LVL350:
2963:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK2:
 3908              		.loc 1 2963 0
 3909 024a 26E0     		b	.L311
 3910              	.LVL351:
 3911              	.L308:
2965:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 3912              		.loc 1 2965 0
 3913 024c FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 3914              	.LVL352:
 3915 0250 0246     		mov	r2, r0
 3916              	.LVL353:
2913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t pclk;
 3917              		.loc 1 2913 0
 3918 0252 0020     		movs	r0, #0
 3919              	.LVL354:
2966:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
 3920              		.loc 1 2966 0
 3921 0254 21E0     		b	.L311
 3922              	.LVL355:
 3923              	.L310:
2971:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
ARM GAS  /tmp/ccwHIqYH.s 			page 149


 3924              		.loc 1 2971 0
 3925 0256 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 3926              	.LVL356:
 3927 025a 0246     		mov	r2, r0
 3928              	.LVL357:
2913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t pclk;
 3929              		.loc 1 2913 0
 3930 025c 0020     		movs	r0, #0
 3931              	.LVL358:
2972:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_LSE:
 3932              		.loc 1 2972 0
 3933 025e 1CE0     		b	.L311
 3934              	.LVL359:
 3935              	.L305:
2977:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         ret = HAL_ERROR;
 3936              		.loc 1 2977 0
 3937 0260 0022     		movs	r2, #0
2978:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 3938              		.loc 1 2978 0
 3939 0262 0120     		movs	r0, #1
2979:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 3940              		.loc 1 2979 0
 3941 0264 19E0     		b	.L311
 3942              	.L350:
 3943 0266 00BF     		.align	2
 3944              	.L349:
 3945 0268 F369FFEF 		.word	-268473869
 3946 026c 00100140 		.word	1073811456
 3947 0270 00440040 		.word	1073759232
 3948 0274 00480040 		.word	1073760256
 3949 0278 004C0040 		.word	1073761280
 3950 027c 00500040 		.word	1073762304
 3951 0280 00140140 		.word	1073812480
 3952 0284 00780040 		.word	1073772544
 3953 0288 007C0040 		.word	1073773568
 3954 028c 00380240 		.word	1073887232
 3955 0290 0024F400 		.word	16000000
 3956              	.LVL360:
 3957              	.L329:
2974:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 3958              		.loc 1 2974 0
 3959 0294 4FF40042 		mov	r2, #32768
2913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t pclk;
 3960              		.loc 1 2913 0
 3961 0298 0020     		movs	r0, #0
 3962              	.LVL361:
 3963              	.L311:
2983:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 3964              		.loc 1 2983 0
 3965 029a 002A     		cmp	r2, #0
 3966 029c 3BD0     		beq	.L312
2985:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 3967              		.loc 1 2985 0
 3968 029e 6168     		ldr	r1, [r4, #4]
 3969 02a0 4B08     		lsrs	r3, r1, #1
 3970 02a2 03EB4203 		add	r3, r3, r2, lsl #1
 3971 02a6 B3FBF1F3 		udiv	r3, r3, r1
ARM GAS  /tmp/ccwHIqYH.s 			page 150


 3972 02aa 9BB2     		uxth	r3, r3
 3973              	.LVL362:
2986:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 3974              		.loc 1 2986 0
 3975 02ac A3F11001 		sub	r1, r3, #16
 3976 02b0 4FF6EF72 		movw	r2, #65519
 3977              	.LVL363:
 3978 02b4 9142     		cmp	r1, r2
 3979 02b6 32D8     		bhi	.L330
2988:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 3980              		.loc 1 2988 0
 3981 02b8 23F00F02 		bic	r2, r3, #15
 3982              	.LVL364:
2989:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->Instance->BRR = brrtemp;
 3983              		.loc 1 2989 0
 3984 02bc C3F34203 		ubfx	r3, r3, #1, #3
 3985              	.LVL365:
 3986 02c0 1343     		orrs	r3, r3, r2
 3987              	.LVL366:
2990:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 3988              		.loc 1 2990 0
 3989 02c2 2268     		ldr	r2, [r4]
 3990 02c4 D360     		str	r3, [r2, #12]
 3991 02c6 26E0     		b	.L312
 3992              	.LVL367:
 3993              	.L317:
3009:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 3994              		.loc 1 3009 0
 3995 02c8 174B     		ldr	r3, .L351
 3996              	.LVL368:
2913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t pclk;
 3997              		.loc 1 2913 0
 3998 02ca 0020     		movs	r0, #0
 3999 02cc 14E0     		b	.L319
 4000              	.LVL369:
 4001              	.L314:
3003:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 4002              		.loc 1 3003 0
 4003 02ce FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 4004              	.LVL370:
 4005 02d2 0346     		mov	r3, r0
 4006              	.LVL371:
2913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t pclk;
 4007              		.loc 1 2913 0
 4008 02d4 0020     		movs	r0, #0
 4009              	.LVL372:
3004:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK2:
 4010              		.loc 1 3004 0
 4011 02d6 0FE0     		b	.L319
 4012              	.LVL373:
 4013              	.L316:
3006:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 4014              		.loc 1 3006 0
 4015 02d8 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 4016              	.LVL374:
 4017 02dc 0346     		mov	r3, r0
 4018              	.LVL375:
ARM GAS  /tmp/ccwHIqYH.s 			page 151


2913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t pclk;
 4019              		.loc 1 2913 0
 4020 02de 0020     		movs	r0, #0
 4021              	.LVL376:
3007:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
 4022              		.loc 1 3007 0
 4023 02e0 0AE0     		b	.L319
 4024              	.LVL377:
 4025              	.L318:
3012:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 4026              		.loc 1 3012 0
 4027 02e2 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 4028              	.LVL378:
 4029 02e6 0346     		mov	r3, r0
 4030              	.LVL379:
2913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t pclk;
 4031              		.loc 1 2913 0
 4032 02e8 0020     		movs	r0, #0
 4033              	.LVL380:
3013:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_LSE:
 4034              		.loc 1 3013 0
 4035 02ea 05E0     		b	.L319
 4036              	.LVL381:
 4037              	.L313:
3018:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         ret = HAL_ERROR;
 4038              		.loc 1 3018 0
 4039 02ec 0023     		movs	r3, #0
 4040              	.LVL382:
3019:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 4041              		.loc 1 3019 0
 4042 02ee 0120     		movs	r0, #1
3020:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4043              		.loc 1 3020 0
 4044 02f0 02E0     		b	.L319
 4045              	.LVL383:
 4046              	.L331:
3015:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 4047              		.loc 1 3015 0
 4048 02f2 4FF40043 		mov	r3, #32768
 4049              	.LVL384:
2913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t pclk;
 4050              		.loc 1 2913 0
 4051 02f6 0020     		movs	r0, #0
 4052              	.LVL385:
 4053              	.L319:
3023:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4054              		.loc 1 3023 0
 4055 02f8 6BB1     		cbz	r3, .L312
3026:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 4056              		.loc 1 3026 0
 4057 02fa 6268     		ldr	r2, [r4, #4]
 4058 02fc 03EB5203 		add	r3, r3, r2, lsr #1
 4059              	.LVL386:
 4060 0300 B3FBF2F3 		udiv	r3, r3, r2
 4061 0304 9BB2     		uxth	r3, r3
 4062              	.LVL387:
3027:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
ARM GAS  /tmp/ccwHIqYH.s 			page 152


 4063              		.loc 1 3027 0
 4064 0306 A3F11001 		sub	r1, r3, #16
 4065 030a 4FF6EF72 		movw	r2, #65519
 4066 030e 9142     		cmp	r1, r2
 4067 0310 07D8     		bhi	.L332
3029:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 4068              		.loc 1 3029 0
 4069 0312 2268     		ldr	r2, [r4]
 4070 0314 D360     		str	r3, [r2, #12]
 4071              	.LVL388:
 4072              	.L312:
3040:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxISR = NULL;
 4073              		.loc 1 3040 0
 4074 0316 0023     		movs	r3, #0
 4075 0318 6366     		str	r3, [r4, #100]
3041:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4076              		.loc 1 3041 0
 4077 031a A366     		str	r3, [r4, #104]
3044:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4078              		.loc 1 3044 0
 4079 031c 10BD     		pop	{r4, pc}
 4080              	.LVL389:
 4081              	.L330:
2994:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 4082              		.loc 1 2994 0
 4083 031e 0120     		movs	r0, #1
 4084              	.LVL390:
 4085 0320 F9E7     		b	.L312
 4086              	.LVL391:
 4087              	.L332:
3033:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 4088              		.loc 1 3033 0
 4089 0322 0120     		movs	r0, #1
 4090              	.LVL392:
 4091 0324 F7E7     		b	.L312
 4092              	.L352:
 4093 0326 00BF     		.align	2
 4094              	.L351:
 4095 0328 0024F400 		.word	16000000
 4096              		.cfi_endproc
 4097              	.LFE185:
 4099              		.section	.text.UART_AdvFeatureConfig,"ax",%progbits
 4100              		.align	1
 4101              		.global	UART_AdvFeatureConfig
 4102              		.syntax unified
 4103              		.thumb
 4104              		.thumb_func
 4105              		.fpu fpv5-d16
 4107              	UART_AdvFeatureConfig:
 4108              	.LFB186:
3052:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check whether the set of advanced features to configure is properly set */
 4109              		.loc 1 3052 0
 4110              		.cfi_startproc
 4111              		@ args = 0, pretend = 0, frame = 0
 4112              		@ frame_needed = 0, uses_anonymous_args = 0
 4113              		@ link register save eliminated.
 4114              	.LVL393:
ARM GAS  /tmp/ccwHIqYH.s 			page 153


3057:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4115              		.loc 1 3057 0
 4116 0000 436A     		ldr	r3, [r0, #36]
 4117 0002 13F0010F 		tst	r3, #1
 4118 0006 06D0     		beq	.L354
3060:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4119              		.loc 1 3060 0
 4120 0008 0268     		ldr	r2, [r0]
 4121 000a 5368     		ldr	r3, [r2, #4]
 4122 000c 23F40033 		bic	r3, r3, #131072
 4123 0010 816A     		ldr	r1, [r0, #40]
 4124 0012 0B43     		orrs	r3, r3, r1
 4125 0014 5360     		str	r3, [r2, #4]
 4126              	.L354:
3064:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4127              		.loc 1 3064 0
 4128 0016 436A     		ldr	r3, [r0, #36]
 4129 0018 13F0020F 		tst	r3, #2
 4130 001c 06D0     		beq	.L355
3067:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4131              		.loc 1 3067 0
 4132 001e 0268     		ldr	r2, [r0]
 4133 0020 5368     		ldr	r3, [r2, #4]
 4134 0022 23F48033 		bic	r3, r3, #65536
 4135 0026 C16A     		ldr	r1, [r0, #44]
 4136 0028 0B43     		orrs	r3, r3, r1
 4137 002a 5360     		str	r3, [r2, #4]
 4138              	.L355:
3071:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4139              		.loc 1 3071 0
 4140 002c 436A     		ldr	r3, [r0, #36]
 4141 002e 13F0040F 		tst	r3, #4
 4142 0032 06D0     		beq	.L356
3074:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4143              		.loc 1 3074 0
 4144 0034 0268     		ldr	r2, [r0]
 4145 0036 5368     		ldr	r3, [r2, #4]
 4146 0038 23F48023 		bic	r3, r3, #262144
 4147 003c 016B     		ldr	r1, [r0, #48]
 4148 003e 0B43     		orrs	r3, r3, r1
 4149 0040 5360     		str	r3, [r2, #4]
 4150              	.L356:
3078:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4151              		.loc 1 3078 0
 4152 0042 436A     		ldr	r3, [r0, #36]
 4153 0044 13F0080F 		tst	r3, #8
 4154 0048 06D0     		beq	.L357
3081:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4155              		.loc 1 3081 0
 4156 004a 0268     		ldr	r2, [r0]
 4157 004c 5368     		ldr	r3, [r2, #4]
 4158 004e 23F40043 		bic	r3, r3, #32768
 4159 0052 416B     		ldr	r1, [r0, #52]
 4160 0054 0B43     		orrs	r3, r3, r1
 4161 0056 5360     		str	r3, [r2, #4]
 4162              	.L357:
3085:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
ARM GAS  /tmp/ccwHIqYH.s 			page 154


 4163              		.loc 1 3085 0
 4164 0058 436A     		ldr	r3, [r0, #36]
 4165 005a 13F0100F 		tst	r3, #16
 4166 005e 06D0     		beq	.L358
3088:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4167              		.loc 1 3088 0
 4168 0060 0268     		ldr	r2, [r0]
 4169 0062 9368     		ldr	r3, [r2, #8]
 4170 0064 23F48053 		bic	r3, r3, #4096
 4171 0068 816B     		ldr	r1, [r0, #56]
 4172 006a 0B43     		orrs	r3, r3, r1
 4173 006c 9360     		str	r3, [r2, #8]
 4174              	.L358:
3092:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4175              		.loc 1 3092 0
 4176 006e 436A     		ldr	r3, [r0, #36]
 4177 0070 13F0200F 		tst	r3, #32
 4178 0074 06D0     		beq	.L359
3095:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4179              		.loc 1 3095 0
 4180 0076 0268     		ldr	r2, [r0]
 4181 0078 9368     		ldr	r3, [r2, #8]
 4182 007a 23F40053 		bic	r3, r3, #8192
 4183 007e C16B     		ldr	r1, [r0, #60]
 4184 0080 0B43     		orrs	r3, r3, r1
 4185 0082 9360     		str	r3, [r2, #8]
 4186              	.L359:
3099:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4187              		.loc 1 3099 0
 4188 0084 436A     		ldr	r3, [r0, #36]
 4189 0086 13F0400F 		tst	r3, #64
 4190 008a 0AD0     		beq	.L360
3103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* set auto Baudrate detection parameters if detection is enabled */
 4191              		.loc 1 3103 0
 4192 008c 0268     		ldr	r2, [r0]
 4193 008e 5368     		ldr	r3, [r2, #4]
 4194 0090 23F48013 		bic	r3, r3, #1048576
 4195 0094 016C     		ldr	r1, [r0, #64]
 4196 0096 0B43     		orrs	r3, r3, r1
 4197 0098 5360     		str	r3, [r2, #4]
3105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4198              		.loc 1 3105 0
 4199 009a 036C     		ldr	r3, [r0, #64]
 4200 009c B3F5801F 		cmp	r3, #1048576
 4201 00a0 0BD0     		beq	.L362
 4202              	.L360:
3113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4203              		.loc 1 3113 0
 4204 00a2 436A     		ldr	r3, [r0, #36]
 4205 00a4 13F0800F 		tst	r3, #128
 4206 00a8 06D0     		beq	.L353
3116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4207              		.loc 1 3116 0
 4208 00aa 0268     		ldr	r2, [r0]
 4209 00ac 5368     		ldr	r3, [r2, #4]
 4210 00ae 23F40023 		bic	r3, r3, #524288
 4211 00b2 816C     		ldr	r1, [r0, #72]
ARM GAS  /tmp/ccwHIqYH.s 			page 155


 4212 00b4 0B43     		orrs	r3, r3, r1
 4213 00b6 5360     		str	r3, [r2, #4]
 4214              	.L353:
 4215 00b8 7047     		bx	lr
 4216              	.L362:
3108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4217              		.loc 1 3108 0
 4218 00ba 0268     		ldr	r2, [r0]
 4219 00bc 5368     		ldr	r3, [r2, #4]
 4220 00be 23F4C003 		bic	r3, r3, #6291456
 4221 00c2 416C     		ldr	r1, [r0, #68]
 4222 00c4 0B43     		orrs	r3, r3, r1
 4223 00c6 5360     		str	r3, [r2, #4]
 4224 00c8 EBE7     		b	.L360
 4225              		.cfi_endproc
 4226              	.LFE186:
 4228              		.section	.text.UART_WaitOnFlagUntilTimeout,"ax",%progbits
 4229              		.align	1
 4230              		.global	UART_WaitOnFlagUntilTimeout
 4231              		.syntax unified
 4232              		.thumb
 4233              		.thumb_func
 4234              		.fpu fpv5-d16
 4236              	UART_WaitOnFlagUntilTimeout:
 4237              	.LFB188:
3180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Wait until flag is set */
 4238              		.loc 1 3180 0
 4239              		.cfi_startproc
 4240              		@ args = 4, pretend = 0, frame = 0
 4241              		@ frame_needed = 0, uses_anonymous_args = 0
 4242              	.LVL394:
 4243 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 4244              	.LCFI31:
 4245              		.cfi_def_cfa_offset 24
 4246              		.cfi_offset 4, -24
 4247              		.cfi_offset 5, -20
 4248              		.cfi_offset 6, -16
 4249              		.cfi_offset 7, -12
 4250              		.cfi_offset 8, -8
 4251              		.cfi_offset 14, -4
 4252 0004 0446     		mov	r4, r0
 4253 0006 0F46     		mov	r7, r1
 4254 0008 1646     		mov	r6, r2
 4255 000a 9846     		mov	r8, r3
 4256 000c 069D     		ldr	r5, [sp, #24]
 4257              	.LVL395:
 4258              	.L365:
3182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4259              		.loc 1 3182 0
 4260 000e 2368     		ldr	r3, [r4]
 4261 0010 DB69     		ldr	r3, [r3, #28]
 4262 0012 37EA0303 		bics	r3, r7, r3
 4263 0016 0CBF     		ite	eq
 4264 0018 0123     		moveq	r3, #1
 4265 001a 0023     		movne	r3, #0
 4266 001c B342     		cmp	r3, r6
 4267 001e 3DD1     		bne	.L371
ARM GAS  /tmp/ccwHIqYH.s 			page 156


3185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4268              		.loc 1 3185 0
 4269 0020 B5F1FF3F 		cmp	r5, #-1
 4270 0024 F3D0     		beq	.L365
3187:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 4271              		.loc 1 3187 0
 4272 0026 FFF7FEFF 		bl	HAL_GetTick
 4273              	.LVL396:
 4274 002a A0EB0800 		sub	r0, r0, r8
 4275 002e 8542     		cmp	r5, r0
 4276 0030 21D3     		bcc	.L366
3187:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 4277              		.loc 1 3187 0 is_stmt 0 discriminator 1
 4278 0032 05B3     		cbz	r5, .L366
3202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 4279              		.loc 1 3202 0 is_stmt 1
 4280 0034 2368     		ldr	r3, [r4]
 4281 0036 1A68     		ldr	r2, [r3]
 4282 0038 12F0040F 		tst	r2, #4
 4283 003c E7D0     		beq	.L365
3204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
 4284              		.loc 1 3204 0
 4285 003e DA69     		ldr	r2, [r3, #28]
 4286 0040 12F4006F 		tst	r2, #2048
 4287 0044 E3D0     		beq	.L365
3207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4288              		.loc 1 3207 0
 4289 0046 4FF40062 		mov	r2, #2048
 4290 004a 1A62     		str	r2, [r3, #32]
3211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 4291              		.loc 1 3211 0
 4292 004c 2268     		ldr	r2, [r4]
 4293 004e 1368     		ldr	r3, [r2]
 4294 0050 23F4D073 		bic	r3, r3, #416
 4295 0054 1360     		str	r3, [r2]
3212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4296              		.loc 1 3212 0
 4297 0056 2268     		ldr	r2, [r4]
 4298 0058 9368     		ldr	r3, [r2, #8]
 4299 005a 23F00103 		bic	r3, r3, #1
 4300 005e 9360     		str	r3, [r2, #8]
3214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
 4301              		.loc 1 3214 0
 4302 0060 2023     		movs	r3, #32
 4303 0062 A367     		str	r3, [r4, #120]
3215:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_RTO;
 4304              		.loc 1 3215 0
 4305 0064 E367     		str	r3, [r4, #124]
3216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4306              		.loc 1 3216 0
 4307 0066 C4F88030 		str	r3, [r4, #128]
3219:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4308              		.loc 1 3219 0
 4309 006a 0023     		movs	r3, #0
 4310 006c 84F87430 		strb	r3, [r4, #116]
3221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
 4311              		.loc 1 3221 0
ARM GAS  /tmp/ccwHIqYH.s 			page 157


 4312 0070 0320     		movs	r0, #3
 4313 0072 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4314              	.LVL397:
 4315              	.L366:
3191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 4316              		.loc 1 3191 0
 4317 0076 2268     		ldr	r2, [r4]
 4318 0078 1368     		ldr	r3, [r2]
 4319 007a 23F4D073 		bic	r3, r3, #416
 4320 007e 1360     		str	r3, [r2]
3192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4321              		.loc 1 3192 0
 4322 0080 2268     		ldr	r2, [r4]
 4323 0082 9368     		ldr	r3, [r2, #8]
 4324 0084 23F00103 		bic	r3, r3, #1
 4325 0088 9360     		str	r3, [r2, #8]
3194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
 4326              		.loc 1 3194 0
 4327 008a 2023     		movs	r3, #32
 4328 008c A367     		str	r3, [r4, #120]
3195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4329              		.loc 1 3195 0
 4330 008e E367     		str	r3, [r4, #124]
3197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4331              		.loc 1 3197 0
 4332 0090 0023     		movs	r3, #0
 4333 0092 84F87430 		strb	r3, [r4, #116]
3199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 4334              		.loc 1 3199 0
 4335 0096 0320     		movs	r0, #3
 4336 0098 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4337              	.LVL398:
 4338              	.L371:
3226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 4339              		.loc 1 3226 0
 4340 009c 0020     		movs	r0, #0
3227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4341              		.loc 1 3227 0
 4342 009e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4343              		.cfi_endproc
 4344              	.LFE188:
 4346              		.section	.text.HAL_UART_Transmit,"ax",%progbits
 4347              		.align	1
 4348              		.global	HAL_UART_Transmit
 4349              		.syntax unified
 4350              		.thumb
 4351              		.thumb_func
 4352              		.fpu fpv5-d16
 4354              	HAL_UART_Transmit:
 4355              	.LFB148:
1094:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint8_t  *pdata8bits;
 4356              		.loc 1 1094 0
 4357              		.cfi_startproc
 4358              		@ args = 0, pretend = 0, frame = 0
 4359              		@ frame_needed = 0, uses_anonymous_args = 0
 4360              	.LVL399:
 4361 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
ARM GAS  /tmp/ccwHIqYH.s 			page 158


 4362              	.LCFI32:
 4363              		.cfi_def_cfa_offset 24
 4364              		.cfi_offset 4, -24
 4365              		.cfi_offset 5, -20
 4366              		.cfi_offset 6, -16
 4367              		.cfi_offset 7, -12
 4368              		.cfi_offset 8, -8
 4369              		.cfi_offset 14, -4
 4370 0004 82B0     		sub	sp, sp, #8
 4371              	.LCFI33:
 4372              		.cfi_def_cfa_offset 32
 4373 0006 1E46     		mov	r6, r3
1100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4374              		.loc 1 1100 0
 4375 0008 836F     		ldr	r3, [r0, #120]
 4376              	.LVL400:
 4377 000a 202B     		cmp	r3, #32
 4378 000c 04D0     		beq	.L387
1163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4379              		.loc 1 1163 0
 4380 000e 0223     		movs	r3, #2
 4381              	.LVL401:
 4382              	.L373:
1165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4383              		.loc 1 1165 0
 4384 0010 1846     		mov	r0, r3
 4385 0012 02B0     		add	sp, sp, #8
 4386              	.LCFI34:
 4387              		.cfi_remember_state
 4388              		.cfi_def_cfa_offset 24
 4389              		@ sp needed
 4390 0014 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4391              	.LVL402:
 4392              	.L387:
 4393              	.LCFI35:
 4394              		.cfi_restore_state
 4395 0018 0446     		mov	r4, r0
 4396 001a 0D46     		mov	r5, r1
 4397 001c 9046     		mov	r8, r2
1102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4398              		.loc 1 1102 0
 4399 001e 002A     		cmp	r2, #0
 4400 0020 18BF     		it	ne
 4401 0022 0029     		cmpne	r1, #0
 4402 0024 54D0     		beq	.L380
1107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4403              		.loc 1 1107 0
 4404 0026 90F87430 		ldrb	r3, [r0, #116]	@ zero_extendqisi2
 4405 002a 012B     		cmp	r3, #1
 4406 002c 01D1     		bne	.L388
 4407 002e 0223     		movs	r3, #2
 4408 0030 EEE7     		b	.L373
 4409              	.L388:
1107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4410              		.loc 1 1107 0 is_stmt 0 discriminator 2
 4411 0032 0123     		movs	r3, #1
 4412 0034 80F87430 		strb	r3, [r0, #116]
ARM GAS  /tmp/ccwHIqYH.s 			page 159


1109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 4413              		.loc 1 1109 0 is_stmt 1 discriminator 2
 4414 0038 0023     		movs	r3, #0
 4415 003a C0F88030 		str	r3, [r0, #128]
1110:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4416              		.loc 1 1110 0 discriminator 2
 4417 003e 2123     		movs	r3, #33
 4418 0040 8367     		str	r3, [r0, #120]
1113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4419              		.loc 1 1113 0 discriminator 2
 4420 0042 FFF7FEFF 		bl	HAL_GetTick
 4421              	.LVL403:
 4422 0046 0746     		mov	r7, r0
 4423              	.LVL404:
1115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = Size;
 4424              		.loc 1 1115 0 discriminator 2
 4425 0048 A4F85080 		strh	r8, [r4, #80]	@ movhi
1116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4426              		.loc 1 1116 0 discriminator 2
 4427 004c A4F85280 		strh	r8, [r4, #82]	@ movhi
1119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4428              		.loc 1 1119 0 discriminator 2
 4429 0050 A368     		ldr	r3, [r4, #8]
 4430 0052 B3F5805F 		cmp	r3, #4096
 4431 0056 05D0     		beq	.L389
1127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4432              		.loc 1 1127 0
 4433 0058 4FF00008 		mov	r8, #0
 4434              	.LVL405:
 4435              	.L374:
1130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4436              		.loc 1 1130 0
 4437 005c 0023     		movs	r3, #0
 4438 005e 84F87430 		strb	r3, [r4, #116]
1132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4439              		.loc 1 1132 0
 4440 0062 14E0     		b	.L375
 4441              	.LVL406:
 4442              	.L389:
1119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4443              		.loc 1 1119 0 discriminator 1
 4444 0064 2369     		ldr	r3, [r4, #16]
 4445 0066 13B1     		cbz	r3, .L383
1127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4446              		.loc 1 1127 0
 4447 0068 4FF00008 		mov	r8, #0
 4448 006c F6E7     		b	.L374
 4449              	.L383:
1122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4450              		.loc 1 1122 0
 4451 006e A846     		mov	r8, r5
1121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
 4452              		.loc 1 1121 0
 4453 0070 0025     		movs	r5, #0
 4454              	.LVL407:
 4455 0072 F3E7     		b	.L374
 4456              	.LVL408:
ARM GAS  /tmp/ccwHIqYH.s 			page 160


 4457              	.L391:
1140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pdata16bits++;
 4458              		.loc 1 1140 0
 4459 0074 2268     		ldr	r2, [r4]
 4460 0076 38F8023B 		ldrh	r3, [r8], #2
 4461              	.LVL409:
 4462 007a C3F30803 		ubfx	r3, r3, #0, #9
 4463 007e 9362     		str	r3, [r2, #40]
 4464              	.LVL410:
 4465              	.L377:
1148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4466              		.loc 1 1148 0
 4467 0080 B4F85230 		ldrh	r3, [r4, #82]
 4468 0084 9BB2     		uxth	r3, r3
 4469 0086 013B     		subs	r3, r3, #1
 4470 0088 9BB2     		uxth	r3, r3
 4471 008a A4F85230 		strh	r3, [r4, #82]	@ movhi
 4472              	.L375:
1132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4473              		.loc 1 1132 0
 4474 008e B4F85230 		ldrh	r3, [r4, #82]
 4475 0092 9BB2     		uxth	r3, r3
 4476 0094 73B1     		cbz	r3, .L390
1134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 4477              		.loc 1 1134 0
 4478 0096 0096     		str	r6, [sp]
 4479 0098 3B46     		mov	r3, r7
 4480 009a 0022     		movs	r2, #0
 4481 009c 8021     		movs	r1, #128
 4482 009e 2046     		mov	r0, r4
 4483 00a0 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 4484              	.LVL411:
 4485 00a4 B0B9     		cbnz	r0, .L384
1138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 4486              		.loc 1 1138 0
 4487 00a6 002D     		cmp	r5, #0
 4488 00a8 E4D0     		beq	.L391
1145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pdata8bits++;
 4489              		.loc 1 1145 0
 4490 00aa 2368     		ldr	r3, [r4]
 4491 00ac 15F8012B 		ldrb	r2, [r5], #1	@ zero_extendqisi2
 4492              	.LVL412:
 4493 00b0 9A62     		str	r2, [r3, #40]
 4494              	.LVL413:
 4495 00b2 E5E7     		b	.L377
 4496              	.L390:
1151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4497              		.loc 1 1151 0
 4498 00b4 0096     		str	r6, [sp]
 4499 00b6 3B46     		mov	r3, r7
 4500 00b8 0022     		movs	r2, #0
 4501 00ba 4021     		movs	r1, #64
 4502 00bc 2046     		mov	r0, r4
 4503 00be FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 4504              	.LVL414:
 4505 00c2 0346     		mov	r3, r0
 4506 00c4 08B1     		cbz	r0, .L392
ARM GAS  /tmp/ccwHIqYH.s 			page 161


1153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4507              		.loc 1 1153 0
 4508 00c6 0323     		movs	r3, #3
 4509 00c8 A2E7     		b	.L373
 4510              	.L392:
1157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4511              		.loc 1 1157 0
 4512 00ca 2022     		movs	r2, #32
 4513 00cc A267     		str	r2, [r4, #120]
1159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4514              		.loc 1 1159 0
 4515 00ce 9FE7     		b	.L373
 4516              	.LVL415:
 4517              	.L380:
1104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4518              		.loc 1 1104 0
 4519 00d0 0123     		movs	r3, #1
 4520 00d2 9DE7     		b	.L373
 4521              	.LVL416:
 4522              	.L384:
1136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 4523              		.loc 1 1136 0
 4524 00d4 0323     		movs	r3, #3
 4525 00d6 9BE7     		b	.L373
 4526              		.cfi_endproc
 4527              	.LFE148:
 4529              		.section	.text.HAL_UART_Receive,"ax",%progbits
 4530              		.align	1
 4531              		.global	HAL_UART_Receive
 4532              		.syntax unified
 4533              		.thumb
 4534              		.thumb_func
 4535              		.fpu fpv5-d16
 4537              	HAL_UART_Receive:
 4538              	.LFB149:
1179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint8_t  *pdata8bits;
 4539              		.loc 1 1179 0
 4540              		.cfi_startproc
 4541              		@ args = 0, pretend = 0, frame = 0
 4542              		@ frame_needed = 0, uses_anonymous_args = 0
 4543              	.LVL417:
 4544 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 4545              	.LCFI36:
 4546              		.cfi_def_cfa_offset 28
 4547              		.cfi_offset 4, -28
 4548              		.cfi_offset 5, -24
 4549              		.cfi_offset 6, -20
 4550              		.cfi_offset 7, -16
 4551              		.cfi_offset 8, -12
 4552              		.cfi_offset 9, -8
 4553              		.cfi_offset 14, -4
 4554 0004 83B0     		sub	sp, sp, #12
 4555              	.LCFI37:
 4556              		.cfi_def_cfa_offset 40
 4557 0006 1E46     		mov	r6, r3
1186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4558              		.loc 1 1186 0
ARM GAS  /tmp/ccwHIqYH.s 			page 162


 4559 0008 C36F     		ldr	r3, [r0, #124]
 4560              	.LVL418:
 4561 000a 202B     		cmp	r3, #32
 4562 000c 03D0     		beq	.L414
1250:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4563              		.loc 1 1250 0
 4564 000e 0220     		movs	r0, #2
 4565              	.LVL419:
 4566              	.L394:
1252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4567              		.loc 1 1252 0
 4568 0010 03B0     		add	sp, sp, #12
 4569              	.LCFI38:
 4570              		.cfi_remember_state
 4571              		.cfi_def_cfa_offset 28
 4572              		@ sp needed
 4573 0012 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4574              	.LVL420:
 4575              	.L414:
 4576              	.LCFI39:
 4577              		.cfi_restore_state
 4578 0016 0446     		mov	r4, r0
 4579 0018 0D46     		mov	r5, r1
 4580 001a 9046     		mov	r8, r2
1188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4581              		.loc 1 1188 0
 4582 001c 002A     		cmp	r2, #0
 4583 001e 18BF     		it	ne
 4584 0020 0029     		cmpne	r1, #0
 4585 0022 79D0     		beq	.L408
1193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4586              		.loc 1 1193 0
 4587 0024 90F87430 		ldrb	r3, [r0, #116]	@ zero_extendqisi2
 4588 0028 012B     		cmp	r3, #1
 4589 002a 01D1     		bne	.L415
 4590 002c 0220     		movs	r0, #2
 4591              	.LVL421:
 4592 002e EFE7     		b	.L394
 4593              	.LVL422:
 4594              	.L415:
1193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4595              		.loc 1 1193 0 is_stmt 0 discriminator 2
 4596 0030 0123     		movs	r3, #1
 4597 0032 80F87430 		strb	r3, [r0, #116]
1195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 4598              		.loc 1 1195 0 is_stmt 1 discriminator 2
 4599 0036 0023     		movs	r3, #0
 4600 0038 C0F88030 		str	r3, [r0, #128]
1196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 4601              		.loc 1 1196 0 discriminator 2
 4602 003c 2222     		movs	r2, #34
 4603              	.LVL423:
 4604 003e C267     		str	r2, [r0, #124]
1197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4605              		.loc 1 1197 0 discriminator 2
 4606 0040 0366     		str	r3, [r0, #96]
1200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccwHIqYH.s 			page 163


 4607              		.loc 1 1200 0 discriminator 2
 4608 0042 FFF7FEFF 		bl	HAL_GetTick
 4609              	.LVL424:
 4610 0046 0746     		mov	r7, r0
 4611              	.LVL425:
1202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount = Size;
 4612              		.loc 1 1202 0 discriminator 2
 4613 0048 A4F85880 		strh	r8, [r4, #88]	@ movhi
1203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4614              		.loc 1 1203 0 discriminator 2
 4615 004c A4F85A80 		strh	r8, [r4, #90]	@ movhi
1206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4616              		.loc 1 1206 0 discriminator 2
 4617 0050 A368     		ldr	r3, [r4, #8]
 4618 0052 B3F5805F 		cmp	r3, #4096
 4619 0056 06D0     		beq	.L416
 4620 0058 A3B9     		cbnz	r3, .L398
1206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4621              		.loc 1 1206 0 is_stmt 0 discriminator 5
 4622 005a 2269     		ldr	r2, [r4, #16]
 4623 005c 72B9     		cbnz	r2, .L399
1206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4624              		.loc 1 1206 0 discriminator 7
 4625 005e FF22     		movs	r2, #255
 4626 0060 A4F85C20 		strh	r2, [r4, #92]	@ movhi
 4627 0064 14E0     		b	.L397
 4628              	.L416:
1206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4629              		.loc 1 1206 0 discriminator 1
 4630 0066 2269     		ldr	r2, [r4, #16]
 4631 0068 22B9     		cbnz	r2, .L396
1206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4632              		.loc 1 1206 0 discriminator 3
 4633 006a 40F2FF12 		movw	r2, #511
 4634 006e A4F85C20 		strh	r2, [r4, #92]	@ movhi
 4635 0072 0DE0     		b	.L397
 4636              	.L396:
1206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4637              		.loc 1 1206 0 discriminator 4
 4638 0074 FF22     		movs	r2, #255
 4639 0076 A4F85C20 		strh	r2, [r4, #92]	@ movhi
 4640 007a 09E0     		b	.L397
 4641              	.L399:
1206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4642              		.loc 1 1206 0 discriminator 8
 4643 007c 7F22     		movs	r2, #127
 4644 007e A4F85C20 		strh	r2, [r4, #92]	@ movhi
 4645 0082 05E0     		b	.L397
 4646              	.L398:
1206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4647              		.loc 1 1206 0 discriminator 6
 4648 0084 B3F1805F 		cmp	r3, #268435456
 4649 0088 0DD0     		beq	.L417
1206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4650              		.loc 1 1206 0 discriminator 10
 4651 008a 0022     		movs	r2, #0
 4652 008c A4F85C20 		strh	r2, [r4, #92]	@ movhi
ARM GAS  /tmp/ccwHIqYH.s 			page 164


 4653              	.L397:
1207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4654              		.loc 1 1207 0 is_stmt 1
 4655 0090 B4F85C80 		ldrh	r8, [r4, #92]
 4656              	.LVL426:
1210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4657              		.loc 1 1210 0
 4658 0094 B3F5805F 		cmp	r3, #4096
 4659 0098 0FD0     		beq	.L418
1218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4660              		.loc 1 1218 0
 4661 009a 4FF00009 		mov	r9, #0
 4662              	.LVL427:
 4663              	.L402:
1221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4664              		.loc 1 1221 0
 4665 009e 0023     		movs	r3, #0
 4666 00a0 84F87430 		strb	r3, [r4, #116]
1224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4667              		.loc 1 1224 0
 4668 00a4 1EE0     		b	.L403
 4669              	.LVL428:
 4670              	.L417:
1206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4671              		.loc 1 1206 0 discriminator 9
 4672 00a6 2269     		ldr	r2, [r4, #16]
 4673 00a8 1AB9     		cbnz	r2, .L401
1206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4674              		.loc 1 1206 0 is_stmt 0 discriminator 11
 4675 00aa 7F22     		movs	r2, #127
 4676 00ac A4F85C20 		strh	r2, [r4, #92]	@ movhi
 4677 00b0 EEE7     		b	.L397
 4678              	.L401:
1206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4679              		.loc 1 1206 0 discriminator 12
 4680 00b2 3F22     		movs	r2, #63
 4681 00b4 A4F85C20 		strh	r2, [r4, #92]	@ movhi
 4682 00b8 EAE7     		b	.L397
 4683              	.LVL429:
 4684              	.L418:
1210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4685              		.loc 1 1210 0 is_stmt 1 discriminator 1
 4686 00ba 2369     		ldr	r3, [r4, #16]
 4687 00bc 13B1     		cbz	r3, .L411
1218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4688              		.loc 1 1218 0
 4689 00be 4FF00009 		mov	r9, #0
 4690 00c2 ECE7     		b	.L402
 4691              	.L411:
1213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4692              		.loc 1 1213 0
 4693 00c4 A946     		mov	r9, r5
1212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
 4694              		.loc 1 1212 0
 4695 00c6 0025     		movs	r5, #0
 4696              	.LVL430:
 4697 00c8 E9E7     		b	.L402
ARM GAS  /tmp/ccwHIqYH.s 			page 165


 4698              	.LVL431:
 4699              	.L420:
1232:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pdata16bits++;
 4700              		.loc 1 1232 0
 4701 00ca 2368     		ldr	r3, [r4]
 4702 00cc 5B6A     		ldr	r3, [r3, #36]
 4703 00ce 08EA0303 		and	r3, r8, r3
 4704 00d2 29F8023B 		strh	r3, [r9], #2	@ movhi
 4705              	.LVL432:
 4706              	.L405:
1240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4707              		.loc 1 1240 0
 4708 00d6 B4F85A30 		ldrh	r3, [r4, #90]
 4709 00da 9BB2     		uxth	r3, r3
 4710 00dc 013B     		subs	r3, r3, #1
 4711 00de 9BB2     		uxth	r3, r3
 4712 00e0 A4F85A30 		strh	r3, [r4, #90]	@ movhi
 4713              	.L403:
1224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4714              		.loc 1 1224 0
 4715 00e4 B4F85A30 		ldrh	r3, [r4, #90]
 4716 00e8 9BB2     		uxth	r3, r3
 4717 00ea 8BB1     		cbz	r3, .L419
1226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 4718              		.loc 1 1226 0
 4719 00ec 0096     		str	r6, [sp]
 4720 00ee 3B46     		mov	r3, r7
 4721 00f0 0022     		movs	r2, #0
 4722 00f2 2021     		movs	r1, #32
 4723 00f4 2046     		mov	r0, r4
 4724 00f6 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 4725              	.LVL433:
 4726 00fa 78B9     		cbnz	r0, .L412
1230:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 4727              		.loc 1 1230 0
 4728 00fc 002D     		cmp	r5, #0
 4729 00fe E4D0     		beq	.L420
1237:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pdata8bits++;
 4730              		.loc 1 1237 0
 4731 0100 2368     		ldr	r3, [r4]
 4732 0102 5A6A     		ldr	r2, [r3, #36]
 4733 0104 5FFA88F3 		uxtb	r3, r8
 4734 0108 1340     		ands	r3, r3, r2
 4735 010a 05F8013B 		strb	r3, [r5], #1
 4736              	.LVL434:
 4737 010e E2E7     		b	.L405
 4738              	.L419:
1244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4739              		.loc 1 1244 0
 4740 0110 2023     		movs	r3, #32
 4741 0112 E367     		str	r3, [r4, #124]
1246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4742              		.loc 1 1246 0
 4743 0114 0020     		movs	r0, #0
 4744 0116 7BE7     		b	.L394
 4745              	.LVL435:
 4746              	.L408:
ARM GAS  /tmp/ccwHIqYH.s 			page 166


1190:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4747              		.loc 1 1190 0
 4748 0118 0120     		movs	r0, #1
 4749              	.LVL436:
 4750 011a 79E7     		b	.L394
 4751              	.LVL437:
 4752              	.L412:
1228:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 4753              		.loc 1 1228 0
 4754 011c 0320     		movs	r0, #3
 4755 011e 77E7     		b	.L394
 4756              		.cfi_endproc
 4757              	.LFE149:
 4759              		.section	.text.UART_CheckIdleState,"ax",%progbits
 4760              		.align	1
 4761              		.global	UART_CheckIdleState
 4762              		.syntax unified
 4763              		.thumb
 4764              		.thumb_func
 4765              		.fpu fpv5-d16
 4767              	UART_CheckIdleState:
 4768              	.LFB187:
3126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t tickstart;
 4769              		.loc 1 3126 0
 4770              		.cfi_startproc
 4771              		@ args = 0, pretend = 0, frame = 0
 4772              		@ frame_needed = 0, uses_anonymous_args = 0
 4773              	.LVL438:
 4774 0000 30B5     		push	{r4, r5, lr}
 4775              	.LCFI40:
 4776              		.cfi_def_cfa_offset 12
 4777              		.cfi_offset 4, -12
 4778              		.cfi_offset 5, -8
 4779              		.cfi_offset 14, -4
 4780 0002 83B0     		sub	sp, sp, #12
 4781              	.LCFI41:
 4782              		.cfi_def_cfa_offset 24
 4783 0004 0446     		mov	r4, r0
3130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4784              		.loc 1 3130 0
 4785 0006 0023     		movs	r3, #0
 4786 0008 C0F88030 		str	r3, [r0, #128]
3133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4787              		.loc 1 3133 0
 4788 000c FFF7FEFF 		bl	HAL_GetTick
 4789              	.LVL439:
 4790 0010 0546     		mov	r5, r0
 4791              	.LVL440:
3136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4792              		.loc 1 3136 0
 4793 0012 2368     		ldr	r3, [r4]
 4794 0014 1B68     		ldr	r3, [r3]
 4795 0016 13F0080F 		tst	r3, #8
 4796 001a 0DD1     		bne	.L428
 4797              	.LVL441:
 4798              	.L422:
3148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
ARM GAS  /tmp/ccwHIqYH.s 			page 167


 4799              		.loc 1 3148 0
 4800 001c 2368     		ldr	r3, [r4]
 4801 001e 1B68     		ldr	r3, [r3]
 4802 0020 13F0040F 		tst	r3, #4
 4803 0024 16D1     		bne	.L429
 4804              	.L424:
3160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 4805              		.loc 1 3160 0
 4806 0026 2023     		movs	r3, #32
 4807 0028 A367     		str	r3, [r4, #120]
3161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 4808              		.loc 1 3161 0
 4809 002a E367     		str	r3, [r4, #124]
3162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4810              		.loc 1 3162 0
 4811 002c 0020     		movs	r0, #0
 4812 002e 2066     		str	r0, [r4, #96]
3164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4813              		.loc 1 3164 0
 4814 0030 84F87400 		strb	r0, [r4, #116]
 4815              	.L423:
3167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4816              		.loc 1 3167 0
 4817 0034 03B0     		add	sp, sp, #12
 4818              	.LCFI42:
 4819              		.cfi_remember_state
 4820              		.cfi_def_cfa_offset 12
 4821              		@ sp needed
 4822 0036 30BD     		pop	{r4, r5, pc}
 4823              	.LVL442:
 4824              	.L428:
 4825              	.LCFI43:
 4826              		.cfi_restore_state
3139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4827              		.loc 1 3139 0
 4828 0038 6FF07E43 		mvn	r3, #-33554432
 4829 003c 0093     		str	r3, [sp]
 4830 003e 0346     		mov	r3, r0
 4831 0040 0022     		movs	r2, #0
 4832 0042 4FF40011 		mov	r1, #2097152
 4833 0046 2046     		mov	r0, r4
 4834              	.LVL443:
 4835 0048 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 4836              	.LVL444:
 4837 004c 0028     		cmp	r0, #0
 4838 004e E5D0     		beq	.L422
3142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4839              		.loc 1 3142 0
 4840 0050 0320     		movs	r0, #3
 4841 0052 EFE7     		b	.L423
 4842              	.L429:
3151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4843              		.loc 1 3151 0
 4844 0054 6FF07E43 		mvn	r3, #-33554432
 4845 0058 0093     		str	r3, [sp]
 4846 005a 2B46     		mov	r3, r5
 4847 005c 0022     		movs	r2, #0
ARM GAS  /tmp/ccwHIqYH.s 			page 168


 4848 005e 4FF48001 		mov	r1, #4194304
 4849 0062 2046     		mov	r0, r4
 4850 0064 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 4851              	.LVL445:
 4852 0068 0028     		cmp	r0, #0
 4853 006a DCD0     		beq	.L424
3154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4854              		.loc 1 3154 0
 4855 006c 0320     		movs	r0, #3
 4856 006e E1E7     		b	.L423
 4857              		.cfi_endproc
 4858              	.LFE187:
 4860              		.section	.text.HAL_UART_Init,"ax",%progbits
 4861              		.align	1
 4862              		.global	HAL_UART_Init
 4863              		.syntax unified
 4864              		.thumb
 4865              		.thumb_func
 4866              		.fpu fpv5-d16
 4868              	HAL_UART_Init:
 4869              	.LFB141:
 290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 4870              		.loc 1 290 0
 4871              		.cfi_startproc
 4872              		@ args = 0, pretend = 0, frame = 0
 4873              		@ frame_needed = 0, uses_anonymous_args = 0
 4874              	.LVL446:
 292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4875              		.loc 1 292 0
 4876 0000 68B3     		cbz	r0, .L434
 290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 4877              		.loc 1 290 0
 4878 0002 10B5     		push	{r4, lr}
 4879              	.LCFI44:
 4880              		.cfi_def_cfa_offset 8
 4881              		.cfi_offset 4, -8
 4882              		.cfi_offset 14, -4
 4883 0004 0446     		mov	r4, r0
 308:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4884              		.loc 1 308 0
 4885 0006 836F     		ldr	r3, [r0, #120]
 4886 0008 03B3     		cbz	r3, .L439
 4887              	.LVL447:
 4888              	.L432:
 329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4889              		.loc 1 329 0
 4890 000a 2423     		movs	r3, #36
 4891 000c A367     		str	r3, [r4, #120]
 331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4892              		.loc 1 331 0
 4893 000e 2268     		ldr	r2, [r4]
 4894 0010 1368     		ldr	r3, [r2]
 4895 0012 23F00103 		bic	r3, r3, #1
 4896 0016 1360     		str	r3, [r2]
 334:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4897              		.loc 1 334 0
 4898 0018 2046     		mov	r0, r4
ARM GAS  /tmp/ccwHIqYH.s 			page 169


 4899 001a FFF7FEFF 		bl	UART_SetConfig
 4900              	.LVL448:
 4901 001e 0128     		cmp	r0, #1
 4902 0020 1FD0     		beq	.L431
 339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4903              		.loc 1 339 0
 4904 0022 636A     		ldr	r3, [r4, #36]
 4905 0024 BBB9     		cbnz	r3, .L440
 4906              	.L433:
 347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 4907              		.loc 1 347 0
 4908 0026 2268     		ldr	r2, [r4]
 4909 0028 5368     		ldr	r3, [r2, #4]
 4910 002a 23F49043 		bic	r3, r3, #18432
 4911 002e 5360     		str	r3, [r2, #4]
 348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4912              		.loc 1 348 0
 4913 0030 2268     		ldr	r2, [r4]
 4914 0032 9368     		ldr	r3, [r2, #8]
 4915 0034 23F02A03 		bic	r3, r3, #42
 4916 0038 9360     		str	r3, [r2, #8]
 350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4917              		.loc 1 350 0
 4918 003a 2268     		ldr	r2, [r4]
 4919 003c 1368     		ldr	r3, [r2]
 4920 003e 43F00103 		orr	r3, r3, #1
 4921 0042 1360     		str	r3, [r2]
 353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 4922              		.loc 1 353 0
 4923 0044 2046     		mov	r0, r4
 4924 0046 FFF7FEFF 		bl	UART_CheckIdleState
 4925              	.LVL449:
 4926 004a 10BD     		pop	{r4, pc}
 4927              	.LVL450:
 4928              	.L439:
 311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4929              		.loc 1 311 0
 4930 004c 80F87430 		strb	r3, [r0, #116]
 325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 4931              		.loc 1 325 0
 4932 0050 FFF7FEFF 		bl	HAL_UART_MspInit
 4933              	.LVL451:
 4934 0054 D9E7     		b	.L432
 4935              	.L440:
 341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4936              		.loc 1 341 0
 4937 0056 2046     		mov	r0, r4
 4938 0058 FFF7FEFF 		bl	UART_AdvFeatureConfig
 4939              	.LVL452:
 4940 005c E3E7     		b	.L433
 4941              	.LVL453:
 4942              	.L434:
 4943              	.LCFI45:
 4944              		.cfi_def_cfa_offset 0
 4945              		.cfi_restore 4
 4946              		.cfi_restore 14
 294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
ARM GAS  /tmp/ccwHIqYH.s 			page 170


 4947              		.loc 1 294 0
 4948 005e 0120     		movs	r0, #1
 4949              	.LVL454:
 4950 0060 7047     		bx	lr
 4951              	.LVL455:
 4952              	.L431:
 4953              	.LCFI46:
 4954              		.cfi_def_cfa_offset 8
 4955              		.cfi_offset 4, -8
 4956              		.cfi_offset 14, -4
 354:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4957              		.loc 1 354 0
 4958 0062 10BD     		pop	{r4, pc}
 4959              		.cfi_endproc
 4960              	.LFE141:
 4962              		.section	.text.HAL_HalfDuplex_Init,"ax",%progbits
 4963              		.align	1
 4964              		.global	HAL_HalfDuplex_Init
 4965              		.syntax unified
 4966              		.thumb
 4967              		.thumb_func
 4968              		.fpu fpv5-d16
 4970              	HAL_HalfDuplex_Init:
 4971              	.LFB142:
 363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 4972              		.loc 1 363 0
 4973              		.cfi_startproc
 4974              		@ args = 0, pretend = 0, frame = 0
 4975              		@ frame_needed = 0, uses_anonymous_args = 0
 4976              	.LVL456:
 365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4977              		.loc 1 365 0
 4978 0000 0028     		cmp	r0, #0
 4979 0002 32D0     		beq	.L445
 363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 4980              		.loc 1 363 0
 4981 0004 10B5     		push	{r4, lr}
 4982              	.LCFI47:
 4983              		.cfi_def_cfa_offset 8
 4984              		.cfi_offset 4, -8
 4985              		.cfi_offset 14, -4
 4986 0006 0446     		mov	r4, r0
 373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4987              		.loc 1 373 0
 4988 0008 836F     		ldr	r3, [r0, #120]
 4989 000a 2BB3     		cbz	r3, .L450
 4990              	.LVL457:
 4991              	.L443:
 394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4992              		.loc 1 394 0
 4993 000c 2423     		movs	r3, #36
 4994 000e A367     		str	r3, [r4, #120]
 396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4995              		.loc 1 396 0
 4996 0010 2268     		ldr	r2, [r4]
 4997 0012 1368     		ldr	r3, [r2]
 4998 0014 23F00103 		bic	r3, r3, #1
ARM GAS  /tmp/ccwHIqYH.s 			page 171


 4999 0018 1360     		str	r3, [r2]
 399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5000              		.loc 1 399 0
 5001 001a 2046     		mov	r0, r4
 5002 001c FFF7FEFF 		bl	UART_SetConfig
 5003              	.LVL458:
 5004 0020 0128     		cmp	r0, #1
 5005 0022 24D0     		beq	.L442
 404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5006              		.loc 1 404 0
 5007 0024 636A     		ldr	r3, [r4, #36]
 5008 0026 E3B9     		cbnz	r3, .L451
 5009              	.L444:
 412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 5010              		.loc 1 412 0
 5011 0028 2268     		ldr	r2, [r4]
 5012 002a 5368     		ldr	r3, [r2, #4]
 5013 002c 23F49043 		bic	r3, r3, #18432
 5014 0030 5360     		str	r3, [r2, #4]
 413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5015              		.loc 1 413 0
 5016 0032 2268     		ldr	r2, [r4]
 5017 0034 9368     		ldr	r3, [r2, #8]
 5018 0036 23F02203 		bic	r3, r3, #34
 5019 003a 9360     		str	r3, [r2, #8]
 416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5020              		.loc 1 416 0
 5021 003c 2268     		ldr	r2, [r4]
 5022 003e 9368     		ldr	r3, [r2, #8]
 5023 0040 43F00803 		orr	r3, r3, #8
 5024 0044 9360     		str	r3, [r2, #8]
 418:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5025              		.loc 1 418 0
 5026 0046 2268     		ldr	r2, [r4]
 5027 0048 1368     		ldr	r3, [r2]
 5028 004a 43F00103 		orr	r3, r3, #1
 5029 004e 1360     		str	r3, [r2]
 421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 5030              		.loc 1 421 0
 5031 0050 2046     		mov	r0, r4
 5032 0052 FFF7FEFF 		bl	UART_CheckIdleState
 5033              	.LVL459:
 5034 0056 10BD     		pop	{r4, pc}
 5035              	.LVL460:
 5036              	.L450:
 376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5037              		.loc 1 376 0
 5038 0058 80F87430 		strb	r3, [r0, #116]
 390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 5039              		.loc 1 390 0
 5040 005c FFF7FEFF 		bl	HAL_UART_MspInit
 5041              	.LVL461:
 5042 0060 D4E7     		b	.L443
 5043              	.L451:
 406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 5044              		.loc 1 406 0
 5045 0062 2046     		mov	r0, r4
ARM GAS  /tmp/ccwHIqYH.s 			page 172


 5046 0064 FFF7FEFF 		bl	UART_AdvFeatureConfig
 5047              	.LVL462:
 5048 0068 DEE7     		b	.L444
 5049              	.LVL463:
 5050              	.L445:
 5051              	.LCFI48:
 5052              		.cfi_def_cfa_offset 0
 5053              		.cfi_restore 4
 5054              		.cfi_restore 14
 367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 5055              		.loc 1 367 0
 5056 006a 0120     		movs	r0, #1
 5057              	.LVL464:
 5058 006c 7047     		bx	lr
 5059              	.LVL465:
 5060              	.L442:
 5061              	.LCFI49:
 5062              		.cfi_def_cfa_offset 8
 5063              		.cfi_offset 4, -8
 5064              		.cfi_offset 14, -4
 422:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5065              		.loc 1 422 0
 5066 006e 10BD     		pop	{r4, pc}
 5067              		.cfi_endproc
 5068              	.LFE142:
 5070              		.section	.text.HAL_LIN_Init,"ax",%progbits
 5071              		.align	1
 5072              		.global	HAL_LIN_Init
 5073              		.syntax unified
 5074              		.thumb
 5075              		.thumb_func
 5076              		.fpu fpv5-d16
 5078              	HAL_LIN_Init:
 5079              	.LFB143:
 436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 5080              		.loc 1 436 0
 5081              		.cfi_startproc
 5082              		@ args = 0, pretend = 0, frame = 0
 5083              		@ frame_needed = 0, uses_anonymous_args = 0
 5084              	.LVL466:
 438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5085              		.loc 1 438 0
 5086 0000 0028     		cmp	r0, #0
 5087 0002 41D0     		beq	.L456
 436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 5088              		.loc 1 436 0
 5089 0004 38B5     		push	{r3, r4, r5, lr}
 5090              	.LCFI50:
 5091              		.cfi_def_cfa_offset 16
 5092              		.cfi_offset 3, -16
 5093              		.cfi_offset 4, -12
 5094              		.cfi_offset 5, -8
 5095              		.cfi_offset 14, -4
 5096 0006 0446     		mov	r4, r0
 449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5097              		.loc 1 449 0
 5098 0008 C369     		ldr	r3, [r0, #28]
ARM GAS  /tmp/ccwHIqYH.s 			page 173


 5099 000a B3F5004F 		cmp	r3, #32768
 5100 000e 3DD0     		beq	.L457
 454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5101              		.loc 1 454 0
 5102 0010 8368     		ldr	r3, [r0, #8]
 5103 0012 002B     		cmp	r3, #0
 5104 0014 3CD1     		bne	.L458
 5105 0016 0D46     		mov	r5, r1
 459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5106              		.loc 1 459 0
 5107 0018 836F     		ldr	r3, [r0, #120]
 5108 001a 002B     		cmp	r3, #0
 5109 001c 2BD0     		beq	.L463
 5110              	.LVL467:
 5111              	.L454:
 480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5112              		.loc 1 480 0
 5113 001e 2423     		movs	r3, #36
 5114 0020 A367     		str	r3, [r4, #120]
 482:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5115              		.loc 1 482 0
 5116 0022 2268     		ldr	r2, [r4]
 5117 0024 1368     		ldr	r3, [r2]
 5118 0026 23F00103 		bic	r3, r3, #1
 5119 002a 1360     		str	r3, [r2]
 485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5120              		.loc 1 485 0
 5121 002c 2046     		mov	r0, r4
 5122 002e FFF7FEFF 		bl	UART_SetConfig
 5123              	.LVL468:
 5124 0032 0128     		cmp	r0, #1
 5125 0034 2DD0     		beq	.L453
 490:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5126              		.loc 1 490 0
 5127 0036 636A     		ldr	r3, [r4, #36]
 5128 0038 13BB     		cbnz	r3, .L464
 5129              	.L455:
 498:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 5130              		.loc 1 498 0
 5131 003a 2268     		ldr	r2, [r4]
 5132 003c 5368     		ldr	r3, [r2, #4]
 5133 003e 23F40063 		bic	r3, r3, #2048
 5134 0042 5360     		str	r3, [r2, #4]
 499:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5135              		.loc 1 499 0
 5136 0044 2268     		ldr	r2, [r4]
 5137 0046 9368     		ldr	r3, [r2, #8]
 5138 0048 23F02A03 		bic	r3, r3, #42
 5139 004c 9360     		str	r3, [r2, #8]
 502:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5140              		.loc 1 502 0
 5141 004e 2268     		ldr	r2, [r4]
 5142 0050 5368     		ldr	r3, [r2, #4]
 5143 0052 43F48043 		orr	r3, r3, #16384
 5144 0056 5360     		str	r3, [r2, #4]
 505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5145              		.loc 1 505 0
ARM GAS  /tmp/ccwHIqYH.s 			page 174


 5146 0058 2268     		ldr	r2, [r4]
 5147 005a 5368     		ldr	r3, [r2, #4]
 5148 005c 23F02003 		bic	r3, r3, #32
 5149 0060 2B43     		orrs	r3, r3, r5
 5150 0062 5360     		str	r3, [r2, #4]
 507:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5151              		.loc 1 507 0
 5152 0064 2268     		ldr	r2, [r4]
 5153 0066 1368     		ldr	r3, [r2]
 5154 0068 43F00103 		orr	r3, r3, #1
 5155 006c 1360     		str	r3, [r2]
 510:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 5156              		.loc 1 510 0
 5157 006e 2046     		mov	r0, r4
 5158 0070 FFF7FEFF 		bl	UART_CheckIdleState
 5159              	.LVL469:
 5160 0074 38BD     		pop	{r3, r4, r5, pc}
 5161              	.LVL470:
 5162              	.L463:
 462:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5163              		.loc 1 462 0
 5164 0076 80F87430 		strb	r3, [r0, #116]
 476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 5165              		.loc 1 476 0
 5166 007a FFF7FEFF 		bl	HAL_UART_MspInit
 5167              	.LVL471:
 5168 007e CEE7     		b	.L454
 5169              	.L464:
 492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 5170              		.loc 1 492 0
 5171 0080 2046     		mov	r0, r4
 5172 0082 FFF7FEFF 		bl	UART_AdvFeatureConfig
 5173              	.LVL472:
 5174 0086 D8E7     		b	.L455
 5175              	.LVL473:
 5176              	.L456:
 5177              	.LCFI51:
 5178              		.cfi_def_cfa_offset 0
 5179              		.cfi_restore 3
 5180              		.cfi_restore 4
 5181              		.cfi_restore 5
 5182              		.cfi_restore 14
 440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 5183              		.loc 1 440 0
 5184 0088 0120     		movs	r0, #1
 5185              	.LVL474:
 5186 008a 7047     		bx	lr
 5187              	.LVL475:
 5188              	.L457:
 5189              	.LCFI52:
 5190              		.cfi_def_cfa_offset 16
 5191              		.cfi_offset 3, -16
 5192              		.cfi_offset 4, -12
 5193              		.cfi_offset 5, -8
 5194              		.cfi_offset 14, -4
 451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 5195              		.loc 1 451 0
ARM GAS  /tmp/ccwHIqYH.s 			page 175


 5196 008c 0120     		movs	r0, #1
 5197              	.LVL476:
 5198 008e 38BD     		pop	{r3, r4, r5, pc}
 5199              	.LVL477:
 5200              	.L458:
 456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 5201              		.loc 1 456 0
 5202 0090 0120     		movs	r0, #1
 5203              	.LVL478:
 5204              	.L453:
 511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5205              		.loc 1 511 0
 5206 0092 38BD     		pop	{r3, r4, r5, pc}
 5207              		.cfi_endproc
 5208              	.LFE143:
 5210              		.section	.text.HAL_MultiProcessor_Init,"ax",%progbits
 5211              		.align	1
 5212              		.global	HAL_MultiProcessor_Init
 5213              		.syntax unified
 5214              		.thumb
 5215              		.thumb_func
 5216              		.fpu fpv5-d16
 5218              	HAL_MultiProcessor_Init:
 5219              	.LFB144:
 533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 5220              		.loc 1 533 0
 5221              		.cfi_startproc
 5222              		@ args = 0, pretend = 0, frame = 0
 5223              		@ frame_needed = 0, uses_anonymous_args = 0
 5224              	.LVL479:
 535:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5225              		.loc 1 535 0
 5226 0000 0028     		cmp	r0, #0
 5227 0002 40D0     		beq	.L470
 533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 5228              		.loc 1 533 0
 5229 0004 70B5     		push	{r4, r5, r6, lr}
 5230              	.LCFI53:
 5231              		.cfi_def_cfa_offset 16
 5232              		.cfi_offset 4, -16
 5233              		.cfi_offset 5, -12
 5234              		.cfi_offset 6, -8
 5235              		.cfi_offset 14, -4
 5236 0006 0446     		mov	r4, r0
 5237 0008 1546     		mov	r5, r2
 5238 000a 0E46     		mov	r6, r1
 543:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5239              		.loc 1 543 0
 5240 000c 836F     		ldr	r3, [r0, #120]
 5241 000e 4BB3     		cbz	r3, .L475
 5242              	.LVL480:
 5243              	.L467:
 564:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5244              		.loc 1 564 0
 5245 0010 2423     		movs	r3, #36
 5246 0012 A367     		str	r3, [r4, #120]
 566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccwHIqYH.s 			page 176


 5247              		.loc 1 566 0
 5248 0014 2268     		ldr	r2, [r4]
 5249 0016 1368     		ldr	r3, [r2]
 5250 0018 23F00103 		bic	r3, r3, #1
 5251 001c 1360     		str	r3, [r2]
 569:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5252              		.loc 1 569 0
 5253 001e 2046     		mov	r0, r4
 5254 0020 FFF7FEFF 		bl	UART_SetConfig
 5255              	.LVL481:
 5256 0024 0128     		cmp	r0, #1
 5257 0026 30D0     		beq	.L466
 574:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5258              		.loc 1 574 0
 5259 0028 636A     		ldr	r3, [r4, #36]
 5260 002a 03BB     		cbnz	r3, .L476
 5261              	.L468:
 582:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 5262              		.loc 1 582 0
 5263 002c 2268     		ldr	r2, [r4]
 5264 002e 5368     		ldr	r3, [r2, #4]
 5265 0030 23F49043 		bic	r3, r3, #18432
 5266 0034 5360     		str	r3, [r2, #4]
 583:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5267              		.loc 1 583 0
 5268 0036 2268     		ldr	r2, [r4]
 5269 0038 9368     		ldr	r3, [r2, #8]
 5270 003a 23F02A03 		bic	r3, r3, #42
 5271 003e 9360     		str	r3, [r2, #8]
 585:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5272              		.loc 1 585 0
 5273 0040 B5F5006F 		cmp	r5, #2048
 5274 0044 17D0     		beq	.L477
 5275              	.L469:
 592:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5276              		.loc 1 592 0
 5277 0046 2368     		ldr	r3, [r4]
 5278 0048 1A68     		ldr	r2, [r3]
 5279 004a 22F40062 		bic	r2, r2, #2048
 5280 004e 1543     		orrs	r5, r5, r2
 5281              	.LVL482:
 5282 0050 1D60     		str	r5, [r3]
 594:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5283              		.loc 1 594 0
 5284 0052 2268     		ldr	r2, [r4]
 5285 0054 1368     		ldr	r3, [r2]
 5286 0056 43F00103 		orr	r3, r3, #1
 5287 005a 1360     		str	r3, [r2]
 597:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 5288              		.loc 1 597 0
 5289 005c 2046     		mov	r0, r4
 5290 005e FFF7FEFF 		bl	UART_CheckIdleState
 5291              	.LVL483:
 5292 0062 70BD     		pop	{r4, r5, r6, pc}
 5293              	.LVL484:
 5294              	.L475:
 546:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccwHIqYH.s 			page 177


 5295              		.loc 1 546 0
 5296 0064 80F87430 		strb	r3, [r0, #116]
 560:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 5297              		.loc 1 560 0
 5298 0068 FFF7FEFF 		bl	HAL_UART_MspInit
 5299              	.LVL485:
 5300 006c D0E7     		b	.L467
 5301              	.L476:
 576:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 5302              		.loc 1 576 0
 5303 006e 2046     		mov	r0, r4
 5304 0070 FFF7FEFF 		bl	UART_AdvFeatureConfig
 5305              	.LVL486:
 5306 0074 DAE7     		b	.L468
 5307              	.L477:
 588:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 5308              		.loc 1 588 0
 5309 0076 2368     		ldr	r3, [r4]
 5310 0078 5968     		ldr	r1, [r3, #4]
 5311 007a 21F07F41 		bic	r1, r1, #-16777216
 5312 007e 41EA0666 		orr	r6, r1, r6, lsl #24
 5313 0082 5E60     		str	r6, [r3, #4]
 5314 0084 DFE7     		b	.L469
 5315              	.LVL487:
 5316              	.L470:
 5317              	.LCFI54:
 5318              		.cfi_def_cfa_offset 0
 5319              		.cfi_restore 4
 5320              		.cfi_restore 5
 5321              		.cfi_restore 6
 5322              		.cfi_restore 14
 537:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 5323              		.loc 1 537 0
 5324 0086 0120     		movs	r0, #1
 5325              	.LVL488:
 5326 0088 7047     		bx	lr
 5327              	.LVL489:
 5328              	.L466:
 5329              	.LCFI55:
 5330              		.cfi_def_cfa_offset 16
 5331              		.cfi_offset 4, -16
 5332              		.cfi_offset 5, -12
 5333              		.cfi_offset 6, -8
 5334              		.cfi_offset 14, -4
 598:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5335              		.loc 1 598 0
 5336 008a 70BD     		pop	{r4, r5, r6, pc}
 5337              		.cfi_endproc
 5338              	.LFE144:
 5340              		.section	.text.HAL_MultiProcessor_EnableMuteMode,"ax",%progbits
 5341              		.align	1
 5342              		.global	HAL_MultiProcessor_EnableMuteMode
 5343              		.syntax unified
 5344              		.thumb
 5345              		.thumb_func
 5346              		.fpu fpv5-d16
 5348              	HAL_MultiProcessor_EnableMuteMode:
ARM GAS  /tmp/ccwHIqYH.s 			page 178


 5349              	.LFB177:
2702:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
 5350              		.loc 1 2702 0
 5351              		.cfi_startproc
 5352              		@ args = 0, pretend = 0, frame = 0
 5353              		@ frame_needed = 0, uses_anonymous_args = 0
 5354              	.LVL490:
 5355 0000 08B5     		push	{r3, lr}
 5356              	.LCFI56:
 5357              		.cfi_def_cfa_offset 8
 5358              		.cfi_offset 3, -8
 5359              		.cfi_offset 14, -4
2703:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5360              		.loc 1 2703 0
 5361 0002 90F87430 		ldrb	r3, [r0, #116]	@ zero_extendqisi2
 5362 0006 012B     		cmp	r3, #1
 5363 0008 01D1     		bne	.L482
 5364 000a 0220     		movs	r0, #2
 5365              	.LVL491:
2713:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5366              		.loc 1 2713 0
 5367 000c 08BD     		pop	{r3, pc}
 5368              	.LVL492:
 5369              	.L482:
2703:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5370              		.loc 1 2703 0 discriminator 2
 5371 000e 0123     		movs	r3, #1
 5372 0010 80F87430 		strb	r3, [r0, #116]
2705:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5373              		.loc 1 2705 0 discriminator 2
 5374 0014 2423     		movs	r3, #36
 5375 0016 8367     		str	r3, [r0, #120]
2708:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5376              		.loc 1 2708 0 discriminator 2
 5377 0018 0268     		ldr	r2, [r0]
 5378 001a 1368     		ldr	r3, [r2]
 5379 001c 43F40053 		orr	r3, r3, #8192
 5380 0020 1360     		str	r3, [r2]
2710:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5381              		.loc 1 2710 0 discriminator 2
 5382 0022 2023     		movs	r3, #32
 5383 0024 8367     		str	r3, [r0, #120]
2712:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 5384              		.loc 1 2712 0 discriminator 2
 5385 0026 FFF7FEFF 		bl	UART_CheckIdleState
 5386              	.LVL493:
 5387 002a 08BD     		pop	{r3, pc}
 5388              		.cfi_endproc
 5389              	.LFE177:
 5391              		.section	.text.HAL_MultiProcessor_DisableMuteMode,"ax",%progbits
 5392              		.align	1
 5393              		.global	HAL_MultiProcessor_DisableMuteMode
 5394              		.syntax unified
 5395              		.thumb
 5396              		.thumb_func
 5397              		.fpu fpv5-d16
 5399              	HAL_MultiProcessor_DisableMuteMode:
ARM GAS  /tmp/ccwHIqYH.s 			page 179


 5400              	.LFB178:
2722:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
 5401              		.loc 1 2722 0
 5402              		.cfi_startproc
 5403              		@ args = 0, pretend = 0, frame = 0
 5404              		@ frame_needed = 0, uses_anonymous_args = 0
 5405              	.LVL494:
 5406 0000 08B5     		push	{r3, lr}
 5407              	.LCFI57:
 5408              		.cfi_def_cfa_offset 8
 5409              		.cfi_offset 3, -8
 5410              		.cfi_offset 14, -4
2723:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5411              		.loc 1 2723 0
 5412 0002 90F87430 		ldrb	r3, [r0, #116]	@ zero_extendqisi2
 5413 0006 012B     		cmp	r3, #1
 5414 0008 01D1     		bne	.L487
 5415 000a 0220     		movs	r0, #2
 5416              	.LVL495:
2733:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5417              		.loc 1 2733 0
 5418 000c 08BD     		pop	{r3, pc}
 5419              	.LVL496:
 5420              	.L487:
2723:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5421              		.loc 1 2723 0 discriminator 2
 5422 000e 0123     		movs	r3, #1
 5423 0010 80F87430 		strb	r3, [r0, #116]
2725:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5424              		.loc 1 2725 0 discriminator 2
 5425 0014 2423     		movs	r3, #36
 5426 0016 8367     		str	r3, [r0, #120]
2728:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5427              		.loc 1 2728 0 discriminator 2
 5428 0018 0268     		ldr	r2, [r0]
 5429 001a 1368     		ldr	r3, [r2]
 5430 001c 23F40053 		bic	r3, r3, #8192
 5431 0020 1360     		str	r3, [r2]
2730:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5432              		.loc 1 2730 0 discriminator 2
 5433 0022 2023     		movs	r3, #32
 5434 0024 8367     		str	r3, [r0, #120]
2732:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 5435              		.loc 1 2732 0 discriminator 2
 5436 0026 FFF7FEFF 		bl	UART_CheckIdleState
 5437              	.LVL497:
 5438 002a 08BD     		pop	{r3, pc}
 5439              		.cfi_endproc
 5440              	.LFE178:
 5442              		.section	.text.UART_Start_Receive_IT,"ax",%progbits
 5443              		.align	1
 5444              		.global	UART_Start_Receive_IT
 5445              		.syntax unified
 5446              		.thumb
 5447              		.thumb_func
 5448              		.fpu fpv5-d16
 5450              	UART_Start_Receive_IT:
ARM GAS  /tmp/ccwHIqYH.s 			page 180


 5451              	.LFB189:
3241:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->pRxBuffPtr  = pData;
 5452              		.loc 1 3241 0
 5453              		.cfi_startproc
 5454              		@ args = 0, pretend = 0, frame = 0
 5455              		@ frame_needed = 0, uses_anonymous_args = 0
 5456              		@ link register save eliminated.
 5457              	.LVL498:
 5458 0000 0346     		mov	r3, r0
3242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferSize  = Size;
 5459              		.loc 1 3242 0
 5460 0002 4165     		str	r1, [r0, #84]
3243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = Size;
 5461              		.loc 1 3243 0
 5462 0004 A0F85820 		strh	r2, [r0, #88]	@ movhi
3244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxISR       = NULL;
 5463              		.loc 1 3244 0
 5464 0008 A0F85A20 		strh	r2, [r0, #90]	@ movhi
3245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5465              		.loc 1 3245 0
 5466 000c 0022     		movs	r2, #0
 5467              	.LVL499:
 5468 000e 4266     		str	r2, [r0, #100]
3248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5469              		.loc 1 3248 0
 5470 0010 8268     		ldr	r2, [r0, #8]
 5471 0012 B2F5805F 		cmp	r2, #4096
 5472 0016 06D0     		beq	.L498
3248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5473              		.loc 1 3248 0 is_stmt 0 discriminator 2
 5474 0018 A2B9     		cbnz	r2, .L492
3248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5475              		.loc 1 3248 0 discriminator 5
 5476 001a 0269     		ldr	r2, [r0, #16]
 5477 001c 72B9     		cbnz	r2, .L493
3248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5478              		.loc 1 3248 0 discriminator 7
 5479 001e FF22     		movs	r2, #255
 5480 0020 A0F85C20 		strh	r2, [r0, #92]	@ movhi
 5481 0024 14E0     		b	.L491
 5482              	.L498:
3248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5483              		.loc 1 3248 0 discriminator 1
 5484 0026 0269     		ldr	r2, [r0, #16]
 5485 0028 22B9     		cbnz	r2, .L490
3248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5486              		.loc 1 3248 0 discriminator 3
 5487 002a 40F2FF12 		movw	r2, #511
 5488 002e A0F85C20 		strh	r2, [r0, #92]	@ movhi
 5489 0032 0DE0     		b	.L491
 5490              	.L490:
3248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5491              		.loc 1 3248 0 discriminator 4
 5492 0034 FF22     		movs	r2, #255
 5493 0036 A0F85C20 		strh	r2, [r0, #92]	@ movhi
 5494 003a 09E0     		b	.L491
 5495              	.L493:
ARM GAS  /tmp/ccwHIqYH.s 			page 181


3248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5496              		.loc 1 3248 0 discriminator 8
 5497 003c 7F22     		movs	r2, #127
 5498 003e A0F85C20 		strh	r2, [r0, #92]	@ movhi
 5499 0042 05E0     		b	.L491
 5500              	.L492:
3248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5501              		.loc 1 3248 0 discriminator 6
 5502 0044 B2F1805F 		cmp	r2, #268435456
 5503 0048 1BD0     		beq	.L499
3248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5504              		.loc 1 3248 0 discriminator 10
 5505 004a 0022     		movs	r2, #0
 5506 004c A0F85C20 		strh	r2, [r0, #92]	@ movhi
 5507              	.L491:
3250:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_BUSY_RX;
 5508              		.loc 1 3250 0 is_stmt 1
 5509 0050 0022     		movs	r2, #0
 5510 0052 C3F88020 		str	r2, [r3, #128]
3251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5511              		.loc 1 3251 0
 5512 0056 2222     		movs	r2, #34
 5513 0058 DA67     		str	r2, [r3, #124]
3254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5514              		.loc 1 3254 0
 5515 005a 1968     		ldr	r1, [r3]
 5516              	.LVL500:
 5517 005c 8A68     		ldr	r2, [r1, #8]
 5518 005e 42F00102 		orr	r2, r2, #1
 5519 0062 8A60     		str	r2, [r1, #8]
 5520              	.LVL501:
3257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5521              		.loc 1 3257 0
 5522 0064 9A68     		ldr	r2, [r3, #8]
 5523 0066 B2F5805F 		cmp	r2, #4096
 5524 006a 14D0     		beq	.L500
 5525              	.L496:
3263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 5526              		.loc 1 3263 0
 5527 006c 0D4A     		ldr	r2, .L501
 5528 006e 5A66     		str	r2, [r3, #100]
 5529              	.L497:
3266:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5530              		.loc 1 3266 0
 5531 0070 0020     		movs	r0, #0
 5532              	.LVL502:
 5533 0072 83F87400 		strb	r0, [r3, #116]
3269:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
 5534              		.loc 1 3269 0
 5535 0076 1A68     		ldr	r2, [r3]
 5536 0078 1368     		ldr	r3, [r2]
 5537              	.LVL503:
 5538 007a 43F49073 		orr	r3, r3, #288
 5539 007e 1360     		str	r3, [r2]
3271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5540              		.loc 1 3271 0
 5541 0080 7047     		bx	lr
ARM GAS  /tmp/ccwHIqYH.s 			page 182


 5542              	.LVL504:
 5543              	.L499:
3248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5544              		.loc 1 3248 0 discriminator 9
 5545 0082 0269     		ldr	r2, [r0, #16]
 5546 0084 1AB9     		cbnz	r2, .L495
3248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5547              		.loc 1 3248 0 is_stmt 0 discriminator 11
 5548 0086 7F22     		movs	r2, #127
 5549 0088 A0F85C20 		strh	r2, [r0, #92]	@ movhi
 5550 008c E0E7     		b	.L491
 5551              	.L495:
3248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5552              		.loc 1 3248 0 discriminator 12
 5553 008e 3F22     		movs	r2, #63
 5554 0090 A0F85C20 		strh	r2, [r0, #92]	@ movhi
 5555 0094 DCE7     		b	.L491
 5556              	.LVL505:
 5557              	.L500:
3257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5558              		.loc 1 3257 0 is_stmt 1 discriminator 1
 5559 0096 1A69     		ldr	r2, [r3, #16]
 5560 0098 002A     		cmp	r2, #0
 5561 009a E7D1     		bne	.L496
3259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 5562              		.loc 1 3259 0
 5563 009c 024A     		ldr	r2, .L501+4
 5564 009e 5A66     		str	r2, [r3, #100]
 5565 00a0 E6E7     		b	.L497
 5566              	.L502:
 5567 00a2 00BF     		.align	2
 5568              	.L501:
 5569 00a4 00000000 		.word	UART_RxISR_8BIT
 5570 00a8 00000000 		.word	UART_RxISR_16BIT
 5571              		.cfi_endproc
 5572              	.LFE189:
 5574              		.section	.text.HAL_UART_Receive_IT,"ax",%progbits
 5575              		.align	1
 5576              		.global	HAL_UART_Receive_IT
 5577              		.syntax unified
 5578              		.thumb
 5579              		.thumb_func
 5580              		.fpu fpv5-d16
 5582              	HAL_UART_Receive_IT:
 5583              	.LFB151:
1318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 5584              		.loc 1 1318 0
 5585              		.cfi_startproc
 5586              		@ args = 0, pretend = 0, frame = 0
 5587              		@ frame_needed = 0, uses_anonymous_args = 0
 5588              	.LVL506:
1320:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5589              		.loc 1 1320 0
 5590 0000 C36F     		ldr	r3, [r0, #124]
 5591 0002 202B     		cmp	r3, #32
 5592 0004 01D0     		beq	.L513
1343:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
ARM GAS  /tmp/ccwHIqYH.s 			page 183


 5593              		.loc 1 1343 0
 5594 0006 0220     		movs	r0, #2
 5595              	.LVL507:
 5596 0008 7047     		bx	lr
 5597              	.LVL508:
 5598              	.L513:
1322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 5599              		.loc 1 1322 0
 5600 000a 002A     		cmp	r2, #0
 5601 000c 18BF     		it	ne
 5602 000e 0029     		cmpne	r1, #0
 5603 0010 15D0     		beq	.L507
1327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5604              		.loc 1 1327 0
 5605 0012 90F87430 		ldrb	r3, [r0, #116]	@ zero_extendqisi2
 5606 0016 012B     		cmp	r3, #1
 5607 0018 13D0     		beq	.L508
1318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 5608              		.loc 1 1318 0 discriminator 2
 5609 001a 10B5     		push	{r4, lr}
 5610              	.LCFI58:
 5611              		.cfi_def_cfa_offset 8
 5612              		.cfi_offset 4, -8
 5613              		.cfi_offset 14, -4
1327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5614              		.loc 1 1327 0 discriminator 2
 5615 001c 0123     		movs	r3, #1
 5616 001e 80F87430 		strb	r3, [r0, #116]
1330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5617              		.loc 1 1330 0 discriminator 2
 5618 0022 0023     		movs	r3, #0
 5619 0024 0366     		str	r3, [r0, #96]
1333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 5620              		.loc 1 1333 0 discriminator 2
 5621 0026 0368     		ldr	r3, [r0]
 5622 0028 5C68     		ldr	r4, [r3, #4]
 5623 002a 14F4000F 		tst	r4, #8388608
 5624 002e 03D0     		beq	.L505
1336:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 5625              		.loc 1 1336 0
 5626 0030 1C68     		ldr	r4, [r3]
 5627 0032 44F08064 		orr	r4, r4, #67108864
 5628 0036 1C60     		str	r4, [r3]
 5629              	.L505:
1339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 5630              		.loc 1 1339 0
 5631 0038 FFF7FEFF 		bl	UART_Start_Receive_IT
 5632              	.LVL509:
 5633 003c 10BD     		pop	{r4, pc}
 5634              	.LVL510:
 5635              	.L507:
 5636              	.LCFI59:
 5637              		.cfi_def_cfa_offset 0
 5638              		.cfi_restore 4
 5639              		.cfi_restore 14
1324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 5640              		.loc 1 1324 0
ARM GAS  /tmp/ccwHIqYH.s 			page 184


 5641 003e 0120     		movs	r0, #1
 5642              	.LVL511:
 5643 0040 7047     		bx	lr
 5644              	.LVL512:
 5645              	.L508:
1327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5646              		.loc 1 1327 0
 5647 0042 0220     		movs	r0, #2
 5648              	.LVL513:
 5649 0044 7047     		bx	lr
 5650              		.cfi_endproc
 5651              	.LFE151:
 5653              		.section	.text.UART_Start_Receive_DMA,"ax",%progbits
 5654              		.align	1
 5655              		.global	UART_Start_Receive_DMA
 5656              		.syntax unified
 5657              		.thumb
 5658              		.thumb_func
 5659              		.fpu fpv5-d16
 5661              	UART_Start_Receive_DMA:
 5662              	.LFB190:
3285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->pRxBuffPtr = pData;
 5663              		.loc 1 3285 0
 5664              		.cfi_startproc
 5665              		@ args = 0, pretend = 0, frame = 0
 5666              		@ frame_needed = 0, uses_anonymous_args = 0
 5667              	.LVL514:
 5668 0000 10B5     		push	{r4, lr}
 5669              	.LCFI60:
 5670              		.cfi_def_cfa_offset 8
 5671              		.cfi_offset 4, -8
 5672              		.cfi_offset 14, -4
 5673 0002 0446     		mov	r4, r0
3286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferSize = Size;
 5674              		.loc 1 3286 0
 5675 0004 4165     		str	r1, [r0, #84]
3287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5676              		.loc 1 3287 0
 5677 0006 A0F85820 		strh	r2, [r0, #88]	@ movhi
3289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_BUSY_RX;
 5678              		.loc 1 3289 0
 5679 000a 0023     		movs	r3, #0
 5680 000c C0F88030 		str	r3, [r0, #128]
3290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5681              		.loc 1 3290 0
 5682 0010 2223     		movs	r3, #34
 5683 0012 C367     		str	r3, [r0, #124]
3292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5684              		.loc 1 3292 0
 5685 0014 036F     		ldr	r3, [r0, #112]
 5686 0016 93B1     		cbz	r3, .L515
3295:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5687              		.loc 1 3295 0
 5688 0018 1749     		ldr	r1, .L519
 5689              	.LVL515:
 5690 001a D963     		str	r1, [r3, #60]
 5691              	.LVL516:
ARM GAS  /tmp/ccwHIqYH.s 			page 185


3298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5692              		.loc 1 3298 0
 5693 001c 036F     		ldr	r3, [r0, #112]
 5694 001e 1749     		ldr	r1, .L519+4
 5695 0020 1964     		str	r1, [r3, #64]
3301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5696              		.loc 1 3301 0
 5697 0022 036F     		ldr	r3, [r0, #112]
 5698 0024 1649     		ldr	r1, .L519+8
 5699 0026 D964     		str	r1, [r3, #76]
3304:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5700              		.loc 1 3304 0
 5701 0028 036F     		ldr	r3, [r0, #112]
 5702 002a 0021     		movs	r1, #0
 5703 002c 1965     		str	r1, [r3, #80]
3307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 5704              		.loc 1 3307 0
 5705 002e 0168     		ldr	r1, [r0]
 5706 0030 1346     		mov	r3, r2
 5707 0032 426D     		ldr	r2, [r0, #84]
 5708              	.LVL517:
 5709 0034 2431     		adds	r1, r1, #36
 5710 0036 006F     		ldr	r0, [r0, #112]
 5711              	.LVL518:
 5712 0038 FFF7FEFF 		bl	HAL_DMA_Start_IT
 5713              	.LVL519:
 5714 003c 90B9     		cbnz	r0, .L518
 5715              	.L515:
3320:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5716              		.loc 1 3320 0
 5717 003e 0020     		movs	r0, #0
 5718 0040 84F87400 		strb	r0, [r4, #116]
3323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5719              		.loc 1 3323 0
 5720 0044 2268     		ldr	r2, [r4]
 5721 0046 1368     		ldr	r3, [r2]
 5722 0048 43F48073 		orr	r3, r3, #256
 5723 004c 1360     		str	r3, [r2]
3326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5724              		.loc 1 3326 0
 5725 004e 2268     		ldr	r2, [r4]
 5726 0050 9368     		ldr	r3, [r2, #8]
 5727 0052 43F00103 		orr	r3, r3, #1
 5728 0056 9360     		str	r3, [r2, #8]
3330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5729              		.loc 1 3330 0
 5730 0058 2268     		ldr	r2, [r4]
 5731 005a 9368     		ldr	r3, [r2, #8]
 5732 005c 43F04003 		orr	r3, r3, #64
 5733 0060 9360     		str	r3, [r2, #8]
3333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5734              		.loc 1 3333 0
 5735 0062 10BD     		pop	{r4, pc}
 5736              	.LVL520:
 5737              	.L518:
3310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5738              		.loc 1 3310 0
ARM GAS  /tmp/ccwHIqYH.s 			page 186


 5739 0064 1023     		movs	r3, #16
 5740 0066 C4F88030 		str	r3, [r4, #128]
3312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5741              		.loc 1 3312 0
 5742 006a 0023     		movs	r3, #0
 5743 006c 84F87430 		strb	r3, [r4, #116]
3315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5744              		.loc 1 3315 0
 5745 0070 2023     		movs	r3, #32
 5746 0072 A367     		str	r3, [r4, #120]
3317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 5747              		.loc 1 3317 0
 5748 0074 0120     		movs	r0, #1
 5749 0076 10BD     		pop	{r4, pc}
 5750              	.LVL521:
 5751              	.L520:
 5752              		.align	2
 5753              	.L519:
 5754 0078 00000000 		.word	UART_DMAReceiveCplt
 5755 007c 00000000 		.word	UART_DMARxHalfCplt
 5756 0080 00000000 		.word	UART_DMAError
 5757              		.cfi_endproc
 5758              	.LFE190:
 5760              		.section	.text.HAL_UART_Receive_DMA,"ax",%progbits
 5761              		.align	1
 5762              		.global	HAL_UART_Receive_DMA
 5763              		.syntax unified
 5764              		.thumb
 5765              		.thumb_func
 5766              		.fpu fpv5-d16
 5768              	HAL_UART_Receive_DMA:
 5769              	.LFB153:
1434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 5770              		.loc 1 1434 0
 5771              		.cfi_startproc
 5772              		@ args = 0, pretend = 0, frame = 0
 5773              		@ frame_needed = 0, uses_anonymous_args = 0
 5774              	.LVL522:
1436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5775              		.loc 1 1436 0
 5776 0000 C36F     		ldr	r3, [r0, #124]
 5777 0002 202B     		cmp	r3, #32
 5778 0004 01D0     		beq	.L531
1459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 5779              		.loc 1 1459 0
 5780 0006 0220     		movs	r0, #2
 5781              	.LVL523:
 5782 0008 7047     		bx	lr
 5783              	.LVL524:
 5784              	.L531:
1438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 5785              		.loc 1 1438 0
 5786 000a 002A     		cmp	r2, #0
 5787 000c 18BF     		it	ne
 5788 000e 0029     		cmpne	r1, #0
 5789 0010 15D0     		beq	.L525
1443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccwHIqYH.s 			page 187


 5790              		.loc 1 1443 0
 5791 0012 90F87430 		ldrb	r3, [r0, #116]	@ zero_extendqisi2
 5792 0016 012B     		cmp	r3, #1
 5793 0018 13D0     		beq	.L526
1434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 5794              		.loc 1 1434 0 discriminator 2
 5795 001a 10B5     		push	{r4, lr}
 5796              	.LCFI61:
 5797              		.cfi_def_cfa_offset 8
 5798              		.cfi_offset 4, -8
 5799              		.cfi_offset 14, -4
1443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5800              		.loc 1 1443 0 discriminator 2
 5801 001c 0123     		movs	r3, #1
 5802 001e 80F87430 		strb	r3, [r0, #116]
1446:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5803              		.loc 1 1446 0 discriminator 2
 5804 0022 0023     		movs	r3, #0
 5805 0024 0366     		str	r3, [r0, #96]
1449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 5806              		.loc 1 1449 0 discriminator 2
 5807 0026 0368     		ldr	r3, [r0]
 5808 0028 5C68     		ldr	r4, [r3, #4]
 5809 002a 14F4000F 		tst	r4, #8388608
 5810 002e 03D0     		beq	.L523
1452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 5811              		.loc 1 1452 0
 5812 0030 1C68     		ldr	r4, [r3]
 5813 0032 44F08064 		orr	r4, r4, #67108864
 5814 0036 1C60     		str	r4, [r3]
 5815              	.L523:
1455:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 5816              		.loc 1 1455 0
 5817 0038 FFF7FEFF 		bl	UART_Start_Receive_DMA
 5818              	.LVL525:
 5819 003c 10BD     		pop	{r4, pc}
 5820              	.LVL526:
 5821              	.L525:
 5822              	.LCFI62:
 5823              		.cfi_def_cfa_offset 0
 5824              		.cfi_restore 4
 5825              		.cfi_restore 14
1440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 5826              		.loc 1 1440 0
 5827 003e 0120     		movs	r0, #1
 5828              	.LVL527:
 5829 0040 7047     		bx	lr
 5830              	.LVL528:
 5831              	.L526:
1443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5832              		.loc 1 1443 0
 5833 0042 0220     		movs	r0, #2
 5834              	.LVL529:
 5835 0044 7047     		bx	lr
 5836              		.cfi_endproc
 5837              	.LFE153:
 5839              		.text
ARM GAS  /tmp/ccwHIqYH.s 			page 188


 5840              	.Letext0:
 5841              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 5842              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 5843              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 5844              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 5845              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f767xx.h"
 5846              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 5847              		.file 8 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 5848              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 5849              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
 5850              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 5851              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc.h"
ARM GAS  /tmp/ccwHIqYH.s 			page 189


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f7xx_hal_uart.c
     /tmp/ccwHIqYH.s:17     .text.UART_EndTxTransfer:0000000000000000 $t
     /tmp/ccwHIqYH.s:23     .text.UART_EndTxTransfer:0000000000000000 UART_EndTxTransfer
     /tmp/ccwHIqYH.s:45     .text.UART_EndRxTransfer:0000000000000000 $t
     /tmp/ccwHIqYH.s:51     .text.UART_EndRxTransfer:0000000000000000 UART_EndRxTransfer
     /tmp/ccwHIqYH.s:94     .text.UART_TxISR_8BIT:0000000000000000 $t
     /tmp/ccwHIqYH.s:100    .text.UART_TxISR_8BIT:0000000000000000 UART_TxISR_8BIT
     /tmp/ccwHIqYH.s:152    .text.UART_TxISR_16BIT:0000000000000000 $t
     /tmp/ccwHIqYH.s:158    .text.UART_TxISR_16BIT:0000000000000000 UART_TxISR_16BIT
     /tmp/ccwHIqYH.s:215    .text.HAL_UART_MspInit:0000000000000000 $t
     /tmp/ccwHIqYH.s:222    .text.HAL_UART_MspInit:0000000000000000 HAL_UART_MspInit
     /tmp/ccwHIqYH.s:235    .text.HAL_UART_MspDeInit:0000000000000000 $t
     /tmp/ccwHIqYH.s:242    .text.HAL_UART_MspDeInit:0000000000000000 HAL_UART_MspDeInit
     /tmp/ccwHIqYH.s:255    .text.HAL_UART_DeInit:0000000000000000 $t
     /tmp/ccwHIqYH.s:262    .text.HAL_UART_DeInit:0000000000000000 HAL_UART_DeInit
     /tmp/ccwHIqYH.s:330    .text.HAL_UART_Transmit_IT:0000000000000000 $t
     /tmp/ccwHIqYH.s:337    .text.HAL_UART_Transmit_IT:0000000000000000 HAL_UART_Transmit_IT
     /tmp/ccwHIqYH.s:430    .text.HAL_UART_Transmit_IT:000000000000006c $d
     /tmp/ccwHIqYH.s:436    .text.HAL_UART_Transmit_DMA:0000000000000000 $t
     /tmp/ccwHIqYH.s:443    .text.HAL_UART_Transmit_DMA:0000000000000000 HAL_UART_Transmit_DMA
     /tmp/ccwHIqYH.s:566    .text.HAL_UART_Transmit_DMA:0000000000000098 $d
     /tmp/ccwHIqYH.s:1228   .text.UART_DMATransmitCplt:0000000000000000 UART_DMATransmitCplt
     /tmp/ccwHIqYH.s:1338   .text.UART_DMATxHalfCplt:0000000000000000 UART_DMATxHalfCplt
     /tmp/ccwHIqYH.s:1428   .text.UART_DMAError:0000000000000000 UART_DMAError
     /tmp/ccwHIqYH.s:573    .text.HAL_UART_DMAPause:0000000000000000 $t
     /tmp/ccwHIqYH.s:580    .text.HAL_UART_DMAPause:0000000000000000 HAL_UART_DMAPause
     /tmp/ccwHIqYH.s:679    .text.HAL_UART_DMAResume:0000000000000000 $t
     /tmp/ccwHIqYH.s:686    .text.HAL_UART_DMAResume:0000000000000000 HAL_UART_DMAResume
     /tmp/ccwHIqYH.s:757    .text.HAL_UART_DMAStop:0000000000000000 $t
     /tmp/ccwHIqYH.s:764    .text.HAL_UART_DMAStop:0000000000000000 HAL_UART_DMAStop
     /tmp/ccwHIqYH.s:884    .text.HAL_UART_Abort:0000000000000000 $t
     /tmp/ccwHIqYH.s:891    .text.HAL_UART_Abort:0000000000000000 HAL_UART_Abort
     /tmp/ccwHIqYH.s:1027   .text.HAL_UART_AbortTransmit:0000000000000000 $t
     /tmp/ccwHIqYH.s:1034   .text.HAL_UART_AbortTransmit:0000000000000000 HAL_UART_AbortTransmit
     /tmp/ccwHIqYH.s:1100   .text.HAL_UART_AbortReceive:0000000000000000 $t
     /tmp/ccwHIqYH.s:1107   .text.HAL_UART_AbortReceive:0000000000000000 HAL_UART_AbortReceive
     /tmp/ccwHIqYH.s:1202   .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/ccwHIqYH.s:1209   .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/ccwHIqYH.s:1222   .text.UART_DMATransmitCplt:0000000000000000 $t
     /tmp/ccwHIqYH.s:1275   .text.UART_EndTransmit_IT:0000000000000000 $t
     /tmp/ccwHIqYH.s:1281   .text.UART_EndTransmit_IT:0000000000000000 UART_EndTransmit_IT
     /tmp/ccwHIqYH.s:1312   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 $t
     /tmp/ccwHIqYH.s:1319   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 HAL_UART_TxHalfCpltCallback
     /tmp/ccwHIqYH.s:1332   .text.UART_DMATxHalfCplt:0000000000000000 $t
     /tmp/ccwHIqYH.s:1362   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccwHIqYH.s:1369   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccwHIqYH.s:1382   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 $t
     /tmp/ccwHIqYH.s:1389   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 HAL_UART_RxHalfCpltCallback
     /tmp/ccwHIqYH.s:1402   .text.HAL_UART_ErrorCallback:0000000000000000 $t
     /tmp/ccwHIqYH.s:1409   .text.HAL_UART_ErrorCallback:0000000000000000 HAL_UART_ErrorCallback
     /tmp/ccwHIqYH.s:1422   .text.UART_DMAError:0000000000000000 $t
     /tmp/ccwHIqYH.s:1504   .text.UART_DMAAbortOnError:0000000000000000 $t
     /tmp/ccwHIqYH.s:1510   .text.UART_DMAAbortOnError:0000000000000000 UART_DMAAbortOnError
     /tmp/ccwHIqYH.s:1538   .text.HAL_UART_AbortCpltCallback:0000000000000000 $t
     /tmp/ccwHIqYH.s:1545   .text.HAL_UART_AbortCpltCallback:0000000000000000 HAL_UART_AbortCpltCallback
     /tmp/ccwHIqYH.s:1558   .text.HAL_UART_Abort_IT:0000000000000000 $t
ARM GAS  /tmp/ccwHIqYH.s 			page 190


     /tmp/ccwHIqYH.s:1565   .text.HAL_UART_Abort_IT:0000000000000000 HAL_UART_Abort_IT
     /tmp/ccwHIqYH.s:1750   .text.HAL_UART_Abort_IT:00000000000000ec $d
     /tmp/ccwHIqYH.s:1829   .text.UART_DMATxAbortCallback:0000000000000000 UART_DMATxAbortCallback
     /tmp/ccwHIqYH.s:1762   .text.UART_DMARxAbortCallback:0000000000000000 UART_DMARxAbortCallback
     /tmp/ccwHIqYH.s:1756   .text.UART_DMARxAbortCallback:0000000000000000 $t
     /tmp/ccwHIqYH.s:1823   .text.UART_DMATxAbortCallback:0000000000000000 $t
     /tmp/ccwHIqYH.s:1885   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 $t
     /tmp/ccwHIqYH.s:1892   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 HAL_UART_AbortTransmitCpltCallback
     /tmp/ccwHIqYH.s:1905   .text.HAL_UART_AbortTransmit_IT:0000000000000000 $t
     /tmp/ccwHIqYH.s:1912   .text.HAL_UART_AbortTransmit_IT:0000000000000000 HAL_UART_AbortTransmit_IT
     /tmp/ccwHIqYH.s:1995   .text.HAL_UART_AbortTransmit_IT:0000000000000060 $d
     /tmp/ccwHIqYH.s:2006   .text.UART_DMATxOnlyAbortCallback:0000000000000000 UART_DMATxOnlyAbortCallback
     /tmp/ccwHIqYH.s:2000   .text.UART_DMATxOnlyAbortCallback:0000000000000000 $t
     /tmp/ccwHIqYH.s:2035   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 $t
     /tmp/ccwHIqYH.s:2042   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 HAL_UART_AbortReceiveCpltCallback
     /tmp/ccwHIqYH.s:2055   .text.HAL_UART_AbortReceive_IT:0000000000000000 $t
     /tmp/ccwHIqYH.s:2062   .text.HAL_UART_AbortReceive_IT:0000000000000000 HAL_UART_AbortReceive_IT
     /tmp/ccwHIqYH.s:2183   .text.HAL_UART_AbortReceive_IT:0000000000000098 $d
     /tmp/ccwHIqYH.s:2194   .text.UART_DMARxOnlyAbortCallback:0000000000000000 UART_DMARxOnlyAbortCallback
     /tmp/ccwHIqYH.s:2188   .text.UART_DMARxOnlyAbortCallback:0000000000000000 $t
     /tmp/ccwHIqYH.s:2234   .text.HAL_UARTEx_RxEventCallback:0000000000000000 $t
     /tmp/ccwHIqYH.s:2241   .text.HAL_UARTEx_RxEventCallback:0000000000000000 HAL_UARTEx_RxEventCallback
     /tmp/ccwHIqYH.s:2254   .text.UART_RxISR_8BIT:0000000000000000 $t
     /tmp/ccwHIqYH.s:2260   .text.UART_RxISR_8BIT:0000000000000000 UART_RxISR_8BIT
     /tmp/ccwHIqYH.s:2369   .text.UART_RxISR_16BIT:0000000000000000 $t
     /tmp/ccwHIqYH.s:2375   .text.UART_RxISR_16BIT:0000000000000000 UART_RxISR_16BIT
     /tmp/ccwHIqYH.s:2486   .text.UART_DMARxHalfCplt:0000000000000000 $t
     /tmp/ccwHIqYH.s:2492   .text.UART_DMARxHalfCplt:0000000000000000 UART_DMARxHalfCplt
     /tmp/ccwHIqYH.s:2527   .text.UART_DMAReceiveCplt:0000000000000000 $t
     /tmp/ccwHIqYH.s:2533   .text.UART_DMAReceiveCplt:0000000000000000 UART_DMAReceiveCplt
     /tmp/ccwHIqYH.s:2608   .text.HAL_UARTEx_WakeupCallback:0000000000000000 $t
     /tmp/ccwHIqYH.s:2615   .text.HAL_UARTEx_WakeupCallback:0000000000000000 HAL_UARTEx_WakeupCallback
     /tmp/ccwHIqYH.s:2628   .text.HAL_UART_IRQHandler:0000000000000000 $t
     /tmp/ccwHIqYH.s:2635   .text.HAL_UART_IRQHandler:0000000000000000 HAL_UART_IRQHandler
     /tmp/ccwHIqYH.s:3055   .text.HAL_UART_IRQHandler:000000000000026c $d
     /tmp/ccwHIqYH.s:3061   .text.HAL_UART_ReceiverTimeout_Config:0000000000000000 $t
     /tmp/ccwHIqYH.s:3068   .text.HAL_UART_ReceiverTimeout_Config:0000000000000000 HAL_UART_ReceiverTimeout_Config
     /tmp/ccwHIqYH.s:3088   .text.HAL_UART_EnableReceiverTimeout:0000000000000000 $t
     /tmp/ccwHIqYH.s:3095   .text.HAL_UART_EnableReceiverTimeout:0000000000000000 HAL_UART_EnableReceiverTimeout
     /tmp/ccwHIqYH.s:3149   .text.HAL_UART_DisableReceiverTimeout:0000000000000000 $t
     /tmp/ccwHIqYH.s:3156   .text.HAL_UART_DisableReceiverTimeout:0000000000000000 HAL_UART_DisableReceiverTimeout
     /tmp/ccwHIqYH.s:3210   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 $t
     /tmp/ccwHIqYH.s:3217   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 HAL_MultiProcessor_EnterMuteMode
     /tmp/ccwHIqYH.s:3235   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 $t
     /tmp/ccwHIqYH.s:3242   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 HAL_HalfDuplex_EnableTransmitter
     /tmp/ccwHIqYH.s:3291   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 $t
     /tmp/ccwHIqYH.s:3298   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 HAL_HalfDuplex_EnableReceiver
     /tmp/ccwHIqYH.s:3347   .text.HAL_LIN_SendBreak:0000000000000000 $t
     /tmp/ccwHIqYH.s:3354   .text.HAL_LIN_SendBreak:0000000000000000 HAL_LIN_SendBreak
     /tmp/ccwHIqYH.s:3398   .text.HAL_UART_GetState:0000000000000000 $t
     /tmp/ccwHIqYH.s:3405   .text.HAL_UART_GetState:0000000000000000 HAL_UART_GetState
     /tmp/ccwHIqYH.s:3427   .text.HAL_UART_GetError:0000000000000000 $t
     /tmp/ccwHIqYH.s:3434   .text.HAL_UART_GetError:0000000000000000 HAL_UART_GetError
     /tmp/ccwHIqYH.s:3451   .text.UART_SetConfig:0000000000000000 $t
     /tmp/ccwHIqYH.s:3458   .text.UART_SetConfig:0000000000000000 UART_SetConfig
     /tmp/ccwHIqYH.s:3559   .text.UART_SetConfig:000000000000008c $d
     /tmp/ccwHIqYH.s:3569   .text.UART_SetConfig:000000000000009e $t
ARM GAS  /tmp/ccwHIqYH.s 			page 191


     /tmp/ccwHIqYH.s:3579   .text.UART_SetConfig:00000000000000b0 $d
     /tmp/ccwHIqYH.s:3583   .text.UART_SetConfig:00000000000000b4 $t
     /tmp/ccwHIqYH.s:3613   .text.UART_SetConfig:00000000000000d6 $d
     /tmp/ccwHIqYH.s:3883   .text.UART_SetConfig:0000000000000232 $d
     /tmp/ccwHIqYH.s:3945   .text.UART_SetConfig:0000000000000268 $d
     /tmp/ccwHIqYH.s:3959   .text.UART_SetConfig:0000000000000294 $t
     /tmp/ccwHIqYH.s:4095   .text.UART_SetConfig:0000000000000328 $d
     /tmp/ccwHIqYH.s:4100   .text.UART_AdvFeatureConfig:0000000000000000 $t
     /tmp/ccwHIqYH.s:4107   .text.UART_AdvFeatureConfig:0000000000000000 UART_AdvFeatureConfig
     /tmp/ccwHIqYH.s:4229   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 $t
     /tmp/ccwHIqYH.s:4236   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 UART_WaitOnFlagUntilTimeout
     /tmp/ccwHIqYH.s:4347   .text.HAL_UART_Transmit:0000000000000000 $t
     /tmp/ccwHIqYH.s:4354   .text.HAL_UART_Transmit:0000000000000000 HAL_UART_Transmit
     /tmp/ccwHIqYH.s:4530   .text.HAL_UART_Receive:0000000000000000 $t
     /tmp/ccwHIqYH.s:4537   .text.HAL_UART_Receive:0000000000000000 HAL_UART_Receive
     /tmp/ccwHIqYH.s:4760   .text.UART_CheckIdleState:0000000000000000 $t
     /tmp/ccwHIqYH.s:4767   .text.UART_CheckIdleState:0000000000000000 UART_CheckIdleState
     /tmp/ccwHIqYH.s:4861   .text.HAL_UART_Init:0000000000000000 $t
     /tmp/ccwHIqYH.s:4868   .text.HAL_UART_Init:0000000000000000 HAL_UART_Init
     /tmp/ccwHIqYH.s:4963   .text.HAL_HalfDuplex_Init:0000000000000000 $t
     /tmp/ccwHIqYH.s:4970   .text.HAL_HalfDuplex_Init:0000000000000000 HAL_HalfDuplex_Init
     /tmp/ccwHIqYH.s:5071   .text.HAL_LIN_Init:0000000000000000 $t
     /tmp/ccwHIqYH.s:5078   .text.HAL_LIN_Init:0000000000000000 HAL_LIN_Init
     /tmp/ccwHIqYH.s:5211   .text.HAL_MultiProcessor_Init:0000000000000000 $t
     /tmp/ccwHIqYH.s:5218   .text.HAL_MultiProcessor_Init:0000000000000000 HAL_MultiProcessor_Init
     /tmp/ccwHIqYH.s:5341   .text.HAL_MultiProcessor_EnableMuteMode:0000000000000000 $t
     /tmp/ccwHIqYH.s:5348   .text.HAL_MultiProcessor_EnableMuteMode:0000000000000000 HAL_MultiProcessor_EnableMuteMode
     /tmp/ccwHIqYH.s:5392   .text.HAL_MultiProcessor_DisableMuteMode:0000000000000000 $t
     /tmp/ccwHIqYH.s:5399   .text.HAL_MultiProcessor_DisableMuteMode:0000000000000000 HAL_MultiProcessor_DisableMuteMode
     /tmp/ccwHIqYH.s:5443   .text.UART_Start_Receive_IT:0000000000000000 $t
     /tmp/ccwHIqYH.s:5450   .text.UART_Start_Receive_IT:0000000000000000 UART_Start_Receive_IT
     /tmp/ccwHIqYH.s:5569   .text.UART_Start_Receive_IT:00000000000000a4 $d
     /tmp/ccwHIqYH.s:5575   .text.HAL_UART_Receive_IT:0000000000000000 $t
     /tmp/ccwHIqYH.s:5582   .text.HAL_UART_Receive_IT:0000000000000000 HAL_UART_Receive_IT
     /tmp/ccwHIqYH.s:5654   .text.UART_Start_Receive_DMA:0000000000000000 $t
     /tmp/ccwHIqYH.s:5661   .text.UART_Start_Receive_DMA:0000000000000000 UART_Start_Receive_DMA
     /tmp/ccwHIqYH.s:5754   .text.UART_Start_Receive_DMA:0000000000000078 $d
     /tmp/ccwHIqYH.s:5761   .text.HAL_UART_Receive_DMA:0000000000000000 $t
     /tmp/ccwHIqYH.s:5768   .text.HAL_UART_Receive_DMA:0000000000000000 HAL_UART_Receive_DMA
                     .debug_frame:0000000000000010 $d
     /tmp/ccwHIqYH.s:3626   .text.UART_SetConfig:00000000000000e3 $d
     /tmp/ccwHIqYH.s:3626   .text.UART_SetConfig:00000000000000e4 $t
     /tmp/ccwHIqYH.s:3892   .text.UART_SetConfig:000000000000023b $d
     /tmp/ccwHIqYH.s:3892   .text.UART_SetConfig:000000000000023c $t

UNDEFINED SYMBOLS
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_GetError
HAL_DMA_Abort_IT
HAL_RCC_GetPCLK1Freq
HAL_RCC_GetPCLK2Freq
HAL_RCC_GetSysClockFreq
HAL_GetTick
